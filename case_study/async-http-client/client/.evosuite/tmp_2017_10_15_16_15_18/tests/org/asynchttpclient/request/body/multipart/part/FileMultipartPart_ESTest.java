/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:03:33 GMT 2017
 */

package org.asynchttpclient.request.body.multipart.part;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import java.io.File;
import java.io.IOException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.WritableByteChannel;
import java.nio.charset.Charset;
import java.util.LinkedList;
import org.apache.tomcat.util.buf.Utf8Encoder;
import org.asynchttpclient.Param;
import org.asynchttpclient.request.body.multipart.FilePart;
import org.asynchttpclient.request.body.multipart.part.FileMultipartPart;
import org.asynchttpclient.request.body.multipart.part.MultipartState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileMultipartPart_ESTest extends FileMultipartPart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = MockFile.createTempFile("HXYds*?5Hx!wm]", "HXYds*?5Hx!wm]");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/HXYds*?5Hx!wm]0HXYds*?5Hx!wm]");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "HXYds*?5Hx!wm]");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("HXYds*?5Hx!wm]", "dFZ*@`cCA").when(filePart0).getFileName();
      doReturn(file0, file0, file0).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0).when(filePart0).getCharset();
      doReturn("HXYds*?5Hx!wm]").when(filePart0).getContentId();
      doReturn("HXYds*?5Hx!wm]").when(filePart0).getContentType();
      doReturn(linkedList0).when(filePart0).getCustomHeaders();
      doReturn("HXYds*?5Hx!wm]", "HXYds*?5Hx!wm]").when(filePart0).getDispositionType();
      doReturn("HXYds*?5Hx!wm]", "").when(filePart0).getName();
      doReturn("HXYds*?5Hx!wm]").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[0];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      long long0 = fileMultipartPart0.getContentLength();
      assertEquals(16L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = MockFile.createTempFile("HXYds*?5Hx!wm]", "HXYds*?5Hx!wm]");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("HXYds*?5Hx!wm]", "dFZ*@`cCA").when(filePart0).getFileName();
      doReturn(file0, file0).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0).when(filePart0).getCharset();
      doReturn("HXYds*?5Hx!wm]").when(filePart0).getContentId();
      doReturn("HXYds*?5Hx!wm]").when(filePart0).getContentType();
      doReturn(linkedList0).when(filePart0).getCustomHeaders();
      doReturn("HXYds*?5Hx!wm]", "HXYds*?5Hx!wm]").when(filePart0).getDispositionType();
      doReturn("HXYds*?5Hx!wm]", "").when(filePart0).getName();
      doReturn("HXYds*?5Hx!wm]").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[0];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileMultipartPart0.transferContentTo(fileChannel0);
      try { 
        fileMultipartPart0.transferContentTo(fileChannel0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null).when(filePart0).getDispositionType();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      FileMultipartPart fileMultipartPart0 = null;
      try {
        fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = MockFile.createTempFile("HXYds*?5Hx!wm]", "HXYds*?5Hx!wm]");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("HXYds*?5Hx!wm]", "dFZ*@`cCA").when(filePart0).getFileName();
      doReturn(file0, file0).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0).when(filePart0).getCharset();
      doReturn("HXYds*?5Hx!wm]").when(filePart0).getContentId();
      doReturn("HXYds*?5Hx!wm]").when(filePart0).getContentType();
      doReturn(linkedList0).when(filePart0).getCustomHeaders();
      doReturn("HXYds*?5Hx!wm]", "HXYds*?5Hx!wm]").when(filePart0).getDispositionType();
      doReturn("HXYds*?5Hx!wm]", "").when(filePart0).getName();
      doReturn("HXYds*?5Hx!wm]").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[0];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      try { 
        fileMultipartPart0.transferContentTo(fileChannel0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("_s");
      MockFile.createTempFile("CIDR too large: ", "_s", (File) mockFile0);
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("'*m%^|.@*uC+&$pt.u", (String) null).when(filePart0).getDispositionType();
      byte[] byteArray0 = new byte[0];
      FileMultipartPart fileMultipartPart0 = null;
      try {
        fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("e", "File part doesn't exist: ", "7XI", "|Snd+A").when(filePart0).getFileName();
      doReturn(mockFile0, mockFile0).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null, (Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn("e", (String) null).when(filePart0).getContentId();
      doReturn("File part doesn't exist: ", "File part doesn't exist: ").when(filePart0).getContentType();
      doReturn(linkedList0, linkedList0).when(filePart0).getCustomHeaders();
      doReturn("", "e", "|Snd+A", "&2").when(filePart0).getDispositionType();
      doReturn("File part doesn't exist: ", "y>Mm%$WGPbtd|", (String) null).when(filePart0).getName();
      doReturn("File part doesn't exist: ", "").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[3];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn((int)(byte)82).when(writableByteChannel0).write(any(java.nio.ByteBuffer.class));
      fileMultipartPart0.transferTo(writableByteChannel0);
      fileMultipartPart0.close();
      // Undeclared exception!
      try { 
        fileMultipartPart0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refCnt: 0, decrement: 1
         //
         verifyException("io.netty.buffer.AbstractReferenceCountedByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("NO|R/hL8u");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("$VALUES", (String) null).when(filePart0).getDispositionType();
      byte[] byteArray0 = new byte[0];
      FileMultipartPart fileMultipartPart0 = null;
      try {
        fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      byte[] byteArray0 = new byte[9];
      File file0 = MockFile.createTempFile("azCBzc-LFe}i B", "azCBzc-LFe}i B");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("|", "azCBzc-LFe}i B", "", "").when(filePart0).getFileName();
      doReturn(file0, file0).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0, (Charset) null).when(filePart0).getCharset();
      doReturn("6.f#a3cVnT]", "_Tz5lW").when(filePart0).getContentId();
      doReturn("6.f#a3cVnT]", "_Tz5lW").when(filePart0).getContentType();
      doReturn(linkedList0, linkedList0).when(filePart0).getCustomHeaders();
      doReturn("|", "%wrea7XefbQ{t@iWx6-", "|", "|").when(filePart0).getDispositionType();
      doReturn("_Tz5lW", "azCBzc-LFe}i B", (String) null).when(filePart0).getName();
      doReturn("|", (String) null).when(filePart0).getTransferEncoding();
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      ByteBuf byteBuf0 = fileMultipartPart0.computePreContentBytes((byte)0);
      fileMultipartPart0.transferContentTo(byteBuf0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      // Undeclared exception!
      try { 
        fileMultipartPart0.transferContentTo(fileChannel0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("HXYds*?5Hx!wm]", "HXYds*?5Hx!wm]");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/HXYds*?5Hx!wm]0HXYds*?5Hx!wm]");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "HXYds*?5Hx!wm]");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("HXYds*?5Hx!wm]", "dFZ*@`cCA").when(filePart0).getFileName();
      doReturn(file0, file0).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0).when(filePart0).getCharset();
      doReturn("HXYds*?5Hx!wm]").when(filePart0).getContentId();
      doReturn("HXYds*?5Hx!wm]").when(filePart0).getContentType();
      doReturn(linkedList0).when(filePart0).getCustomHeaders();
      doReturn("HXYds*?5Hx!wm]", "HXYds*?5Hx!wm]").when(filePart0).getDispositionType();
      doReturn("HXYds*?5Hx!wm]", "").when(filePart0).getName();
      doReturn("HXYds*?5Hx!wm]").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[0];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileMultipartPart0.transferContentTo(fileChannel0);
      assertTrue(fileMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("getAndSetObject", "#&U>[n(2Z#W9OdP>V'").when(filePart0).getFileName();
      doReturn(mockFile0, mockFile0).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0).when(filePart0).getCharset();
      doReturn("#&U>[n(2Z#W9OdP>V'").when(filePart0).getContentId();
      doReturn("").when(filePart0).getContentType();
      doReturn(linkedList0).when(filePart0).getCustomHeaders();
      doReturn("#&U>[n(2Z#W9OdP>V'", "r").when(filePart0).getDispositionType();
      doReturn("r", "").when(filePart0).getName();
      doReturn("").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[8];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      ByteBuf byteBuf0 = fileMultipartPart0.computePostContentBytes((byte)4);
      MultipartState multipartState0 = MultipartState.PRE_CONTENT;
      fileMultipartPart0.transfer(byteBuf0, byteBuf0, multipartState0);
      long long0 = fileMultipartPart0.transferContentTo(byteBuf0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("e", "File part doesn't exist: ").when(filePart0).getFileName();
      doReturn(mockFile0, mockFile0, mockFile0).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn("e").when(filePart0).getContentId();
      doReturn("File part doesn't exist: ").when(filePart0).getContentType();
      doReturn(linkedList0).when(filePart0).getCustomHeaders();
      doReturn("", "e").when(filePart0).getDispositionType();
      doReturn("File part doesn't exist: ", "y>Mm%$WGPbtd|").when(filePart0).getName();
      doReturn("File part doesn't exist: ").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[3];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      long long0 = fileMultipartPart0.getContentLength();
      assertEquals(0L, long0);
  }
}
