/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:28:13 GMT 2017
 */

package org.asynchttpclient.netty.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.channel.Channel;
import io.netty.util.concurrent.EventExecutor;
import org.asynchttpclient.netty.NettyResponseFuture;
import org.asynchttpclient.netty.channel.ChannelManager;
import org.asynchttpclient.netty.handler.StreamedResponsePublisher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StreamedResponsePublisher_ESTest extends StreamedResponsePublisher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EventExecutor eventExecutor0 = mock(EventExecutor.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture0 = (NettyResponseFuture<Object>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      StreamedResponsePublisher streamedResponsePublisher0 = new StreamedResponsePublisher(eventExecutor0, channelManager0, nettyResponseFuture0, (Channel) null);
      streamedResponsePublisher0.cancelled();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EventExecutor eventExecutor0 = mock(EventExecutor.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      StreamedResponsePublisher streamedResponsePublisher0 = new StreamedResponsePublisher(eventExecutor0, (ChannelManager) null, (NettyResponseFuture<?>) null, channel0);
      // Undeclared exception!
      try { 
        streamedResponsePublisher0.cancelled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.handler.StreamedResponsePublisher", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EventExecutor eventExecutor0 = mock(EventExecutor.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      StreamedResponsePublisher streamedResponsePublisher0 = new StreamedResponsePublisher(eventExecutor0, channelManager0, (NettyResponseFuture<?>) null, channel0);
      NettyResponseFuture<?> nettyResponseFuture0 = streamedResponsePublisher0.future();
      assertNull(nettyResponseFuture0);
  }
}
