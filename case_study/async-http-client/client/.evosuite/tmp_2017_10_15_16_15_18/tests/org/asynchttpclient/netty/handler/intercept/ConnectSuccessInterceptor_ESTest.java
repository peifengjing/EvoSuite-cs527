/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:22:12 GMT 2017
 */

package org.asynchttpclient.netty.handler.intercept;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.channel.Channel;
import io.netty.channel.ChannelPipeline;
import io.netty.handler.codec.http.HttpRequest;
import org.asynchttpclient.Request;
import org.asynchttpclient.netty.NettyResponseFuture;
import org.asynchttpclient.netty.channel.ChannelManager;
import org.asynchttpclient.netty.handler.intercept.ConnectSuccessInterceptor;
import org.asynchttpclient.netty.request.NettyRequestSender;
import org.asynchttpclient.proxy.ProxyServer;
import org.asynchttpclient.uri.Uri;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConnectSuccessInterceptor_ESTest extends ConnectSuccessInterceptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      NettyRequestSender nettyRequestSender0 = mock(NettyRequestSender.class, new ViolatedAssumptionAnswer());
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelPipeline0).when(channel0).pipeline();
      NettyResponseFuture<String> nettyResponseFuture0 = (NettyResponseFuture<String>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(nettyResponseFuture0).isKeepAlive();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("i386").when(uri0).getScheme();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn(uri0).when(request0).getUri();
      ProxyServer proxyServer0 = mock(ProxyServer.class, new ViolatedAssumptionAnswer());
      ConnectSuccessInterceptor connectSuccessInterceptor0 = new ConnectSuccessInterceptor(channelManager0, nettyRequestSender0);
      HttpRequest httpRequest0 = mock(HttpRequest.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        connectSuccessInterceptor0.exitAfterHandlingConnect(channel0, nettyResponseFuture0, request0, proxyServer0, (-509), httpRequest0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.asynchttpclient.RequestBuilder
         //
         verifyException("org.asynchttpclient.netty.handler.intercept.ConnectSuccessInterceptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      NettyRequestSender nettyRequestSender0 = mock(NettyRequestSender.class, new ViolatedAssumptionAnswer());
      ConnectSuccessInterceptor connectSuccessInterceptor0 = new ConnectSuccessInterceptor(channelManager0, nettyRequestSender0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture0 = (NettyResponseFuture<Object>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(nettyResponseFuture0).isKeepAlive();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn((Uri) null).when(request0).getUri();
      ProxyServer proxyServer0 = mock(ProxyServer.class, new ViolatedAssumptionAnswer());
      HttpRequest httpRequest0 = mock(HttpRequest.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        connectSuccessInterceptor0.exitAfterHandlingConnect(channel0, nettyResponseFuture0, request0, proxyServer0, 2917, httpRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.handler.intercept.ConnectSuccessInterceptor", e);
      }
  }
}
