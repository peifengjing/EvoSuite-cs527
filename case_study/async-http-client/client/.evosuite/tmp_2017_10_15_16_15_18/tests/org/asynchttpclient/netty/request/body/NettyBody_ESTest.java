/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:41:31 GMT 2017
 */

package org.asynchttpclient.netty.request.body;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.EventLoop;
import io.netty.handler.codec.http.HttpHeaders;
import java.io.PipedInputStream;
import java.util.LinkedList;
import org.asynchttpclient.AsyncHttpClientConfig;
import org.asynchttpclient.netty.NettyResponseFuture;
import org.asynchttpclient.netty.request.body.NettyByteArrayBody;
import org.asynchttpclient.netty.request.body.NettyCompositeByteArrayBody;
import org.asynchttpclient.netty.request.body.NettyInputStreamBody;
import org.asynchttpclient.netty.request.body.NettyMultipartBody;
import org.asynchttpclient.netty.request.body.NettyReactiveStreamsBody;
import org.asynchttpclient.request.body.multipart.Part;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.reactivestreams.Publisher;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NettyBody_ESTest extends NettyBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      NettyReactiveStreamsBody nettyReactiveStreamsBody0 = new NettyReactiveStreamsBody(publisher0, (-1L));
      EventLoop eventLoop0 = mock(EventLoop.class, new ViolatedAssumptionAnswer());
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelPipeline) null).when(channelPipeline0).addLast(anyString() , any(io.netty.channel.ChannelHandler.class));
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(eventLoop0).when(channel0).eventLoop();
      doReturn(channelPipeline0).when(channel0).pipeline();
      NettyResponseFuture<Integer> nettyResponseFuture0 = (NettyResponseFuture<Integer>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(nettyResponseFuture0).isStreamConsumed();
      nettyReactiveStreamsBody0.write(channel0, nettyResponseFuture0);
      assertEquals((-1L), nettyReactiveStreamsBody0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Part> linkedList0 = new LinkedList<Part>();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpHeaders0).get(any(java.lang.CharSequence.class));
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      NettyMultipartBody nettyMultipartBody0 = new NettyMultipartBody(linkedList0, httpHeaders0, asyncHttpClientConfig0);
      CharSequence charSequence0 = nettyMultipartBody0.getContentTypeOverride();
      assertEquals("multipart/form-data; boundary=5yk89spcTlb3mUB86mcOoGgkwwYHg_gR", charSequence0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      NettyCompositeByteArrayBody nettyCompositeByteArrayBody0 = new NettyCompositeByteArrayBody(linkedList0);
      long long0 = nettyCompositeByteArrayBody0.getContentLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Part> linkedList0 = new LinkedList<Part>();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpHeaders0).get(any(java.lang.CharSequence.class));
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      NettyMultipartBody nettyMultipartBody0 = new NettyMultipartBody(linkedList0, httpHeaders0, asyncHttpClientConfig0);
      long long0 = nettyMultipartBody0.getContentLength();
      assertEquals(38L, long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      NettyInputStreamBody nettyInputStreamBody0 = new NettyInputStreamBody(pipedInputStream0);
      long long0 = nettyInputStreamBody0.getContentLength();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<byte[]> linkedList0 = new LinkedList<byte[]>();
      NettyCompositeByteArrayBody nettyCompositeByteArrayBody0 = new NettyCompositeByteArrayBody(linkedList0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture0 = (NettyResponseFuture<Object>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nettyCompositeByteArrayBody0.write(channel0, nettyResponseFuture0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // This kind of body is supposed to be writen directly
         //
         verifyException("org.asynchttpclient.netty.request.body.NettyDirectBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      NettyReactiveStreamsBody nettyReactiveStreamsBody0 = new NettyReactiveStreamsBody(publisher0, (-1L));
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((EventLoop) null).when(channel0).eventLoop();
      doReturn((ChannelPipeline) null).when(channel0).pipeline();
      NettyResponseFuture<Integer> nettyResponseFuture0 = (NettyResponseFuture<Integer>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(nettyResponseFuture0).isStreamConsumed();
      // Undeclared exception!
      try { 
        nettyReactiveStreamsBody0.write(channel0, nettyResponseFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.request.body.NettyReactiveStreamsBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NettyByteArrayBody nettyByteArrayBody0 = new NettyByteArrayBody((byte[]) null);
      CharSequence charSequence0 = nettyByteArrayBody0.getContentTypeOverride();
      assertNull(charSequence0);
  }
}
