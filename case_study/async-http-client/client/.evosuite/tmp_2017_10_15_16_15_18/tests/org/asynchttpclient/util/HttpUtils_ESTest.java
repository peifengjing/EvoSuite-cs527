/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 23:59:19 GMT 2017
 */

package org.asynchttpclient.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import org.asynchttpclient.AsyncHttpClientConfig;
import org.asynchttpclient.Param;
import org.asynchttpclient.Request;
import org.asynchttpclient.uri.Uri;
import org.asynchttpclient.util.HttpUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUtils_ESTest extends HttpUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Uri uri0 = new Uri(", must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'", ")t(9\"V\"f}(0v~W3y[", ")t(9\"V\"f}(0v~W3y[", 0, "NTLM", ", must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'");
      String string0 = HttpUtils.computeOriginHeader(uri0);
      assertEquals("http://)t(9\"V\"f}(0v~W3y[:0", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = HttpUtils.parseCharset("<$Cc;A[_fx");
      assertNull(charset0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Uri uri0 = new Uri("vJ", "vJ", "vJ", (-1204), "", "1Ld$ElP$q");
      Uri uri1 = uri0.withNewScheme("vJ");
      boolean boolean0 = HttpUtils.isSameBase(uri1, uri0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.validateSupportedScheme((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.urlEncodeFormParams((List<Param>) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.parseCharset("charset=pDf*");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // pDf*
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.parseCharset((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.isSameBase((Uri) null, (Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Uri uri0 = new Uri("ZMInD-b=56U_=v_pV", "ZMInD-b=56U_=v_pV", "combiner is null", (-5364), "combiner is null", "combiner is null");
      // Undeclared exception!
      try { 
        HttpUtils.hostHeader((Request) null, uri0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.getNonEmptyPath((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.getBaseUrl((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.getAuthority((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        HttpUtils.followRedirect(asyncHttpClientConfig0, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.computeOriginHeader((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Uri uri0 = new Uri("`2=~L>WVlFV!5dhlK{", " on TestClass ", "charset=group set already", 979, ")]>.)\"ox=\"bgx8<", "@p:9Z5>bL");
      String string0 = HttpUtils.computeOriginHeader(uri0);
      assertEquals("http://charset=group set already:979", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param("_T$eo}%7Dd6s5)IMEjC", "!?I)h$q<");
      stack0.add(param0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
      assertEquals(46, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HttpUtils httpUtils0 = new HttpUtils();
      ArrayList<Param> arrayList0 = new ArrayList<Param>();
      Param param0 = new Param("n*l`", "<=");
      arrayList0.add(param0);
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(arrayList0, httpUtils0.DEFAULT_CHARSET);
      assertEquals(13, byteBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.parseCharset("charset=pDf");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // pDf
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Uri uri0 = new Uri("ZMInD-b=56U_=v_pV", "ZMInD-b=56U_=v_pV", "combiner is null", (-5364), "combiner is null", "combiner is null");
      String string0 = HttpUtils.getNonEmptyPath(uri0);
      assertEquals("combiner is null", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Uri uri0 = new Uri("io.reactivex.Notification", "The URI scheme, of the URI ", "$h):MM", 58, "", "$h):MM");
      String string0 = HttpUtils.getNonEmptyPath(uri0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Uri uri0 = new Uri("`2=~L>WVlFV!5dhlK{", " on TestClass ", "charset=group set already", 979, ")]>.)\"ox=\"bgx8<", "@p:9Z5>bL");
      Uri uri1 = uri0.withNewScheme("charset=group set already");
      boolean boolean0 = HttpUtils.isSameBase(uri0, uri1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Uri uri0 = new Uri("httop", "httop", "httop", 38, " direct arena(s):", "io.reactivex.disposables.SubscriptionDisposable");
      // Undeclared exception!
      try { 
        HttpUtils.validateSupportedScheme(uri0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The URI scheme, of the URI httop://httop@httop:38 direct arena(s):?io.reactivex.disposables.SubscriptionDisposable, must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Uri uri0 = new Uri("http", "http", "http", 38, " direct arena(s):", "io.reactivex.disposables.SubscriptionDisposable");
      HttpUtils.validateSupportedScheme(uri0);
      assertEquals(38, uri0.getExplicitPort());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Uri uri0 = new Uri("vJ", "vJ", "vJ", (-1204), "", "1Ld$ElP$q");
      String string0 = HttpUtils.getAuthority(uri0);
      assertEquals("vJ:-1204", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Uri uri0 = new Uri("ZMInD-b=56U_=v_pV", "ZMInD-b=56U_=v_pV", "combiner is null", (-5364), "combiner is null", "combiner is null");
      String string0 = HttpUtils.getBaseUrl(uri0);
      assertEquals("ZMInD-b=56U_=v_pV://combiner is null:-5364", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HttpUtils httpUtils0 = new HttpUtils();
      ArrayList<Param> arrayList0 = new ArrayList<Param>();
      // Undeclared exception!
      try { 
        HttpUtils.urlEncodeFormParams(arrayList0, httpUtils0.DEFAULT_CHARSET);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}
