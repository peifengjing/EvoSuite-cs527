/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:33:24 GMT 2017
 */

package org.asynchttpclient.request.body.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import io.netty.buffer.ByteBuf;
import org.asynchttpclient.request.body.Body;
import org.asynchttpclient.request.body.generator.FeedListener;
import org.asynchttpclient.request.body.generator.ReactiveStreamsBodyGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.reactivestreams.Publisher;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReactiveStreamsBodyGenerator_ESTest extends ReactiveStreamsBodyGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator((Publisher<ByteBuf>) null, (-13L));
      reactiveStreamsBodyGenerator0.getPublisher();
      assertEquals((-13L), reactiveStreamsBodyGenerator0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator((Publisher<ByteBuf>) null, 15L);
      long long0 = reactiveStreamsBodyGenerator0.getContentLength();
      assertEquals(15L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator((Publisher<ByteBuf>) null, (-13L));
      long long0 = reactiveStreamsBodyGenerator0.getContentLength();
      assertEquals((-13L), long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator((Publisher<ByteBuf>) null, (-13L));
      reactiveStreamsBodyGenerator0.feed((ByteBuf) null, false);
      assertEquals((-13L), reactiveStreamsBodyGenerator0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator((Publisher<ByteBuf>) null, (-13L));
      Body body0 = reactiveStreamsBodyGenerator0.createBody();
      assertEquals((-13L), body0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator((Publisher<ByteBuf>) null, (-13L));
      FeedListener feedListener0 = mock(FeedListener.class, new ViolatedAssumptionAnswer());
      reactiveStreamsBodyGenerator0.setListener(feedListener0);
      assertEquals((-13L), reactiveStreamsBodyGenerator0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(publisher0).toString();
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator(publisher0, 3277L);
      reactiveStreamsBodyGenerator0.getPublisher();
      assertEquals(3277L, reactiveStreamsBodyGenerator0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator((Publisher<ByteBuf>) null, 0L);
      long long0 = reactiveStreamsBodyGenerator0.getContentLength();
      assertEquals(0L, long0);
  }
}
