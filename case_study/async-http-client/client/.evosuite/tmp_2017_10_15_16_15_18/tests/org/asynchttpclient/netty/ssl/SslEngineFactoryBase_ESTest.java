/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:24:49 GMT 2017
 */

package org.asynchttpclient.netty.ssl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.handler.ssl.SslContext;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLEngine;
import org.asynchttpclient.AsyncHttpClientConfig;
import org.asynchttpclient.netty.ssl.DefaultSslEngineFactory;
import org.asynchttpclient.netty.ssl.JsseSslEngineFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SslEngineFactoryBase_ESTest extends SslEngineFactoryBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SSLContext sSLContext0 = mock(SSLContext.class, new ViolatedAssumptionAnswer());
      JsseSslEngineFactory jsseSslEngineFactory0 = new JsseSslEngineFactory(sSLContext0);
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jsseSslEngineFactory0.configureSslEngine((SSLEngine) null, asyncHttpClientConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.ssl.SslEngineFactoryBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseOpenSsl();
      defaultSslEngineFactory0.init(asyncHttpClientConfig0);
      AsyncHttpClientConfig asyncHttpClientConfig1 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(asyncHttpClientConfig1).isDisableHttpsEndpointIdentificationAlgorithm();
      SSLEngine sSLEngine0 = defaultSslEngineFactory0.newSslEngine(asyncHttpClientConfig1, "", 125);
      AsyncHttpClientConfig asyncHttpClientConfig2 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(asyncHttpClientConfig2).isDisableHttpsEndpointIdentificationAlgorithm();
      defaultSslEngineFactory0.configureSslEngine(sSLEngine0, asyncHttpClientConfig2);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(asyncHttpClientConfig0).isDisableHttpsEndpointIdentificationAlgorithm();
      AsyncHttpClientConfig asyncHttpClientConfig1 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(asyncHttpClientConfig1).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig1).getEnabledProtocols();
      doReturn((SslContext) null).when(asyncHttpClientConfig1).getSslContext();
      doReturn(0).when(asyncHttpClientConfig1).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig1).getSslSessionTimeout();
      doReturn(false).when(asyncHttpClientConfig1).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig1).isUseOpenSsl();
      defaultSslEngineFactory0.init(asyncHttpClientConfig1);
      SSLEngine sSLEngine0 = defaultSslEngineFactory0.newSslEngine(asyncHttpClientConfig0, "h/a;3lf<0iY9{u(e#", 1);
      assertNotNull(sSLEngine0);
  }
}
