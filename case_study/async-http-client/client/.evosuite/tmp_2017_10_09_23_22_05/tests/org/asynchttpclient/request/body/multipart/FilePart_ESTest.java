/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 08:00:23 GMT 2017
 */

package org.asynchttpclient.request.body.multipart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.charset.Charset;
import org.apache.tomcat.util.buf.Utf8Encoder;
import org.asynchttpclient.request.body.multipart.FilePart;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FilePart_ESTest extends FilePart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile(")mT~fn:Q2.^;", "PathWatcher must be stopped before reset.");
      MockFile mockFile1 = new MockFile(mockFile0, "PathWatcher must be stopped before reset.");
      File file0 = MockFile.createTempFile("PathWatcher must be stopped before reset.", ";qR>L51-$*;[*", (File) mockFile1);
      FilePart filePart0 = new FilePart("PathWatcher must be stopped before reset.", file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/async-http-client/client/)mT~fn:Q2.^;/PathWatcher must be stopped before reset./PathWatcher must be stopped before reset./PathWatcher must be stopped before reset.0;qR>L51-$*;[*");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ")mT~fn:Q2.^;");
      File file1 = filePart0.getFile();
      assertEquals(1392409281320L, file1.lastModified());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":,");
      mockFile0.createNewFile();
      FilePart filePart0 = new FilePart(":,", mockFile0, "", (Charset) null, ":,");
      File file0 = filePart0.getFile();
      assertTrue(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("File is not a normal file ");
      File file0 = MockFile.createTempFile("File is not readable ", "", (File) mockFile0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = new FilePart("File is not readable ", file0, "File is not readable ", charset0, "File is not a normal file ");
      file0.delete();
      File file1 = filePart0.getFile();
      assertNotSame(mockFile0, file1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = MockFile.createTempFile("STARTING", "n");
      file0.setExecutable(false, false);
      FilePart filePart0 = new FilePart("STARTING", file0, "STARTING", (Charset) null, "n", "n");
      File file1 = filePart0.getFile();
      assertEquals(0L, file1.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart((String) null, (File) null, "UVr69\u00038#p", charset0, (String) null, "#Ug~tBO.D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.FilePart", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("gOSScmc", (File) null, "gOSScmc", charset0, "gOSScmc", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1r{Fal:&O}U]", "ADDED");
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("1r{Fal:&O}U]", mockFile0, "1r{Fal:&O}U]", (Charset) null, "ADDED", "1r{Fal:&O}U]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File is not readable /Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/async-http-client/client/1r{Fal:&O}U]/ADDED
         //
         verifyException("org.asynchttpclient.request.body.multipart.FilePart", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart((String) null, (File) null, "", (Charset) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.FilePart", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("xPjb?~k;", (File) null, "X)", charset0, "JAx\"$@D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("8:8y7f j", "8:8y7f j");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("8:8y7f j", mockFile0, "8:8y7f j", charset0, "8:8y7f j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File is not readable /Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/async-http-client/client/8:8y7f j/8:8y7f j
         //
         verifyException("org.asynchttpclient.request.body.multipart.FilePart", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("r>-`2.U x}", (File) null, "r>-`2.U x}", charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.FilePart", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("", (File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.FilePart", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("", (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.FilePart", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "File is not a normlMAie ");
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("File is not a normlMAie ", mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File is not readable /Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/async-http-client/client/File is not a normlMAie 
         //
         verifyException("org.asynchttpclient.request.body.multipart.FilePart", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("file", "Lf5Y(4t**ifg`4XD-_");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("Lf5Y(4t**ifg`4XD-_", mockFile0, "file", charset0, "Lf5Y(4t**ifg`4XD-_", "file", "Lf5Y(4t**ifg`4XD-_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File is not readable /Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/async-http-client/client/file/Lf5Y(4t**ifg`4XD-_
         //
         verifyException("org.asynchttpclient.request.body.multipart.FilePart", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile(")it?o1", "D");
      FilePart filePart0 = new FilePart("D", file0, "3x04c", (Charset) null, "D", "3x04c", "3x04c");
      assertEquals("3x04c", filePart0.getContentId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("", mockFile0, "", (Charset) null, "File is not a normal file ", "File is not a normal file ", "File is not a normal file ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File is not a normal file /
         //
         verifyException("org.asynchttpclient.request.body.multipart.FilePart", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart(" name=", (File) null, " name=", charset0, "File is not a normal file ", "File is not a normal file ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("tJy4Q(LfB4^L#cl ", (File) null, (String) null, charset0, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.FilePart", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile("gp\"&l]B(W", ": dc#FsT!]57<g^~");
      FilePart filePart0 = new FilePart("", file0, (String) null);
      assertEquals("application/octet-stream", filePart0.getContentType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = MockFile.createTempFile("Pattern is missing", "g'hs4022/.#BuAvV~", (File) null);
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = new FilePart("File is not readable ", file0, "File is not readable ", charset0);
      File file1 = filePart0.getFile();
      assertEquals(".#BuAvV~", file1.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = MockFile.createTempFile("0,1KD)L}Few.", "0,1KD)L}Few.");
      MockFile mockFile0 = new MockFile(file0, "Xta&c#. M");
      File file1 = mockFile0.getAbsoluteFile();
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("0,1KD)L}Few.", file1, "0,1KD)L}Few.", charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File is not readable /var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/0,1KD)L}Few.00,1KD)L}Few./Xta&c#. M
         //
         verifyException("org.asynchttpclient.request.body.multipart.FilePart", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("", mockFile0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File is not a normal file /Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/async-http-client/client
         //
         verifyException("org.asynchttpclient.request.body.multipart.FilePart", e);
      }
  }
}
