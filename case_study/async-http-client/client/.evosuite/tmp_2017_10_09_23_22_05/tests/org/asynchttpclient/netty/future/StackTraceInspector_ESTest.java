/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 07:02:44 GMT 2017
 */

package org.asynchttpclient.netty.future;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.channels.ClosedChannelException;
import org.asynchttpclient.netty.future.StackTraceInspector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StackTraceInspector_ESTest extends StackTraceInspector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("The array of names must not be null");
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockThrowable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        StackTraceInspector.recoverOnReadOrWriteException((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.future.StackTraceInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        StackTraceInspector.recoverOnNettyDisconnectException((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.future.StackTraceInspector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("sun.nio.ch.SocketDispatcher", "#ezy85ucy+XO=Tl|I", "#ezy85ucy+XO=Tl|I", 1281);
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElementArray0[0];
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockThrowable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("Connection reset by peer");
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("Connection reset by peer");
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClosedChannelException closedChannelException0 = new ClosedChannelException();
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(closedChannelException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClosedChannelException closedChannelException0 = new ClosedChannelException();
      MockIOException mockIOException0 = new MockIOException(",`v@Om d?eM}o", closedChannelException0);
      MockThrowable mockThrowable0 = new MockThrowable(".", mockIOException0);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackTraceInspector stackTraceInspector0 = new StackTraceInspector();
  }
}
