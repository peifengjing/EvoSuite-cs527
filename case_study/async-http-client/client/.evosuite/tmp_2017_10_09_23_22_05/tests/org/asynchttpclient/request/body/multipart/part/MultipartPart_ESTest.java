/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 06:53:29 GMT 2017
 */

package org.asynchttpclient.request.body.multipart.part;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.CompositeByteBuf;
import io.netty.buffer.EmptyByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.buffer.UnpooledDirectByteBuf;
import io.netty.buffer.UnpooledHeapByteBuf;
import java.io.FileDescriptor;
import java.io.IOException;
import java.net.ProtocolFamily;
import java.net.StandardProtocolFamily;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.SocketChannel;
import java.nio.channels.WritableByteChannel;
import java.nio.charset.Charset;
import org.apache.tomcat.util.buf.Utf8Encoder;
import org.asynchttpclient.request.body.multipart.ByteArrayPart;
import org.asynchttpclient.request.body.multipart.StringPart;
import org.asynchttpclient.request.body.multipart.part.ByteArrayMultipartPart;
import org.asynchttpclient.request.body.multipart.part.MessageEndMultipartPart;
import org.asynchttpclient.request.body.multipart.part.MultipartState;
import org.asynchttpclient.request.body.multipart.part.PartVisitor;
import org.asynchttpclient.request.body.multipart.part.StringMultipartPart;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultipartPart_ESTest extends MultipartPart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      StringPart stringPart0 = new StringPart("java.specification.version", "", "java.specification.version");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      stringMultipartPart0.visitTransferEncodingHeader(partVisitor_CounterPartVisitor0);
      assertEquals(0, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0, (String) null, charset0, (String) null, (String) null, (String) null);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitStart(partVisitor_CounterPartVisitor0);
      assertEquals(9, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("d eb1Q[bZ:qC", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitPreContent(partVisitor_CounterPartVisitor0);
      assertEquals(106, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("q-4lq3k {I}qqE", byteArray0, "Vp4P");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitPostContent(partVisitor_CounterPartVisitor0);
      assertEquals(2, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart((byte[]) null);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      messageEndMultipartPart0.visitEndOfHeaders(partVisitor_CounterPartVisitor0);
      assertEquals(4, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitDispositionHeader(partVisitor_CounterPartVisitor0);
      assertEquals(41, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringPart stringPart0 = new StringPart("", "", "");
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      stringMultipartPart0.visitCustomHeaders(partVisitor_CounterPartVisitor0);
      assertEquals(MultipartState.PRE_CONTENT, stringMultipartPart0.getState());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("alignment must be a power of 2:", byteArray0, "Unknown state ", charset0, "e");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitContentTypeHeader(partVisitor_CounterPartVisitor0);
      assertEquals(45, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(", max: ", byteArray0, ", max: ", (Charset) null);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor((ByteBuf) null);
      byteArrayMultipartPart0.visitContentIdHeader(partVisitor_ByteBufVisitor0);
      assertFalse(byteArrayMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringPart stringPart0 = new StringPart("", "");
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      stringMultipartPart0.close();
      assertFalse(stringMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("S6|g", byteArray0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      SocketChannel socketChannel0 = SocketChannel.open();
      long long0 = byteArrayMultipartPart0.transferContentTo(socketChannel0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",=#R3Wz7_lfe^`");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      StringPart stringPart0 = new StringPart(",=#R3Wz7_lfe^`", "Q}LE'w1K03");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      long long0 = stringMultipartPart0.transferContentTo(fileChannel0);
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((-1));
      long long0 = byteArrayMultipartPart0.transferContentTo(byteBuf0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("Content-Transfer-Encoding: ", "Content-Transfer-Encoding: ", (String) null, charset0);
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer((int) (byte)58);
      compositeByteBuf0.writeMedium(2);
      long long0 = stringMultipartPart0.transferContentTo(compositeByteBuf0);
      assertEquals(30, compositeByteBuf0.writerIndex());
      assertEquals(27L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes(87);
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      MultipartState multipartState0 = MultipartState.CONTENT;
      long long0 = messageEndMultipartPart0.transfer(byteBuf0, datagramChannel0, multipartState0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      MultipartState multipartState0 = MultipartState.POST_CONTENT;
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, (byte)0, (byte)0);
      StringPart stringPart0 = new StringPart("V-)e~4", "';DU1SC>rsJ%q#!56fr", "';DU1SC>rsJ%q#!56fr", charset0, "m?");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      long long0 = stringMultipartPart0.transfer(unpooledDirectByteBuf0, unpooledDirectByteBuf0, multipartState0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, (String) null, (Charset) null);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, (byte)0, (byte)126);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.writeChar((byte) (-12));
      MultipartState multipartState0 = MultipartState.POST_CONTENT;
      long long0 = byteArrayMultipartPart0.transfer(byteBuf0, byteBuf0, multipartState0);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      StringPart stringPart0 = new StringPart("UNLIMITED", "", "WARNING: ");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      long long0 = stringMultipartPart0.getContentLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-ID: ", byteArray0, "Content-ID: ", charset0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      long long0 = byteArrayMultipartPart0.getContentLength();
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringPart stringPart0 = new StringPart("", "");
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      int int0 = stringMultipartPart0.computePreContentLength();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("(", byteArray0, "", charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      ByteBuf byteBuf0 = byteArrayMultipartPart0.computePreContentBytes((byte)2);
      assertNotNull(byteBuf0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, (String) null, (Charset) null);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      int int0 = byteArrayMultipartPart0.computePostContentLength();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringPart stringPart0 = new StringPart("bX-n%`jLsenz?uL,.K", "p", "W[jb%,");
      byte[] byteArray0 = new byte[8];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      ByteBuf byteBuf0 = stringMultipartPart0.computePostContentBytes((byte)48);
      assertNotNull(byteBuf0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitTransferEncodingHeader(partVisitor_CounterPartVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("';DU1SC>rsJ%q#!56fr", byteArray0, "';DU1SC>rsJ%q#!56fr", charset0, "';DU1SC>rsJ%q#!56fr", "';DU1SC>rsJ%q#!56fr", "HXo*B.k:tGRhO");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, (byte)0, 2);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(unpooledDirectByteBuf0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitTransferEncodingHeader(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(2) + minWritableBytes(27) exceeds maxCapacity(2): UnpooledDirectByteBuf(ridx: 0, widx: 2, cap: 2/2)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("*Ts.$\"}>");
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor(byteBuffer0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitStart(partVisitor_ByteBufferVisitor0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("initialBuffer is a read-only buffer.", byteArray0, "Content-ID: ", charset0, "Content-ID: ", "initialBuffer is a read-only buffer.");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitStart((PartVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("';DU1SC>rsJ%q#!56fr", byteArray0, "';DU1SC>rsJ%q#!56fr", charset0, "';DU1SC>rsJ%q#!56fr", "';DU1SC>rsJ%q#!56fr", "HXo*B.k:tGRhO");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, (byte)0, (byte)0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(unpooledDirectByteBuf0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitStart(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(0) + minWritableBytes(2) exceeds maxCapacity(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("6:fsk", byteArray0, "6:fsk", charset0, "6:fsk");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      ByteBuffer byteBuffer0 = charset0.encode("6:fsk");
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor(byteBuffer0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitPreContent(partVisitor_ByteBufferVisitor0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, ",OCX`q/%\"c", charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitPreContent((PartVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitPreContent(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("ejN-\":P=xJOmvnL}&", byteArray0, "ejN-\":P=xJOmvnL}&", charset0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      ByteBuffer byteBuffer0 = emptyByteBuf0.internalNioBuffer(4, 0);
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor(byteBuffer0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitPostContent(partVisitor_ByteBufferVisitor0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, ",OCX`q/%\"c", charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitPostContent((PartVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((-1));
      byte[] byteArray1 = new byte[2];
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray1);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(byteBuf0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitPostContent(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-ID: ", byteArray0, "", charset0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      ByteBuffer byteBuffer0 = emptyByteBuf0.internalNioBuffer(4, 4);
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor(byteBuffer0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitEndOfHeaders(partVisitor_ByteBufferVisitor0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      StringPart stringPart0 = new StringPart("=@a)8PI\"oXTb 7JL", "=@a)8PI\"oXTb 7JL", "=@a)8PI\"oXTb 7JL");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor((ByteBuf) null);
      // Undeclared exception!
      try { 
        stringMultipartPart0.visitEndOfHeaders(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.PartVisitor$ByteBufVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((-1));
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(byteBuf0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitEndOfHeaders(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringPart stringPart0 = new StringPart((String) null, "+]");
      byte[] byteArray0 = new byte[0];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuffer byteBuffer0 = stringPart0.DEFAULT_CHARSET.encode("bQ0*l#x,o");
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor(byteBuffer0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitDispositionHeader(partVisitor_ByteBufferVisitor0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitDispositionHeader((PartVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      UnpooledHeapByteBuf unpooledHeapByteBuf0 = new UnpooledHeapByteBuf(pooledByteBufAllocator0, (byte)0, 41);
      StringPart stringPart0 = new StringPart("handleWatchEvent {} {} <= {}", "l8Y36D(+sai");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(unpooledHeapByteBuf0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.visitDispositionHeader(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(40) + minWritableBytes(28) exceeds maxCapacity(41): UnpooledHeapByteBuf(ridx: 0, widx: 40, cap: 41/41)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      UnpooledHeapByteBuf unpooledHeapByteBuf0 = new UnpooledHeapByteBuf(pooledByteBufAllocator0, (byte)0, 41);
      ByteBuffer byteBuffer0 = unpooledHeapByteBuf0.internalNioBuffer((byte)0, (byte)0);
      StringPart stringPart0 = new StringPart("handleWatchEvent {} {} <= {}", "l8Y36D(+sai");
      stringPart0.addCustomHeader("Content-Disposition: ", "Content-ID: ");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor(byteBuffer0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.visitCustomHeaders(partVisitor_ByteBufferVisitor0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = charset0.encode("!");
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor(byteBuffer0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitCustomHeaders(partVisitor_ByteBufferVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("w9'#d^x", byteArray0);
      byteArrayPart0.addCustomHeader("", "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes(91);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(byteBuf0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitCustomHeaders(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-ID: ", byteArray0, "Content-ID: ", charset0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      ByteBuffer byteBuffer0 = emptyByteBuf0.nioBuffer();
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor(byteBuffer0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitContentTypeHeader(partVisitor_ByteBufferVisitor0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      StringPart stringPart0 = new StringPart("io.netty.maxThreadLocalCharBufferSize", "", "hl,55fh>pxM#jf", charset0, "");
      byte[] byteArray0 = new byte[6];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor((ByteBuf) null);
      // Undeclared exception!
      try { 
        stringMultipartPart0.visitContentTypeHeader(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.PartVisitor$ByteBufVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("';DU1SC>rsJ%q#!56fr", byteArray0, "';DU1SC>rsJ%q#!56fr", charset0, "';DU1SC>rsJ%q#!56fr", "';DU1SC>rsJ%q#!56fr", "HXo*B.k:tGRhO");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, (byte)0, (byte)0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(unpooledDirectByteBuf0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitContentTypeHeader(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(0) + minWritableBytes(2) exceeds maxCapacity(0): UnpooledDirectByteBuf(ridx: 0, widx: 0, cap: 0/0)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitContentIdHeader(partVisitor_CounterPartVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0, (String) null, charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      SocketChannel socketChannel0 = SocketChannel.open();
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferTo((WritableByteChannel) socketChannel0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0, (String) null, charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("ejN-\":P=xJOmvnL}&", byteArray0, "ejN-\":P=xJOmvnL}&", charset0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",=#R3Wz7_lfe^`");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.close();
      try { 
        byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, "", charset0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",=#R3Wz7_lfe^`");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Disposition: ", byteArray0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      SocketChannel socketChannel0 = SocketChannel.open();
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferContentTo(socketChannel0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(",1L02Zp4\"h}_;", byteArray0, ",1L02Zp4\"h}_;", charset0, ",1L02Zp4\"h}_;", ",1L02Zp4\"h}_;");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferContentTo(fileChannel0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("QU4$Ml^d{%&=4z!U", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferContentTo((WritableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0, (String) null, charset0, "", ",OCX`q/%\"c");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferContentTo((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      UnpooledHeapByteBuf unpooledHeapByteBuf0 = new UnpooledHeapByteBuf(pooledByteBufAllocator0, (byte)0, 41);
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Disposition: ", byteArray0, "Content-ID: ", charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      MultipartState multipartState0 = MultipartState.DONE;
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transfer(unpooledHeapByteBuf0, datagramChannel0, multipartState0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("r`FUZr%YtO:iEh! t", byteArray0, "r`FUZr%YtO:iEh! t", charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      MultipartState multipartState0 = MultipartState.CONTENT;
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transfer((ByteBuf) null, datagramChannel0, multipartState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("S6|g", byteArray0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MultipartState multipartState0 = MultipartState.POST_CONTENT;
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transfer((ByteBuf) null, (ByteBuf) null, multipartState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringPart stringPart0 = new StringPart("bX-n%`jLsenz?uL,.K", "p", "W[jb%,");
      byte[] byteArray0 = new byte[8];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      stringMultipartPart0.close();
      // Undeclared exception!
      try { 
        stringMultipartPart0.length();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refCnt: 0
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart((byte[]) null);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.length();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MessageEndMultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("^(arm|arm32)$", "!oWG", "^(arm|arm32)$", charset0);
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      stringMultipartPart0.close();
      // Undeclared exception!
      try { 
        stringMultipartPart0.getContentLength();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refCnt: 0
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0, (String) null, charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      byteArrayPart0.addCustomHeader((String) null, (String) null);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.computePreContentLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0, (String) null, charset0, (String) null, (String) null, "oD61x.ZH{lp&wy");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      byteArrayPart0.addCustomHeader((String) null, "\r\n");
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.computePreContentBytes(189);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringPart stringPart0 = new StringPart((String) null, "+]");
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.computePreContentBytes((-26));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity: -26 (expected: 0+)
         //
         verifyException("io.netty.buffer.AbstractByteBufAllocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("readerIndex: %d, writerIndex: %d (expected: 0 <= readerIndex <= writerIndex <= capacity(%d))", byteArray0, "PathSpec ", charset0, (String) null, (String) null, "z");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.computePostContentBytes((byte) (-73));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity: -73 (expected: 0+)
         //
         verifyException("io.netty.buffer.AbstractByteBufAllocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("E+[-*=y", "*FqZRWF|y(", "E+[-*=y", charset0, "");
      byte[] byteArray0 = new byte[4];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      stringMultipartPart0.close();
      // Undeclared exception!
      try { 
        stringMultipartPart0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refCnt: 0, decrement: 1
         //
         verifyException("io.netty.buffer.AbstractReferenceCountedByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringPart stringPart0 = new StringPart("", "", "");
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("PathWatcher@", byteArray0, "", stringPart0.DEFAULT_CHARSET, "H^ao:=Li@zc3p<66%", "TD", "PathWatcher@");
      byteArrayPart0.addCustomHeader("H^ao:=Li@zc3p<66%", "TD");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      assertFalse(byteArrayMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringPart stringPart0 = new StringPart("", "");
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, "", stringPart0.DEFAULT_CHARSET, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      byteArrayPart0.addCustomHeader("Content-Disposition: ", "Content-Disposition: ");
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferTo((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Type: ", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      ByteBuf byteBuf0 = byteArrayMultipartPart0.computePostContentBytes(55296);
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("?^_}In_hAWy_YI*yf6g", "", "Content-Type: ", charset0, "Content-ID: ", "?^_}In_hAWy_YI*yf6g");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      long long0 = stringMultipartPart0.transferTo(byteBuf0);
      assertEquals(189L, long0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringPart stringPart0 = new StringPart("", "");
      byte[] byteArray0 = new byte[1];
      stringPart0.setDispositionType("");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      assertFalse(stringMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, "", charset0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",=#R3Wz7_lfe^`");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byteArrayMultipartPart0.transferContentTo(fileChannel0);
      byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
      assertEquals(11L, fileChannel0.position());
      
      byteArrayMultipartPart0.close();
      assertFalse(byteArrayMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, "", charset0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",=#R3Wz7_lfe^`");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
      assertEquals(100L, fileChannel0.position());
      
      byteArrayMultipartPart0.close();
      assertFalse(byteArrayMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, "", charset0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",=#R3Wz7_lfe^`");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byteArrayMultipartPart0.transferContentTo(fileChannel0);
      byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      byteArrayMultipartPart0.transferContentTo(emptyByteBuf0);
      long long0 = byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
      assertEquals(11L, fileChannel0.position());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, "", charset0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",=#R3Wz7_lfe^`");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
      long long0 = byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
      assertEquals(109L, fileChannel0.position());
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0, "(h|xBaE2y#4#", charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferTo((WritableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, "", charset0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",=#R3Wz7_lfe^`");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byteArrayMultipartPart0.transferContentTo(fileChannel0);
      byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
      long long0 = byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
      assertEquals(11L, fileChannel0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((-1));
      StringPart stringPart0 = new StringPart("java.specification.version", "", "java.specification.version");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      long long0 = stringMultipartPart0.transferContentTo(byteBuf0);
      long long1 = stringMultipartPart0.transferTo(byteBuf0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, ",OCX`q/%\"c", charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MultipartState multipartState0 = MultipartState.CONTENT;
      byteArrayMultipartPart0.state = multipartState0;
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferTo((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("';DU1SC>rsJ%q#!56fr", byteArray0, "';DU1SC>rsJ%q#!56fr", charset0, "';DU1SC>rsJ%q#!56fr", "';DU1SC>rsJ%q#!56fr", "HXo*B.k:tGRhO");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      boolean boolean0 = byteArrayMultipartPart0.isTargetSlow();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      long long0 = messageEndMultipartPart0.length();
      assertEquals(15L, long0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, "", charset0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",=#R3Wz7_lfe^`");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byteArrayMultipartPart0.transferContentTo(fileChannel0);
      byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
      assertEquals(11L, fileChannel0.size());
      
      long long0 = byteArrayMultipartPart0.transferTo((ByteBuf) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-ID: ", byteArray0, "Content-ID: ", charset0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MultipartState multipartState0 = byteArrayMultipartPart0.getState();
      assertEquals(MultipartState.PRE_CONTENT, multipartState0);
  }
}
