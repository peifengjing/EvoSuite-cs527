/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 07:37:04 GMT 2017
 */

package org.asynchttpclient.oauth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.asynchttpclient.oauth.RequestToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RequestToken_ESTest extends RequestToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("", "g");
      requestToken0.hashCode();
      assertEquals("", requestToken0.getKey());
      assertEquals("g", requestToken0.getSecret());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, (String) null);
      String string0 = requestToken0.getSecret();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("", "");
      String string0 = requestToken0.getSecret();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("V", "V");
      String string0 = requestToken0.getPercentEncodedKey();
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("", "g");
      String string0 = requestToken0.getPercentEncodedKey();
      assertEquals("", requestToken0.getKey());
      assertEquals("g", requestToken0.getSecret());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("(", "(");
      String string0 = requestToken0.getKey();
      assertEquals("(", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("", "");
      String string0 = requestToken0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, "-An&");
      RequestToken requestToken1 = new RequestToken("{ key=null, secret=\"-An&\"}", "-An&");
      // Undeclared exception!
      try { 
        requestToken0.equals(requestToken1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("", "g");
      RequestToken requestToken1 = new RequestToken("", "f");
      boolean boolean0 = requestToken0.equals(requestToken1);
      assertEquals("", requestToken1.getKey());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("(", "(");
      RequestToken requestToken1 = new RequestToken(")", "(");
      boolean boolean0 = requestToken0.equals(requestToken1);
      assertEquals("(", requestToken1.getSecret());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("`%Yj,`Ypu0yqE", "`%Yj,`Ypu0yqE");
      RequestToken requestToken1 = new RequestToken("`%Yj,`Ypu0yqE", "`%Yj,`Ypu0yqE");
      boolean boolean0 = requestToken0.equals(requestToken1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, "-An&");
      boolean boolean0 = requestToken0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, "-An&");
      Object object0 = new Object();
      boolean boolean0 = requestToken0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, (String) null);
      // Undeclared exception!
      try { 
        requestToken0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.oauth.RequestToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, "-An&");
      String string0 = requestToken0.toString();
      assertEquals("{ key=null, secret=\"-An&\"}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, "-An&");
      String string0 = requestToken0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, "-An&");
      String string0 = requestToken0.getSecret();
      assertEquals("-An&", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, "-An&");
      String string0 = requestToken0.getPercentEncodedKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("a`:GH<.", "a`:GH<.");
      boolean boolean0 = requestToken0.equals(requestToken0);
      assertTrue(boolean0);
  }
}
