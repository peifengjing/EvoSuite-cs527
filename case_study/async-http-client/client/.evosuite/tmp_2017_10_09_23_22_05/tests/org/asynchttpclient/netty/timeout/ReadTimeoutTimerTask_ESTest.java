/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 07:48:40 GMT 2017
 */

package org.asynchttpclient.netty.timeout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.util.Timeout;
import io.netty.util.Timer;
import org.asynchttpclient.AsyncHttpClientConfig;
import org.asynchttpclient.AsyncHttpClientState;
import org.asynchttpclient.netty.NettyResponseFuture;
import org.asynchttpclient.netty.channel.ChannelManager;
import org.asynchttpclient.netty.channel.ConnectionSemaphore;
import org.asynchttpclient.netty.request.NettyRequestSender;
import org.asynchttpclient.netty.timeout.ReadTimeoutTimerTask;
import org.asynchttpclient.netty.timeout.TimeoutsHolder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReadTimeoutTimerTask_ESTest extends ReadTimeoutTimerTask_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(asyncHttpClientConfig0).isUseLaxCookieEncoder();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientState asyncHttpClientState0 = mock(AsyncHttpClientState.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(asyncHttpClientState0).isClosed();
      NettyRequestSender nettyRequestSender0 = new NettyRequestSender(asyncHttpClientConfig0, (ChannelManager) null, (ConnectionSemaphore) null, timer0, asyncHttpClientState0);
      ReadTimeoutTimerTask readTimeoutTimerTask0 = new ReadTimeoutTimerTask((NettyResponseFuture<?>) null, nettyRequestSender0, (TimeoutsHolder) null, 1);
      try { 
        readTimeoutTimerTask0.run((Timeout) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.timeout.ReadTimeoutTimerTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(asyncHttpClientConfig0).isUseLaxCookieEncoder();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientState asyncHttpClientState0 = mock(AsyncHttpClientState.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(asyncHttpClientState0).isClosed();
      NettyRequestSender nettyRequestSender0 = new NettyRequestSender(asyncHttpClientConfig0, (ChannelManager) null, (ConnectionSemaphore) null, timer0, asyncHttpClientState0);
      ReadTimeoutTimerTask readTimeoutTimerTask0 = new ReadTimeoutTimerTask((NettyResponseFuture<?>) null, nettyRequestSender0, (TimeoutsHolder) null, (-138));
      readTimeoutTimerTask0.run((Timeout) null);
      readTimeoutTimerTask0.run((Timeout) null);
  }
}
