/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 07:42:46 GMT 2017
 */

package org.asynchttpclient.netty.ssl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.handler.ssl.SslContext;
import io.netty.handler.ssl.SslContextBuilder;
import javax.net.ssl.SSLEngine;
import org.asynchttpclient.AsyncHttpClientConfig;
import org.asynchttpclient.netty.ssl.DefaultSslEngineFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultSslEngineFactory_ESTest extends DefaultSslEngineFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      SslContextBuilder sslContextBuilder0 = defaultSslEngineFactory0.configureSslContextBuilder((SslContextBuilder) null);
      assertNull(sslContextBuilder0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      // Undeclared exception!
      try { 
        defaultSslEngineFactory0.newSslEngine((AsyncHttpClientConfig) null, "", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.ssl.DefaultSslEngineFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseOpenSsl();
      defaultSslEngineFactory0.init(asyncHttpClientConfig0);
      AsyncHttpClientConfig asyncHttpClientConfig1 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(asyncHttpClientConfig1).isDisableHttpsEndpointIdentificationAlgorithm();
      SSLEngine sSLEngine0 = defaultSslEngineFactory0.newSslEngine(asyncHttpClientConfig1, "", (-2580));
      assertNotNull(sSLEngine0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      String[] stringArray0 = new String[2];
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseOpenSsl();
      defaultSslEngineFactory0.init(asyncHttpClientConfig0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      String[] stringArray0 = new String[8];
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Object) stringArray0, (Object) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((Object) stringArray0, (Object) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn(false).when(asyncHttpClientConfig0).isUseOpenSsl();
      // Undeclared exception!
      try { 
        defaultSslEngineFactory0.init(asyncHttpClientConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      SslContextBuilder sslContextBuilder0 = mock(SslContextBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(sslContextBuilder0).toString();
      SslContextBuilder sslContextBuilder1 = defaultSslEngineFactory0.configureSslContextBuilder(sslContextBuilder0);
      assertSame(sslContextBuilder1, sslContextBuilder0);
  }
}
