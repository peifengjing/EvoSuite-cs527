/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Oct 10 07:46:21 GMT 2017
 */

package org.asynchttpclient.netty.request.body;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class NettyFileBody_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.asynchttpclient.netty.request.body.NettyFileBody"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.timezone", "America/Los_Angeles"); 
    java.lang.System.setProperty("sun.jnu.encoding", "UTF-8"); 
    java.lang.System.setProperty("sun.arch.data.model", "64"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NettyFileBody_ESTest_scaffolding.class.getClassLoader() ,
      "org.asynchttpclient.AsyncHttpClientConfig$ResponseBodyPartFactory",
      "org.asynchttpclient.channel.KeepAliveStrategy",
      "io.netty.util.AttributeMap",
      "org.asynchttpclient.proxy.ProxyServerSelector",
      "org.asynchttpclient.Realm",
      "io.netty.buffer.ByteBufAllocator",
      "io.netty.channel.ChannelInboundHandlerAdapter",
      "io.netty.channel.ChannelInboundHandler",
      "io.netty.channel.ChannelPromise",
      "org.asynchttpclient.AsyncHttpClientConfig",
      "org.asynchttpclient.ListenableFuture",
      "org.asynchttpclient.SslEngineFactory",
      "org.asynchttpclient.netty.request.body.NettyFileBody",
      "io.netty.channel.ChannelDuplexHandler",
      "io.netty.channel.ChannelOutboundHandlerAdapter",
      "io.netty.channel.EventLoopGroup",
      "io.netty.util.concurrent.Promise",
      "org.asynchttpclient.netty.NettyResponseFuture",
      "io.netty.channel.ChannelHandlerAdapter",
      "io.netty.handler.ssl.SslContext",
      "io.netty.channel.ChannelOutboundHandler",
      "io.netty.util.concurrent.GenericFutureListener",
      "io.netty.util.concurrent.EventExecutorGroup",
      "org.asynchttpclient.netty.request.body.NettyBody",
      "io.netty.channel.ChannelFuture",
      "org.asynchttpclient.channel.ChannelPool",
      "io.netty.channel.Channel",
      "io.netty.channel.ChannelOutboundInvoker",
      "io.netty.util.Timer",
      "io.netty.channel.ChannelHandler",
      "io.netty.util.concurrent.Future",
      "org.asynchttpclient.AsyncHttpClientConfig$AdditionalChannelInitializer"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.asynchttpclient.AsyncHttpClientConfig", false, NettyFileBody_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NettyFileBody_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "io.netty.handler.codec.http.LastHttpContent",
      "io.netty.util.internal.logging.InternalLoggerFactory",
      "io.netty.util.internal.logging.Slf4JLoggerFactory",
      "io.netty.util.internal.logging.AbstractInternalLogger",
      "io.netty.util.internal.logging.Slf4JLogger",
      "io.netty.channel.CombinedChannelDuplexHandler",
      "io.netty.util.internal.UnpaddedInternalThreadLocalMap",
      "io.netty.util.internal.SystemPropertyUtil",
      "io.netty.util.internal.InternalThreadLocalMap",
      "io.netty.util.DefaultAttributeMap",
      "io.netty.channel.AbstractChannel",
      "io.netty.channel.local.LocalChannel",
      "io.netty.util.internal.PlatformDependent0",
      "io.netty.util.internal.CleanerJava6",
      "io.netty.util.internal.PlatformDependent",
      "io.netty.util.Signal",
      "io.netty.util.concurrent.DefaultPromise",
      "io.netty.channel.epoll.AbstractEpollChannel",
      "io.netty.util.internal.StringUtil",
      "io.netty.channel.epoll.EpollDatagramChannel",
      "io.netty.channel.unix.Errors",
      "io.netty.channel.unix.FileDescriptor",
      "io.netty.channel.epoll.AbstractEpollServerChannel",
      "io.netty.channel.epoll.EpollServerDomainSocketChannel",
      "io.netty.channel.AbstractServerChannel",
      "io.netty.channel.embedded.EmbeddedSocketAddress",
      "io.netty.channel.embedded.EmbeddedChannel",
      "io.netty.channel.embedded.EmbeddedChannelId",
      "io.netty.util.internal.EmptyArrays",
      "io.netty.util.internal.MacAddressUtil",
      "io.netty.util.NetUtil",
      "io.netty.channel.DefaultChannelId",
      "io.netty.channel.epoll.AbstractEpollStreamChannel"
    );
  }
}
