/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 07:57:40 GMT 2017
 */

package org.asynchttpclient.channel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.HttpRequest;
import io.netty.handler.codec.http.HttpResponse;
import io.netty.handler.codec.http.HttpVersion;
import org.asynchttpclient.Request;
import org.asynchttpclient.channel.DefaultKeepAliveStrategy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultKeepAliveStrategy_ESTest extends DefaultKeepAliveStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultKeepAliveStrategy defaultKeepAliveStrategy0 = new DefaultKeepAliveStrategy();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      HttpRequest httpRequest0 = mock(HttpRequest.class, new ViolatedAssumptionAnswer());
      Request request1 = mock(Request.class, new ViolatedAssumptionAnswer());
      HttpRequest httpRequest1 = mock(HttpRequest.class, new ViolatedAssumptionAnswer());
      Request request2 = mock(Request.class, new ViolatedAssumptionAnswer());
      HttpRequest httpRequest2 = mock(HttpRequest.class, new ViolatedAssumptionAnswer());
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn((HttpHeaders) null).when(httpResponse0).headers();
      // Undeclared exception!
      try { 
        defaultKeepAliveStrategy0.keepAlive(request2, httpRequest2, httpResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.handler.codec.http.HttpUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultKeepAliveStrategy defaultKeepAliveStrategy0 = new DefaultKeepAliveStrategy();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      HttpRequest httpRequest0 = mock(HttpRequest.class, new ViolatedAssumptionAnswer());
      Request request1 = mock(Request.class, new ViolatedAssumptionAnswer());
      HttpRequest httpRequest1 = null;
      HttpResponse httpResponse0 = null;
      // Undeclared exception!
      try { 
        defaultKeepAliveStrategy0.keepAlive(request1, (HttpRequest) null, (HttpResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.handler.codec.http.HttpUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultKeepAliveStrategy defaultKeepAliveStrategy0 = new DefaultKeepAliveStrategy();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      HttpRequest httpRequest0 = mock(HttpRequest.class, new ViolatedAssumptionAnswer());
      Request request1 = mock(Request.class, new ViolatedAssumptionAnswer());
      HttpRequest httpRequest1 = mock(HttpRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpHeaders) null).when(httpRequest1).headers();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpHeaders0).get(any(java.lang.CharSequence.class));
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn(httpHeaders0).when(httpResponse0).headers();
      doReturn(httpVersion0).when(httpResponse0).protocolVersion();
      // Undeclared exception!
      try { 
        defaultKeepAliveStrategy0.keepAlive(request1, httpRequest1, httpResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.handler.codec.http.HttpUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultKeepAliveStrategy defaultKeepAliveStrategy0 = new DefaultKeepAliveStrategy();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      HttpRequest httpRequest0 = mock(HttpRequest.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpHeaders0).get(any(java.lang.CharSequence.class));
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn(httpHeaders0).when(httpResponse0).headers();
      doReturn((HttpVersion) null).when(httpResponse0).protocolVersion();
      // Undeclared exception!
      try { 
        defaultKeepAliveStrategy0.keepAlive(request0, httpRequest0, httpResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.handler.codec.http.HttpUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultKeepAliveStrategy defaultKeepAliveStrategy0 = new DefaultKeepAliveStrategy();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      HttpRequest httpRequest0 = mock(HttpRequest.class, new ViolatedAssumptionAnswer());
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn((HttpHeaders) null).when(httpResponse0).headers();
      Request request1 = mock(Request.class, new ViolatedAssumptionAnswer());
      HttpRequest httpRequest1 = mock(HttpRequest.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      doReturn("C[fxR> }~7SI").when(httpHeaders0).get(any(java.lang.CharSequence.class));
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      HttpResponse httpResponse1 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn(httpHeaders0).when(httpResponse1).headers();
      doReturn(httpVersion0).when(httpResponse1).protocolVersion();
      defaultKeepAliveStrategy0.keepAlive(request1, httpRequest1, httpResponse1);
      // Undeclared exception!
      try { 
        defaultKeepAliveStrategy0.keepAlive(request0, httpRequest0, httpResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.handler.codec.http.HttpUtil", e);
      }
  }
}
