/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 07:43:57 GMT 2017
 */

package org.asynchttpclient;

import org.junit.Test;
import static org.junit.Assert.*;
import org.asynchttpclient.HostStats;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HostStats_ESTest extends HostStats_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-20L), 1456L);
      HostStats hostStats1 = new HostStats((-20L), (-20L));
      boolean boolean0 = hostStats0.equals(hostStats1);
      assertFalse(hostStats1.equals((Object)hostStats0));
      assertEquals(1436L, hostStats0.getHostConnectionCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-2745L), (-278L));
      HostStats hostStats1 = new HostStats((-278L), (-2745L));
      boolean boolean0 = hostStats0.equals(hostStats1);
      assertFalse(boolean0);
      assertEquals((-3023L), hostStats1.getHostConnectionCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HostStats hostStats0 = new HostStats(1L, 1L);
      long long0 = hostStats0.getHostIdleConnectionCount();
      assertEquals(1L, long0);
      assertEquals(1L, hostStats0.getHostActiveConnectionCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-2745L), (-278L));
      long long0 = hostStats0.getHostIdleConnectionCount();
      assertEquals((-3023L), hostStats0.getHostConnectionCount());
      assertEquals((-278L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HostStats hostStats0 = new HostStats(1966L, (-1432L));
      long long0 = hostStats0.getHostConnectionCount();
      assertEquals(534L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-2502L), (-2502L));
      long long0 = hostStats0.getHostConnectionCount();
      assertEquals((-5004L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HostStats hostStats0 = new HostStats(0L, 0L);
      long long0 = hostStats0.getHostActiveConnectionCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HostStats hostStats0 = new HostStats(764L, 764L);
      long long0 = hostStats0.getHostActiveConnectionCount();
      assertEquals(764L, hostStats0.getHostIdleConnectionCount());
      assertEquals(764L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HostStats hostStats0 = new HostStats(0L, 0L);
      long long0 = hostStats0.getHostIdleConnectionCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-2502L), (-2502L));
      long long0 = hostStats0.getHostActiveConnectionCount();
      assertEquals((-2502L), hostStats0.getHostIdleConnectionCount());
      assertEquals((-2502L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HostStats hostStats0 = new HostStats(0L, 0L);
      long long0 = hostStats0.getHostConnectionCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HostStats hostStats0 = new HostStats(0L, 0L);
      HostStats hostStats1 = new HostStats(0L, 0L);
      boolean boolean0 = hostStats0.equals(hostStats1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HostStats hostStats0 = new HostStats(0L, 0L);
      HostStats hostStats1 = new HostStats((-1L), (-1L));
      boolean boolean0 = hostStats0.equals(hostStats1);
      assertEquals((-2L), hostStats1.getHostConnectionCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-1870L), (-1870L));
      boolean boolean0 = hostStats0.equals("F>r1@1fq.k]|:!Zf");
      assertEquals((-3740L), hostStats0.getHostConnectionCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-22L), (-22L));
      boolean boolean0 = hostStats0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((-44L), hostStats0.getHostConnectionCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HostStats hostStats0 = new HostStats(0L, 0L);
      boolean boolean0 = hostStats0.equals(hostStats0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-1870L), (-1870L));
      HostStats hostStats1 = new HostStats((-1870L), 1L);
      boolean boolean0 = hostStats0.equals(hostStats1);
      assertEquals((-1869L), hostStats1.getHostConnectionCount());
      assertFalse(boolean0);
      assertFalse(hostStats1.equals((Object)hostStats0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-1870L), (-1870L));
      hostStats0.hashCode();
      assertEquals((-3740L), hostStats0.getHostConnectionCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-1870L), (-1870L));
      String string0 = hostStats0.toString();
      assertEquals("There are -3740 total connections, -1870 are active and -1870 are idle.", string0);
  }
}
