/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 06:56:47 GMT 2017
 */

package org.asynchttpclient.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Vector;
import org.asynchttpclient.AsyncHttpClientConfig;
import org.asynchttpclient.Param;
import org.asynchttpclient.Request;
import org.asynchttpclient.uri.Uri;
import org.asynchttpclient.util.HttpUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUtils_ESTest extends HttpUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset charset0 = HttpUtils.parseCharset(";T7GL@l=jai");
      assertNull(charset0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Uri uri0 = new Uri("k]5|Fn>$&/W_~b;", "ys<QJ#t~ca4Tb", "ys<QJ#t~ca4Tb", 65535, "ys<QJ#t~ca4Tb", "k]5|Fn>$&/W_~b;");
      Uri uri1 = uri0.withNewScheme("k]5|Fn>$&/W_~b;");
      boolean boolean0 = HttpUtils.isSameBase(uri1, uri0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Uri uri0 = new Uri("The URI scheme, of the URI ", "The URI scheme, of the URI ", "The URI scheme, of the URI ", (-1969923912), "KOvqH.", "KOvqH.");
      String string0 = HttpUtils.getAuthority(uri0);
      assertEquals("The URI scheme, of the URI :-1969923912", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.validateSupportedScheme((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.parseCharset("charset=^Kto'+P_fO|`lRC?");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ^Kto+P_fO|`lRC?
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.parseCharset((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.isSameBase((Uri) null, (Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Uri uri0 = new Uri("&Uz^IIh].M=0m*G", "&Uz^IIh].M=0m*G", "1ej1G", 197, "1ej1G", "7imM16vyT");
      // Undeclared exception!
      try { 
        HttpUtils.hostHeader((Request) null, uri0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.getNonEmptyPath((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.getBaseUrl((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        HttpUtils.followRedirect(asyncHttpClientConfig0, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.computeOriginHeader((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Uri uri0 = new Uri("https", "rNwIk%5@,;amWe6Z4", "=", 13, "ws", "/5)JCyWH");
      String string0 = HttpUtils.computeOriginHeader(uri0);
      assertEquals("https://=:13", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Uri uri0 = new Uri("^Kto'+P_fO|`lRC?", "^Kto'+P_fO|`lRC?", "^Kto'+P_fO|`lRC?", 1556, "2$8DBWnl^ Z", "2$8DBWnl^ Z");
      String string0 = HttpUtils.computeOriginHeader(uri0);
      assertEquals("http://^Kto'+P_fO|`lRC?:1556", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector<Param> vector0 = new Vector<Param>();
      Charset charset0 = Charset.defaultCharset();
      Param param0 = new Param("^Kto'+P_fO|`lRC?", "onComplete is null");
      vector0.add(param0);
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(vector0, charset0);
      assertEquals(47, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Charset charset0 = HttpUtils.DEFAULT_CHARSET;
      Vector<Param> vector0 = new Vector<Param>();
      Param param0 = new Param("ws", "2$8DBWnl^ Z");
      vector0.add(param0);
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(vector0, charset0);
      assertEquals(18, byteBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Charset charset0 = HttpUtils.DEFAULT_CHARSET;
      Vector<Param> vector0 = new Vector<Param>();
      Param param0 = new Param("$IYBMQfE", (String) null);
      vector0.add(param0);
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(vector0, charset0);
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=10 cap=10]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Charset charset0 = HttpUtils.parseCharset("^Kto'+P_fO|`lRC?");
      Vector<Param> vector0 = new Vector<Param>();
      Param param0 = new Param("ws", "2$8DBWnl^ Z");
      vector0.add(param0);
      // Undeclared exception!
      try { 
        HttpUtils.urlEncodeFormParams(vector0, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset charset0 = HttpUtils.parseCharset("charset=");
      assertNull(charset0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.parseCharset("charset=wss");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // wss
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Uri uri0 = new Uri("^Kto'+P_fO|`lRC?", "^Kto'+P_fO|`lRC?", "^Kto'+P_fO|`lRC?", 1556, "2$8DBWnl^ Z", "2$8DBWnl^ Z");
      String string0 = HttpUtils.getNonEmptyPath(uri0);
      assertEquals("2$8DBWnl^ Z", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Uri uri0 = new Uri(":", ":", "ES", 226, "", "");
      String string0 = HttpUtils.getNonEmptyPath(uri0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Uri uri0 = new Uri("^Kto'+P_fO|`lRC?", "^Kto'+P_fO|`lRC?", "^Kto'+P_fO|`lRC?", 1556, "2$8DBWnl^ Z", "2$8DBWnl^ Z");
      Uri uri1 = uri0.withNewScheme("l1<2g,#");
      boolean boolean0 = HttpUtils.isSameBase(uri0, uri1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Uri uri0 = new Uri("https", "rNwIk%5@,;amWe6Z4", "=", 13, "ws", "/5)JCyWH");
      HttpUtils.validateSupportedScheme(uri0);
      assertEquals(443, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Uri uri0 = new Uri(":", ":", "ES", 226, "", "");
      // Undeclared exception!
      try { 
        HttpUtils.validateSupportedScheme(uri0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The URI scheme, of the URI :://:@ES:226?, must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.getAuthority((Uri) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.HttpUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Charset charset0 = HttpUtils.parseCharset("^Kto'+P_fO|`lRC?");
      Vector<Param> vector0 = new Vector<Param>();
      // Undeclared exception!
      try { 
        HttpUtils.urlEncodeFormParams(vector0, charset0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Uri uri0 = new Uri("^Kto'+P_fO|`lRC?", "^Kto'+P_fO|`lRC?", "^Kto'+P_fO|`lRC?", 1556, "2$8DBWnl^ Z", "2$8DBWnl^ Z");
      String string0 = HttpUtils.getBaseUrl(uri0);
      assertEquals("^Kto'+P_fO|`lRC?://^Kto'+P_fO|`lRC?:1556", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HttpUtils httpUtils0 = new HttpUtils();
  }
}
