/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 07:51:23 GMT 2017
 */

package org.asynchttpclient.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.asynchttpclient.Param;
import org.asynchttpclient.uri.Uri;
import org.asynchttpclient.util.UriEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UriEncoder_ESTest extends UriEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.RAW;
      String string0 = uriEncoder0.withQueryWithoutParams((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.FIXING;
      String string0 = uriEncoder0.withQueryWithoutParams("5j1K`/:N(Po;vjY ` ");
      assertEquals("5j1K%60/:N(Po;vjY%20%60%20", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.FIXING;
      String string0 = uriEncoder0.withQueryWithoutParams("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UriEncoder[] uriEncoderArray0 = UriEncoder.values();
      assertNotNull(uriEncoderArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UriEncoder.valueOf("RAW");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.uriEncoder(true);
      String string0 = uriEncoder0.encodePath((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.RAW;
      String string0 = uriEncoder0.encodePath("wss");
      assertEquals("wss", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.FIXING;
      String string0 = uriEncoder0.encodePath("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.uriEncoder(true);
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("i,h'mnW n6").when(uri0).getHost();
      doReturn("i,h'mnW n6").when(uri0).getPath();
      doReturn(0).when(uri0).getPort();
      doReturn("i,h'mnW n6").when(uri0).getQuery();
      doReturn("QaVF").when(uri0).getScheme();
      doReturn("QaVF").when(uri0).getUserInfo();
      Uri uri1 = uriEncoder0.encode(uri0, (List<Param>) null);
      assertEquals(80, uri1.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.RAW;
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("https").when(uri0).getHost();
      doReturn("https").when(uri0).getPath();
      doReturn((-1559)).when(uri0).getPort();
      doReturn("https").when(uri0).getQuery();
      doReturn("https").when(uri0).getScheme();
      doReturn("https").when(uri0).getUserInfo();
      Uri uri1 = uriEncoder0.encode(uri0, (List<Param>) null);
      assertFalse(uri1.isWebSocket());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.uriEncoder(false);
      // Undeclared exception!
      try { 
        uriEncoder0.withQueryWithoutParams((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.Utf8UrlEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.FIXING;
      // Undeclared exception!
      try { 
        uriEncoder0.encodePath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.Utf8UrlEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.uriEncoder(true);
      // Undeclared exception!
      try { 
        uriEncoder0.encode((Uri) null, (List<Param>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.UriEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.FIXING;
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uri0).getHost();
      doReturn("ws").when(uri0).getPath();
      doReturn(0).when(uri0).getPort();
      doReturn((String) null).when(uri0).getQuery();
      doReturn((String) null).when(uri0).getScheme();
      doReturn((String) null).when(uri0).getUserInfo();
      // Undeclared exception!
      try { 
        uriEncoder0.encode(uri0, (List<Param>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.RAW;
      // Undeclared exception!
      try { 
        uriEncoder0.withQueryWithParams("ws", (List<Param>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.UriEncoder$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.uriEncoder(true);
      // Undeclared exception!
      try { 
        uriEncoder0.withoutQueryWithParams((List<Param>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.UriEncoder$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.FIXING;
      // Undeclared exception!
      try { 
        uriEncoder0.withQueryWithParams("XJ", (List<Param>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.UriEncoder$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.uriEncoder(false);
      // Undeclared exception!
      try { 
        uriEncoder0.withoutQueryWithParams((List<Param>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.UriEncoder$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.FIXING;
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("").when(uri0).getHost();
      doReturn("").when(uri0).getPath();
      doReturn(36).when(uri0).getPort();
      doReturn("]Rv+/8mDj!*p").when(uri0).getQuery();
      doReturn("]Rv+/8mDj!*p").when(uri0).getScheme();
      doReturn("org.asynchttpclient.util.UriEncoder").when(uri0).getUserInfo();
      // Undeclared exception!
      try { 
        uriEncoder0.encode(uri0, (List<Param>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // empty host
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.uriEncoder(true);
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("bV").when(uri0).getHost();
      doReturn((String) null).when(uri0).getPath();
      doReturn(43).when(uri0).getPort();
      doReturn("N%fq4(Nke8Yq7,mDVN*").when(uri0).getQuery();
      doReturn("wss").when(uri0).getScheme();
      doReturn("wss").when(uri0).getUserInfo();
      Uri uri1 = uriEncoder0.encode(uri0, (List<Param>) null);
      assertEquals("N%fq4(Nke8Yq7,mDVN*", uri1.getQuery());
  }
}
