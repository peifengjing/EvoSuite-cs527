/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 07:22:09 GMT 2017
 */

package org.asynchttpclient.request.body.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.buffer.UnpooledDirectByteBuf;
import io.netty.buffer.UnpooledUnsafeDirectByteBuf;
import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.Queue;
import org.asynchttpclient.request.body.Body;
import org.asynchttpclient.request.body.generator.BodyChunk;
import org.asynchttpclient.request.body.generator.PushBody;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PushBody_ESTest extends PushBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PushBody pushBody0 = new PushBody((Queue<BodyChunk>) null);
      // Undeclared exception!
      try { 
        pushBody0.transferTo((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.generator.PushBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<BodyChunk> linkedList0 = new LinkedList<BodyChunk>();
      PushBody pushBody0 = new PushBody(linkedList0);
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 3008, 3008);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.writeZero(207);
      BodyChunk bodyChunk0 = new BodyChunk(byteBuf0, false);
      linkedList0.addFirst(bodyChunk0);
      // Undeclared exception!
      try { 
        pushBody0.transferTo(byteBuf0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(2898) + minWritableBytes(207) exceeds maxCapacity(3008): UnpooledDirectByteBuf(ridx: 2691, widx: 2898, cap: 3008/3008)
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ArrayDeque<BodyChunk> arrayDeque0 = new ArrayDeque<BodyChunk>();
      PushBody pushBody0 = new PushBody(arrayDeque0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 1483, 1483);
      BodyChunk bodyChunk0 = new BodyChunk(unpooledUnsafeDirectByteBuf0, false);
      arrayDeque0.add(bodyChunk0);
      pushBody0.transferTo(unpooledUnsafeDirectByteBuf0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ArrayDeque<BodyChunk> arrayDeque0 = new ArrayDeque<BodyChunk>();
      PushBody pushBody0 = new PushBody(arrayDeque0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 1468, 1468);
      BodyChunk bodyChunk0 = new BodyChunk(unpooledUnsafeDirectByteBuf0, true);
      unpooledUnsafeDirectByteBuf0.writeByte(1);
      arrayDeque0.add(bodyChunk0);
      pushBody0.transferTo(unpooledUnsafeDirectByteBuf0);
      assertEquals(1468, unpooledUnsafeDirectByteBuf0.writerIndex());
      assertEquals(1467, unpooledUnsafeDirectByteBuf0.readerIndex());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ArrayDeque<BodyChunk> arrayDeque0 = new ArrayDeque<BodyChunk>();
      PushBody pushBody0 = new PushBody(arrayDeque0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 1483, 1483);
      BodyChunk bodyChunk0 = new BodyChunk(unpooledUnsafeDirectByteBuf0, true);
      arrayDeque0.add(bodyChunk0);
      Body.BodyState body_BodyState0 = pushBody0.transferTo(unpooledUnsafeDirectByteBuf0);
      Body.BodyState body_BodyState1 = pushBody0.transferTo(unpooledUnsafeDirectByteBuf0);
      assertTrue(arrayDeque0.isEmpty());
      assertNotSame(body_BodyState1, body_BodyState0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ArrayDeque<BodyChunk> arrayDeque0 = new ArrayDeque<BodyChunk>();
      PushBody pushBody0 = new PushBody(arrayDeque0);
      pushBody0.close();
      assertEquals((-1L), pushBody0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ArrayDeque<BodyChunk> arrayDeque0 = new ArrayDeque<BodyChunk>();
      PushBody pushBody0 = new PushBody(arrayDeque0);
      long long0 = pushBody0.getContentLength();
      assertEquals((-1L), long0);
  }
}
