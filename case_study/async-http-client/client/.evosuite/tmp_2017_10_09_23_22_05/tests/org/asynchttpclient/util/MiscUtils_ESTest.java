/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 07:04:57 GMT 2017
 */

package org.asynchttpclient.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Closeable;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import org.asynchttpclient.util.MiscUtils;
import org.eclipse.jetty.util.RegexSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MiscUtils_ESTest extends MiscUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = MiscUtils.withDefault((Object) "X%l/cuw2*veIW1cw", (Object) null);
      assertEquals("X%l/cuw2*veIW1cw", object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("Xi/2");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MiscUtils.closeSilently(mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = MiscUtils.withDefault((Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = MiscUtils.getBoolean("11)x6PK<AT2;u[?i", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        MiscUtils.getCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.util.MiscUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MiscUtils.getBoolean((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        MiscUtils.getBoolean("", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = MiscUtils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = MiscUtils.isEmpty("H");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("9)LW)6z,F6jt^lIa+");
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      Throwable throwable0 = MiscUtils.getCause(mockThrowable1);
      assertEquals("9)LW)6z,F6jt^lIa+", throwable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Throwable throwable0 = MiscUtils.getCause(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Xi/2");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MiscUtils.closeSilently(mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MiscUtils.closeSilently((Closeable) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegexSet regexSet0 = new RegexSet();
      RegexSet regexSet1 = (RegexSet)MiscUtils.withDefault((Object) null, (Object) regexSet0);
      assertEquals(0, regexSet1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = MiscUtils.getBoolean("true", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<MockMinguoDate, Object> hashMap0 = new HashMap<MockMinguoDate, Object>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      hashMap0.put(mockMinguoDate0, mockMinguoDate0);
      boolean boolean0 = MiscUtils.isNonEmpty((Map<?, ?>) hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<MockThaiBuddhistDate, MockJapaneseDate> hashMap0 = new HashMap<MockThaiBuddhistDate, MockJapaneseDate>();
      boolean boolean0 = MiscUtils.isNonEmpty((Map<?, ?>) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty((Map<?, ?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<MockJapaneseDate> linkedHashSet0 = new LinkedHashSet<MockJapaneseDate>();
      linkedHashSet0.add((MockJapaneseDate) null);
      boolean boolean0 = MiscUtils.isNonEmpty((Collection<?>) linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<MockMinguoDate> linkedList0 = new LinkedList<MockMinguoDate>();
      boolean boolean0 = MiscUtils.isNonEmpty((Collection<?>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty((Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = MiscUtils.isNonEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = MiscUtils.isNonEmpty(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      boolean boolean0 = MiscUtils.isNonEmpty(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("9)LW)6z,F6jt^lIa+");
      Throwable[] throwableArray0 = mockThrowable0.getSuppressed();
      boolean boolean0 = MiscUtils.isNonEmpty((Object[]) throwableArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = MiscUtils.isEmpty((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty("9)LW)6z,F6jt^lIa+");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty("");
      assertFalse(boolean0);
  }
}
