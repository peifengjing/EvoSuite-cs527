/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 07:41:29 GMT 2017
 */

package org.asynchttpclient.proxy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.asynchttpclient.Realm;
import org.asynchttpclient.proxy.ProxyServer;
import org.eclipse.jetty.util.IncludeExclude;
import org.eclipse.jetty.util.InetAddressSet;
import org.eclipse.jetty.util.RegexSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProxyServer_ESTest extends ProxyServer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("l#", 93);
      ProxyServer.Builder proxyServer_Builder1 = proxyServer_Builder0.setNonProxyHost("gu7J8'*G+%T%");
      ProxyServer proxyServer0 = proxyServer_Builder1.build();
      boolean boolean0 = proxyServer0.isIgnoredForHost("l#");
      assertEquals(93, proxyServer0.getSecuredPort());
      assertEquals(93, proxyServer0.getPort());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "<#M");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      Realm.Builder realm_Builder1 = realm_Builder0.setScheme(realm_AuthScheme0);
      Realm realm0 = realm_Builder1.build();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProxyServer proxyServer0 = new ProxyServer("", 0, 0, realm0, linkedList0);
      int int0 = proxyServer0.getSecuredPort();
      assertEquals(0, proxyServer0.getPort());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("|<X dcSF;e#gYpe,", "|<X dcSF;e#gYpe,");
      realm_Builder0.parseWWWAuthenticateHeader("|<X dcSF;e#gYpe,");
      Realm realm0 = realm_Builder0.build();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProxyServer proxyServer0 = new ProxyServer("|<X dcSF;e#gYpe,", 4029, 864, realm0, linkedList0);
      int int0 = proxyServer0.getSecuredPort();
      assertEquals(4029, proxyServer0.getPort());
      assertEquals(864, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder((String) null, (-2597));
      Realm.Builder realm_Builder0 = new Realm.Builder("@==d", "ix%e(Ym4^");
      realm_Builder0.setUsePreemptiveAuth(true);
      Realm.Builder realm_Builder1 = realm_Builder0.parseProxyAuthenticateHeader("hostname");
      ProxyServer.Builder proxyServer_Builder1 = proxyServer_Builder0.setRealm(realm_Builder1);
      ProxyServer proxyServer0 = proxyServer_Builder1.build();
      proxyServer0.getRealm();
      assertEquals((-2597), proxyServer0.getSecuredPort());
      assertEquals((-2597), proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "");
      Realm.Builder realm_Builder1 = realm_Builder0.setUseAbsoluteURI(true);
      Realm.Builder realm_Builder2 = realm_Builder1.parseWWWAuthenticateHeader("");
      Realm realm0 = realm_Builder2.build();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.forLanguageTag("[$3f2CJ4I+");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ProxyServer proxyServer0 = new ProxyServer("", (-1943), (-1773), realm0, list0);
      proxyServer0.getRealm();
      assertEquals((-1773), proxyServer0.getSecuredPort());
      assertEquals((-1943), proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("S", "");
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      realm_Builder1.setScheme(realm_AuthScheme0);
      Realm realm0 = realm_Builder1.build();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Class<InetAddressSet> class0 = InetAddressSet.class;
      IncludeExclude<String> includeExclude0 = new IncludeExclude<String>(class0);
      Set<String> set0 = includeExclude0.getIncluded();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ProxyServer proxyServer0 = new ProxyServer("", (-2079), (-2079), realm0, list0);
      proxyServer0.getRealm();
      assertEquals((-2079), proxyServer0.getPort());
      assertEquals((-2079), proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "<#M");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      Realm.Builder realm_Builder1 = realm_Builder0.setScheme(realm_AuthScheme0);
      Realm realm0 = realm_Builder1.build();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProxyServer proxyServer0 = new ProxyServer("", 0, 0, realm0, linkedList0);
      int int0 = proxyServer0.getPort();
      assertEquals(0, proxyServer0.getSecuredPort());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("KERBEROS", 63);
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      int int0 = proxyServer0.getPort();
      assertEquals(63, int0);
      assertEquals(63, proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("Quiet Time is too low for Microsoft Windows: {} < 1000 ms (defaulting to 1000 ms)", "q*H^g^8bB/EB");
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("])gDob%9[xW*");
      Realm realm0 = realm_Builder1.build();
      ProxyServer proxyServer0 = new ProxyServer("])gDob%9[xW*", 1, (-3564), realm0, (List<String>) null);
      proxyServer0.getNonProxyHosts();
      assertEquals(1, proxyServer0.getPort());
      assertEquals((-3564), proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("hoybxi#5b", "hoybxi#5b");
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("");
      Realm realm0 = realm_Builder1.build();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerFirst("");
      ProxyServer proxyServer0 = new ProxyServer(",5Oef", 1865, 571, realm0, linkedList0);
      proxyServer0.getNonProxyHosts();
      assertEquals(1865, proxyServer0.getPort());
      assertEquals(571, proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(",", ",");
      Realm.Builder realm_Builder1 = realm_Builder0.parseProxyAuthenticateHeader(",");
      Realm realm0 = realm_Builder1.build();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      RegexSet regexSet0 = new RegexSet();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) regexSet0);
      ProxyServer proxyServer0 = new ProxyServer(";zHD", 3623, 0, realm0, list0);
      proxyServer0.getNonProxyHosts();
      assertEquals(3623, proxyServer0.getPort());
      assertEquals(0, proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder((String) null, 32);
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      proxyServer0.getHost();
      assertEquals(32, proxyServer0.getSecuredPort());
      assertEquals(32, proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("KERBEROS", 63);
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      proxyServer0.getHost();
      assertEquals(63, proxyServer0.getSecuredPort());
      assertEquals(63, proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder((String) null, 443);
      ProxyServer.Builder proxyServer_Builder1 = proxyServer_Builder0.setNonProxyHost((String) null);
      ProxyServer proxyServer0 = proxyServer_Builder1.build();
      // Undeclared exception!
      try { 
        proxyServer0.isIgnoredForHost("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.proxy.ProxyServer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder((String) null, 32);
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      // Undeclared exception!
      try { 
        proxyServer0.isIgnoredForHost((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hostname
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder((String) null, 443);
      ProxyServer.Builder proxyServer_Builder1 = proxyServer_Builder0.setNonProxyHost((String) null);
      ProxyServer.Builder proxyServer_Builder2 = proxyServer_Builder1.setNonProxyHost("+[");
      assertSame(proxyServer_Builder2, proxyServer_Builder1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder("", 40);
      ProxyServer.Builder proxyServer_Builder1 = proxyServer_Builder0.setNonProxyHost("*h ~hK:cn'.");
      ProxyServer proxyServer0 = proxyServer_Builder1.build();
      boolean boolean0 = proxyServer0.isIgnoredForHost("");
      assertEquals(40, proxyServer0.getSecuredPort());
      assertEquals(40, proxyServer0.getPort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("hoybxi#5b", "hoybxi#5b");
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("");
      Realm realm0 = realm_Builder1.build();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerFirst("");
      ProxyServer proxyServer0 = new ProxyServer(",5Oef", 1865, 571, realm0, linkedList0);
      boolean boolean0 = proxyServer0.isIgnoredForHost("");
      assertEquals(1865, proxyServer0.getPort());
      assertTrue(boolean0);
      assertEquals(571, proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder(";?>|", 0);
      proxyServer_Builder0.setNonProxyHost("pqy#@Hi\"S!wH!D]*");
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      boolean boolean0 = proxyServer0.isIgnoredForHost(";?>|");
      assertEquals(0, proxyServer0.getPort());
      assertEquals(0, proxyServer0.getSecuredPort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder(" [depth=", (-2709));
      proxyServer_Builder0.setNonProxyHost(" [depth=");
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      boolean boolean0 = proxyServer0.isIgnoredForHost(" [depth=");
      assertTrue(boolean0);
      assertEquals((-2709), proxyServer0.getPort());
      assertEquals((-2709), proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder((String) null, (-2597));
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      boolean boolean0 = proxyServer0.isIgnoredForHost(",50oef");
      assertEquals((-2597), proxyServer0.getSecuredPort());
      assertFalse(boolean0);
      assertEquals((-2597), proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder(" [depth=", (-2709));
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      int int0 = proxyServer0.getPort();
      assertEquals((-2709), proxyServer0.getSecuredPort());
      assertEquals((-2709), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder(" [depth=", (-2709));
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      proxyServer0.getRealm();
      assertEquals((-2709), proxyServer0.getPort());
      assertEquals((-2709), proxyServer0.getSecuredPort());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "<#M");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      realm_Builder0.setScheme(realm_AuthScheme0);
      Realm realm0 = realm_Builder0.build();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProxyServer proxyServer0 = new ProxyServer("", 0, 0, realm0, linkedList0);
      proxyServer0.getHost();
      assertEquals(0, proxyServer0.getSecuredPort());
      assertEquals(0, proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder(" [depth=", (-2709));
      ProxyServer proxyServer0 = proxyServer_Builder0.build();
      int int0 = proxyServer0.getSecuredPort();
      assertEquals((-2709), int0);
      assertEquals((-2709), proxyServer0.getPort());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder(" [depth=", (-2709));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProxyServer.Builder proxyServer_Builder1 = proxyServer_Builder0.setNonProxyHosts(linkedList0);
      assertSame(proxyServer_Builder0, proxyServer_Builder1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder((String) null, (-2597));
      ProxyServer.Builder proxyServer_Builder1 = proxyServer_Builder0.setSecuredPort(1302);
      assertSame(proxyServer_Builder0, proxyServer_Builder1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ProxyServer.Builder proxyServer_Builder0 = new ProxyServer.Builder((String) null, 443);
      Realm.Builder realm_Builder0 = new Realm.Builder("os.name", "+[");
      Realm.Builder realm_Builder1 = realm_Builder0.parseProxyAuthenticateHeader("+[");
      Realm realm0 = realm_Builder1.build();
      ProxyServer.Builder proxyServer_Builder1 = proxyServer_Builder0.setRealm(realm0);
      assertSame(proxyServer_Builder1, proxyServer_Builder0);
  }
}
