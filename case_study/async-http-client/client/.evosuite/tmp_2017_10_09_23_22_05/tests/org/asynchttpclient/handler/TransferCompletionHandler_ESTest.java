/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 07:29:07 GMT 2017
 */

package org.asynchttpclient.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.EmptyByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.handler.codec.http.CombinedHttpHeaders;
import io.netty.handler.codec.http.DefaultHttpHeaders;
import io.netty.handler.codec.http.EmptyHttpHeaders;
import io.netty.handler.codec.http.HttpHeaders;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.List;
import java.util.concurrent.LinkedTransferQueue;
import org.asynchttpclient.AsyncHandler;
import org.asynchttpclient.HttpResponseBodyPart;
import org.asynchttpclient.HttpResponseStatus;
import org.asynchttpclient.Response;
import org.asynchttpclient.handler.TransferCompletionHandler;
import org.asynchttpclient.handler.TransferListener;
import org.asynchttpclient.netty.LazyResponseBodyPart;
import org.asynchttpclient.netty.NettyResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransferCompletionHandler_ESTest extends TransferCompletionHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      TransferListener transferListener0 = mock(TransferListener.class, new ViolatedAssumptionAnswer());
      TransferCompletionHandler transferCompletionHandler1 = transferCompletionHandler0.addTransferListener(transferListener0);
      AsyncHandler.State asyncHandler_State0 = transferCompletionHandler1.onContentWriteProgress(500L, 500L, (-2614L));
      assertEquals(AsyncHandler.State.CONTINUE, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(false);
      DefaultHttpHeaders defaultHttpHeaders0 = new DefaultHttpHeaders();
      NettyResponse nettyResponse0 = new NettyResponse((HttpResponseStatus) null, defaultHttpHeaders0, (List<HttpResponseBodyPart>) null);
      Response response0 = transferCompletionHandler0.onCompleted((Response) nettyResponse0);
      assertSame(nettyResponse0, response0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(false);
      transferCompletionHandler0.onTrailingHeadersReceived(combinedHttpHeaders0);
      try { 
        transferCompletionHandler0.onTrailingHeadersReceived((HttpHeaders) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // headers
         //
         verifyException("io.netty.handler.codec.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      EmptyHttpHeaders emptyHttpHeaders0 = EmptyHttpHeaders.INSTANCE;
      transferCompletionHandler0.onTrailingHeadersReceived(emptyHttpHeaders0);
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(false);
      LinkedTransferQueue<Object> linkedTransferQueue0 = new LinkedTransferQueue<Object>();
      HttpHeaders httpHeaders0 = combinedHttpHeaders0.set("'%i'<iDcO", (Iterable<?>) linkedTransferQueue0);
      try { 
        transferCompletionHandler0.onHeadersReceived(httpHeaders0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // read only
         //
         verifyException("io.netty.handler.codec.http.EmptyHttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      // Undeclared exception!
      try { 
        transferCompletionHandler0.addTransferListener((TransferListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentLinkedQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(false);
      TransferListener transferListener0 = mock(TransferListener.class, new ViolatedAssumptionAnswer());
      TransferCompletionHandler transferCompletionHandler1 = transferCompletionHandler0.addTransferListener(transferListener0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "wc=:", 232);
      transferCompletionHandler1.onThrowable(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(false);
      TransferListener transferListener0 = mock(TransferListener.class, new ViolatedAssumptionAnswer());
      TransferCompletionHandler transferCompletionHandler1 = transferCompletionHandler0.addTransferListener(transferListener0);
      AsyncHandler.State asyncHandler_State0 = transferCompletionHandler1.onContentWriteProgress(232, 1311L, 232);
      assertEquals(AsyncHandler.State.CONTINUE, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(false);
      TransferListener transferListener0 = mock(TransferListener.class, new ViolatedAssumptionAnswer());
      transferCompletionHandler0.addTransferListener(transferListener0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(emptyByteBuf0, false);
      AsyncHandler.State asyncHandler_State0 = transferCompletionHandler0.onBodyPartReceived(lazyResponseBodyPart0);
      assertEquals(AsyncHandler.State.CONTINUE, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(false);
      TransferListener transferListener0 = mock(TransferListener.class, new ViolatedAssumptionAnswer());
      transferCompletionHandler0.addTransferListener(transferListener0);
      Response response0 = transferCompletionHandler0.onCompleted((Response) null);
      assertNull(response0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(false);
      TransferListener transferListener0 = mock(TransferListener.class, new ViolatedAssumptionAnswer());
      transferCompletionHandler0.addTransferListener(transferListener0);
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(true);
      AsyncHandler.State asyncHandler_State0 = transferCompletionHandler0.onTrailingHeadersReceived(combinedHttpHeaders0);
      assertEquals(AsyncHandler.State.CONTINUE, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(false);
      transferCompletionHandler0.headers(combinedHttpHeaders0);
      TransferListener transferListener0 = mock(TransferListener.class, new ViolatedAssumptionAnswer());
      TransferCompletionHandler transferCompletionHandler1 = transferCompletionHandler0.addTransferListener(transferListener0);
      AsyncHandler.State asyncHandler_State0 = transferCompletionHandler1.onHeadersWritten();
      assertEquals(AsyncHandler.State.CONTINUE, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(false);
      AsyncHandler.State asyncHandler_State0 = transferCompletionHandler0.onHeadersWritten();
      assertEquals(AsyncHandler.State.CONTINUE, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(true);
      try { 
        transferCompletionHandler0.onBodyPartReceived((HttpResponseBodyPart) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.Response$ResponseBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(false);
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(true);
      transferCompletionHandler0.onHeadersReceived(combinedHttpHeaders0);
      try { 
        transferCompletionHandler0.onTrailingHeadersReceived(combinedHttpHeaders0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can't add to itself.
         //
         verifyException("io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(false);
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(true);
      transferCompletionHandler0.onTrailingHeadersReceived(combinedHttpHeaders0);
      try { 
        transferCompletionHandler0.onHeadersReceived(combinedHttpHeaders0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can't add to itself.
         //
         verifyException("io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      TransferListener transferListener0 = mock(TransferListener.class, new ViolatedAssumptionAnswer());
      TransferCompletionHandler transferCompletionHandler1 = transferCompletionHandler0.removeTransferListener(transferListener0);
      assertEquals(AsyncHandler.State.CONTINUE, transferCompletionHandler1.onContentWritten());
  }
}
