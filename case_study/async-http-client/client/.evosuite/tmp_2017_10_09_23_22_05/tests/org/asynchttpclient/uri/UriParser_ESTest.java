/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 06:29:31 GMT 2017
 */

package org.asynchttpclient.uri;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.asynchttpclient.uri.Uri;
import org.asynchttpclient.uri.UriParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UriParser_ESTest extends UriParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, ".//../tps");
      uriParser0.parse((Uri) null, "?");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create((Uri) null, ".//..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // .//.. could not be parsed into a proper Uri, missing scheme
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "#XSjEfJ#");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, " could not be parse into a proper Uri, mising scheme");
      uriParser0.parse((Uri) null, "");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("gp;4", (String) null, "  Oi|P4 -/.B", 1, "  Oi|P4 -/.B", "//");
      // Undeclared exception!
      try { 
        uriParser0.parse(uri0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // orginalUri
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("gp;4", (String) null, "  Oi|P4 -/.FB", (-1), "?np.fF->&i+>zH", (String) null);
      uriParser0.parse(uri0, "?np.fF->&i+>zH");
      assertFalse(uri0.isSecured());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "NT/st64]Q 2FDOXpX~");
      uriParser0.parse((Uri) null, "?");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "////UQjT6k0 zNR.-");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("Of(zp?Bf", "/../", "/../", (-1), "WH", "'.b2WGvsCiTJN");
      uriParser0.parse(uri0, "//");
      uriParser0.parse(uri0, "Of(zp?Bf");
      assertFalse(uri0.isSecured());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "/.");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("pc4w>\"&/0syD=ur", ",`*699:G9tt]gU", "/t", 93, "3]E", (String) null);
      uriParser0.parse(uri0, "./");
      assertEquals("/t", uri0.getHost());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "/..");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "/..//..");
      uriParser0.parse((Uri) null, "../");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Uri uri0 = new Uri("Of(zp?Bf", "/../", "/../", (-1), "WH", "'.b2WGvsCiTJN");
      Uri uri1 = Uri.create(uri0, ".//../https");
      assertEquals("https", uri1.getPath());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      // Undeclared exception!
      try { 
        uriParser0.parse((Uri) null, "//*699:G9tt]gU");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"G9tt]gU\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "//(zp?Bf");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, " could not be parse into a proper Uri, mising scheme");
      uriParser0.parse((Uri) null, ".//Oi|P4 -/Oi|P4 -/.B");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "?");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create("\"#Yp4?|<_ w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \"#Yp4?|<_ w could not be parsed into a proper Uri, missing scheme
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("pc4w>\"&/0syD=ur", "/t", "wss", 93, (String) null, (String) null);
      Uri uri1 = Uri.create(uri0, ",`*699:G9tt]gU");
      uriParser0.parse(uri1, "http");
      assertEquals("/,`*699:G9tt]gU", uri1.getPath());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("]/=f@3Wzq'V,", "vJ1?v_aSwJ9", "F%-%K.AQ$Br]I%|3`K", (-1), "-E8#", (String) null);
      Uri uri1 = uri0.withNewScheme("/./");
      uriParser0.parse(uri1, "]/=f@3Wzq'V,");
      uriParser0.parse(uri0, "V(zzHD\u0002");
      assertEquals(80, uri0.getSchemeDefaultPort());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "nurl:t64]q 2fdoxpx~");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "In0alid authority field:l");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri("/tps/.", (String) null, "/tps/.", (-1), (String) null, (String) null);
      uriParser0.parse(uri0, " #Lf?g7NaONWq_&wFJ");
      assertNull(uri0.getQuery());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create("//alid Quthoi6  field: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // //alid Quthoi6  field:  could not be parsed into a proper Uri, missing scheme
         //
         verifyException("org.asynchttpclient.uri.Uri", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "url:");
      Uri uri0 = new Uri("gp;4", (String) null, "  Oi|P4 -/.B", 1, "  Oi|P4 -/.B", "//");
      uriParser0.parse(uri0, "//");
      assertEquals("//", uri0.getQuery());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "://");
  }
}
