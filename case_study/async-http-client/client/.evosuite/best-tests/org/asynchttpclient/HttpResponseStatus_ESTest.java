/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:46:18 GMT 2017
 */

package org.asynchttpclient;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.channel.Channel;
import io.netty.handler.codec.http.HttpResponse;
import io.netty.handler.codec.http.HttpVersion;
import java.net.SocketAddress;
import org.asynchttpclient.netty.NettyResponseStatus;
import org.asynchttpclient.uri.Uri;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpResponseStatus_ESTest extends HttpResponseStatus_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      io.netty.handler.codec.http.HttpResponseStatus httpResponseStatus0 = io.netty.handler.codec.http.HttpResponseStatus.METHOD_NOT_ALLOWED;
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn(httpResponseStatus0).when(httpResponse0).status();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, channel0);
      String string0 = nettyResponseStatus0.getStatusText();
      assertEquals("Method Not Allowed", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      io.netty.handler.codec.http.HttpResponseStatus httpResponseStatus0 = io.netty.handler.codec.http.HttpResponseStatus.valueOf(0);
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn(httpResponseStatus0).when(httpResponse0).status();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, channel0);
      int int0 = nettyResponseStatus0.getStatusCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      io.netty.handler.codec.http.HttpResponseStatus httpResponseStatus0 = io.netty.handler.codec.http.HttpResponseStatus.METHOD_NOT_ALLOWED;
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn(httpResponseStatus0).when(httpResponse0).status();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, channel0);
      int int0 = nettyResponseStatus0.getStatusCode();
      assertEquals(405, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn(httpVersion0).when(httpResponse0).protocolVersion();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, channel0);
      String string0 = nettyResponseStatus0.getProtocolText();
      assertEquals("HTTP/1.1", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpVersion httpVersion0 = new HttpVersion("https", 0, 0, true);
      HttpVersion httpVersion1 = HttpVersion.HTTP_1_1;
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn(httpVersion0, httpVersion1, httpVersion0, httpVersion0, httpVersion1).when(httpResponse0).protocolVersion();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, channel0);
      nettyResponseStatus0.getProtocolMajorVersion();
      nettyResponseStatus0.getProtocolName();
      int int0 = nettyResponseStatus0.getProtocolMinorVersion();
      nettyResponseStatus0.getProtocolMinorVersion();
      int int1 = nettyResponseStatus0.getProtocolMinorVersion();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      io.netty.handler.codec.http.HttpResponseStatus httpResponseStatus0 = io.netty.handler.codec.http.HttpResponseStatus.METHOD_NOT_ALLOWED;
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn(httpVersion0, httpVersion0, (HttpVersion) null).when(httpResponse0).protocolVersion();
      doReturn(httpResponseStatus0).when(httpResponse0).status();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, channel0);
      nettyResponseStatus0.getProtocolName();
      nettyResponseStatus0.getProtocolMinorVersion();
      nettyResponseStatus0.getStatusText();
      // Undeclared exception!
      try { 
        nettyResponseStatus0.getProtocolMajorVersion();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.NettyResponseStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, channel0);
      SocketAddress socketAddress0 = nettyResponseStatus0.getLocalAddress();
      assertNull(socketAddress0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn((io.netty.handler.codec.http.HttpResponseStatus) null).when(httpResponse0).status();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, channel0);
      // Undeclared exception!
      try { 
        nettyResponseStatus0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.NettyResponseStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, (HttpResponse) null, channel0);
      // Undeclared exception!
      try { 
        nettyResponseStatus0.getStatusText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.NettyResponseStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn((io.netty.handler.codec.http.HttpResponseStatus) null).when(httpResponse0).status();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, (Channel) null);
      // Undeclared exception!
      try { 
        nettyResponseStatus0.getStatusCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.NettyResponseStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, (HttpResponse) null, channel0);
      // Undeclared exception!
      try { 
        nettyResponseStatus0.getProtocolText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.NettyResponseStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn((HttpVersion) null).when(httpResponse0).protocolVersion();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, channel0);
      // Undeclared exception!
      try { 
        nettyResponseStatus0.getProtocolName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.NettyResponseStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn((HttpVersion) null).when(httpResponse0).protocolVersion();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, (Channel) null);
      // Undeclared exception!
      try { 
        nettyResponseStatus0.getProtocolMinorVersion();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.NettyResponseStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, (HttpResponse) null, channel0);
      // Undeclared exception!
      try { 
        nettyResponseStatus0.getProtocolMajorVersion();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.NettyResponseStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      io.netty.handler.codec.http.HttpResponseStatus httpResponseStatus0 = io.netty.handler.codec.http.HttpResponseStatus.PRECONDITION_REQUIRED;
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn(httpResponseStatus0, httpResponseStatus0).when(httpResponse0).status();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, (Channel) null);
      String string0 = nettyResponseStatus0.toString();
      assertEquals("428 Precondition Required", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus((Uri) null, httpResponse0, channel0);
      Uri uri0 = nettyResponseStatus0.getUri();
      assertNull(uri0);
  }
}
