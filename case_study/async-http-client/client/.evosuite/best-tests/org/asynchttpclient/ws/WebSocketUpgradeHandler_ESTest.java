/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 00:53:05 GMT 2017
 */

package org.asynchttpclient.ws;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.channel.Channel;
import io.netty.channel.ChannelFuture;
import io.netty.handler.codec.http.HttpHeaders;
import java.util.ConcurrentModificationException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicReference;
import org.asynchttpclient.AsyncHandler;
import org.asynchttpclient.HttpResponseBodyPart;
import org.asynchttpclient.HttpResponseStatus;
import org.asynchttpclient.netty.ws.NettyWebSocket;
import org.asynchttpclient.ws.CloseCodeReasonMessageTest;
import org.asynchttpclient.ws.WebSocket;
import org.asynchttpclient.ws.WebSocketListener;
import org.asynchttpclient.ws.WebSocketUpgradeHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebSocketUpgradeHandler_ESTest extends WebSocketUpgradeHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<WebSocketListener> linkedList0 = new LinkedList<WebSocketListener>();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = new WebSocketUpgradeHandler(linkedList0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0, linkedList0);
      CountDownLatch countDownLatch0 = mock(CountDownLatch.class, new ViolatedAssumptionAnswer());
      AtomicReference<String> atomicReference0 = (AtomicReference<String>) mock(AtomicReference.class, new ViolatedAssumptionAnswer());
      CloseCodeReasonMessageTest.Listener closeCodeReasonMessageTest_Listener0 = new CloseCodeReasonMessageTest.Listener(countDownLatch0, atomicReference0);
      webSocketUpgradeHandler0.setWebSocket(nettyWebSocket0);
      linkedList0.add((WebSocketListener) closeCodeReasonMessageTest_Listener0);
      webSocketUpgradeHandler0.setWebSocket(nettyWebSocket0);
      // Undeclared exception!
      try { 
        webSocketUpgradeHandler0.onOpen();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      CountDownLatch countDownLatch0 = mock(CountDownLatch.class, new ViolatedAssumptionAnswer());
      CloseCodeReasonMessageTest.Listener closeCodeReasonMessageTest_Listener0 = new CloseCodeReasonMessageTest.Listener(countDownLatch0, (AtomicReference<String>) null);
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder1 = webSocketUpgradeHandler_Builder0.removeWebSocketListener(closeCodeReasonMessageTest_Listener0);
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<WebSocketListener> linkedHashSet0 = new LinkedHashSet<WebSocketListener>();
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0, linkedHashSet0);
      HttpResponseStatus httpResponseStatus0 = mock(HttpResponseStatus.class, new ViolatedAssumptionAnswer());
      doReturn(101).when(httpResponseStatus0).getStatusCode();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder1.build();
      webSocketUpgradeHandler0.setWebSocket(nettyWebSocket0);
      AsyncHandler.State asyncHandler_State0 = webSocketUpgradeHandler0.onStatusReceived(httpResponseStatus0);
      assertEquals(AsyncHandler.State.CONTINUE, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<WebSocketListener> linkedList0 = new LinkedList<WebSocketListener>();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = new WebSocketUpgradeHandler(linkedList0);
      linkedList0.removeFirstOccurrence(webSocketUpgradeHandler0);
      HttpResponseStatus httpResponseStatus0 = mock(HttpResponseStatus.class, new ViolatedAssumptionAnswer());
      doReturn(1429).when(httpResponseStatus0).getStatusCode();
      webSocketUpgradeHandler0.onStatusReceived(httpResponseStatus0);
      CountDownLatch countDownLatch0 = mock(CountDownLatch.class, new ViolatedAssumptionAnswer());
      AtomicReference<String> atomicReference0 = (AtomicReference<String>) mock(AtomicReference.class, new ViolatedAssumptionAnswer());
      CloseCodeReasonMessageTest.Listener closeCodeReasonMessageTest_Listener0 = new CloseCodeReasonMessageTest.Listener(countDownLatch0, atomicReference0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null, linkedList0);
      WebSocket webSocket0 = nettyWebSocket0.removeWebSocketListener(closeCodeReasonMessageTest_Listener0);
      closeCodeReasonMessageTest_Listener0.onClose(webSocket0, (-406), (String) null);
      linkedList0.remove((Object) closeCodeReasonMessageTest_Listener0);
      webSocketUpgradeHandler0.setWebSocket0((NettyWebSocket) null);
      webSocketUpgradeHandler0.onOpen0();
      webSocketUpgradeHandler0.onOpen0();
      webSocketUpgradeHandler0.setWebSocket((NettyWebSocket) null);
      webSocketUpgradeHandler0.onStatusReceived0((HttpResponseStatus) null);
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketUpgradeHandler webSocketUpgradeHandler1 = webSocketUpgradeHandler_Builder0.build();
      assertFalse(webSocketUpgradeHandler1.equals((Object)webSocketUpgradeHandler0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<WebSocketListener> linkedList0 = new LinkedList<WebSocketListener>();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = new WebSocketUpgradeHandler(linkedList0);
      MockThrowable mockThrowable0 = new MockThrowable();
      webSocketUpgradeHandler0.onThrowable(mockThrowable0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(channel0).toString();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      webSocketUpgradeHandler0.setWebSocket(nettyWebSocket0);
      HttpResponseBodyPart httpResponseBodyPart0 = mock(HttpResponseBodyPart.class, new ViolatedAssumptionAnswer());
      webSocketUpgradeHandler0.onBodyPartReceived0(httpResponseBodyPart0);
      webSocketUpgradeHandler0.onOpen();
      webSocketUpgradeHandler0.onCompleted0();
      webSocketUpgradeHandler0.onCompleted();
      webSocketUpgradeHandler0.onThrowable0(mockThrowable0);
      HttpResponseBodyPart httpResponseBodyPart1 = mock(HttpResponseBodyPart.class, new ViolatedAssumptionAnswer());
      webSocketUpgradeHandler0.onBodyPartReceived(httpResponseBodyPart1);
      webSocketUpgradeHandler0.onOpen();
      webSocketUpgradeHandler0.onThrowable(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<WebSocketListener> linkedList0 = new LinkedList<WebSocketListener>();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = new WebSocketUpgradeHandler(linkedList0);
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      CountDownLatch countDownLatch0 = mock(CountDownLatch.class, new ViolatedAssumptionAnswer());
      AtomicReference<String> atomicReference0 = (AtomicReference<String>) mock(AtomicReference.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders1 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders1, linkedList0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      nettyWebSocket0.sendBinaryFrame(byteArray0);
      webSocketUpgradeHandler0.setWebSocket(nettyWebSocket0);
      CloseCodeReasonMessageTest.Listener closeCodeReasonMessageTest_Listener0 = new CloseCodeReasonMessageTest.Listener(countDownLatch0, atomicReference0);
      HttpResponseStatus httpResponseStatus0 = mock(HttpResponseStatus.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(httpResponseStatus0).getStatusCode();
      webSocketUpgradeHandler0.onStatusReceived(httpResponseStatus0);
      linkedList0.add((WebSocketListener) closeCodeReasonMessageTest_Listener0);
      webSocketUpgradeHandler0.onHeadersReceived0(httpHeaders0);
      try { 
        webSocketUpgradeHandler0.onStatusReceived((HttpResponseStatus) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.ws.WebSocketUpgradeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<WebSocketListener> linkedList0 = new LinkedList<WebSocketListener>();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = new WebSocketUpgradeHandler(linkedList0);
      MockThrowable mockThrowable0 = new MockThrowable("*Ks:'<wWbcY?+=dJ,");
      mockThrowable0.getCause();
      Throwable throwable0 = mockThrowable0.initCause((Throwable) null);
      webSocketUpgradeHandler0.onThrowable0(throwable0);
      assertSame(throwable0, mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      CountDownLatch countDownLatch0 = mock(CountDownLatch.class, new ViolatedAssumptionAnswer());
      AtomicReference<String> atomicReference0 = (AtomicReference<String>) mock(AtomicReference.class, new ViolatedAssumptionAnswer());
      CloseCodeReasonMessageTest.Listener closeCodeReasonMessageTest_Listener0 = new CloseCodeReasonMessageTest.Listener(countDownLatch0, atomicReference0);
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder1 = webSocketUpgradeHandler_Builder0.removeWebSocketListener(closeCodeReasonMessageTest_Listener0);
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder2 = webSocketUpgradeHandler_Builder1.addWebSocketListener(closeCodeReasonMessageTest_Listener0);
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder2.build();
      MockThrowable mockThrowable0 = new MockThrowable("writeBufferWaterMark");
      mockThrowable0.getCause();
      // Undeclared exception!
      try { 
        webSocketUpgradeHandler0.onThrowable((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.ws.CloseCodeReasonMessageTest$Listener", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<WebSocketListener> linkedList0 = new LinkedList<WebSocketListener>();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = new WebSocketUpgradeHandler(linkedList0);
      webSocketUpgradeHandler0.onOpen0();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder0.build();
      HttpResponseBodyPart httpResponseBodyPart0 = mock(HttpResponseBodyPart.class, new ViolatedAssumptionAnswer());
      webSocketUpgradeHandler0.onBodyPartReceived0(httpResponseBodyPart0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<WebSocketListener> linkedList0 = new LinkedList<WebSocketListener>();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = new WebSocketUpgradeHandler(linkedList0);
      HttpResponseStatus httpResponseStatus0 = mock(HttpResponseStatus.class, new ViolatedAssumptionAnswer());
      webSocketUpgradeHandler0.onStatusReceived0(httpResponseStatus0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<WebSocketListener> linkedList0 = new LinkedList<WebSocketListener>();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = new WebSocketUpgradeHandler(linkedList0);
      NettyWebSocket nettyWebSocket0 = webSocketUpgradeHandler0.onCompleted();
      assertNull(nettyWebSocket0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      CountDownLatch countDownLatch0 = mock(CountDownLatch.class, new ViolatedAssumptionAnswer());
      AtomicReference<String> atomicReference0 = (AtomicReference<String>) mock(AtomicReference.class, new ViolatedAssumptionAnswer());
      CloseCodeReasonMessageTest.Listener closeCodeReasonMessageTest_Listener0 = new CloseCodeReasonMessageTest.Listener(countDownLatch0, atomicReference0);
      webSocketUpgradeHandler_Builder0.removeWebSocketListener(closeCodeReasonMessageTest_Listener0);
      CountDownLatch countDownLatch1 = mock(CountDownLatch.class, new ViolatedAssumptionAnswer());
      AtomicReference<String> atomicReference1 = (AtomicReference<String>) mock(AtomicReference.class, new ViolatedAssumptionAnswer());
      CloseCodeReasonMessageTest.Listener closeCodeReasonMessageTest_Listener1 = new CloseCodeReasonMessageTest.Listener(countDownLatch1, atomicReference1);
      webSocketUpgradeHandler_Builder0.addWebSocketListener(closeCodeReasonMessageTest_Listener1);
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder0.build();
      webSocketUpgradeHandler_Builder0.build();
      HttpResponseBodyPart httpResponseBodyPart0 = mock(HttpResponseBodyPart.class, new ViolatedAssumptionAnswer());
      webSocketUpgradeHandler0.onBodyPartReceived(httpResponseBodyPart0);
      // Undeclared exception!
      try { 
        webSocketUpgradeHandler0.onOpen();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.ws.WebSocketUpgradeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CountDownLatch countDownLatch0 = mock(CountDownLatch.class, new ViolatedAssumptionAnswer());
      AtomicReference<String> atomicReference0 = (AtomicReference<String>) mock(AtomicReference.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpResponseStatus httpResponseStatus0 = mock(HttpResponseStatus.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<WebSocketListener> linkedList0 = new LinkedList<WebSocketListener>();
      CountDownLatch countDownLatch0 = mock(CountDownLatch.class, new ViolatedAssumptionAnswer());
      AtomicReference<String> atomicReference0 = (AtomicReference<String>) mock(AtomicReference.class, new ViolatedAssumptionAnswer());
      CloseCodeReasonMessageTest.Listener closeCodeReasonMessageTest_Listener0 = new CloseCodeReasonMessageTest.Listener(countDownLatch0, atomicReference0);
      linkedList0.add((WebSocketListener) closeCodeReasonMessageTest_Listener0);
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = new WebSocketUpgradeHandler(linkedList0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      webSocketUpgradeHandler0.setWebSocket(nettyWebSocket0);
      HttpHeaders httpHeaders1 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      webSocketUpgradeHandler0.onHeadersReceived0(httpHeaders1);
      webSocketUpgradeHandler0.setWebSocket0(nettyWebSocket0);
      HttpResponseBodyPart httpResponseBodyPart0 = mock(HttpResponseBodyPart.class, new ViolatedAssumptionAnswer());
      webSocketUpgradeHandler0.onBodyPartReceived(httpResponseBodyPart0);
      webSocketUpgradeHandler0.setWebSocket(nettyWebSocket0);
      CountDownLatch countDownLatch1 = mock(CountDownLatch.class, new ViolatedAssumptionAnswer());
      AtomicReference<String> atomicReference1 = (AtomicReference<String>) mock(AtomicReference.class, new ViolatedAssumptionAnswer());
      CloseCodeReasonMessageTest.Listener closeCodeReasonMessageTest_Listener1 = new CloseCodeReasonMessageTest.Listener(countDownLatch1, atomicReference1);
      HttpHeaders httpHeaders2 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      webSocketUpgradeHandler0.onHeadersReceived0(httpHeaders2);
      HttpResponseStatus httpResponseStatus0 = mock(HttpResponseStatus.class, new ViolatedAssumptionAnswer());
      doReturn((-951)).when(httpResponseStatus0).getStatusCode();
      AsyncHandler.State asyncHandler_State0 = webSocketUpgradeHandler0.onStatusReceived(httpResponseStatus0);
      HttpHeaders httpHeaders3 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      AsyncHandler.State asyncHandler_State1 = webSocketUpgradeHandler0.onHeadersReceived(httpHeaders3);
      assertNotSame(asyncHandler_State1, asyncHandler_State0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      CountDownLatch countDownLatch0 = mock(CountDownLatch.class, new ViolatedAssumptionAnswer());
      AtomicReference<String> atomicReference0 = (AtomicReference<String>) mock(AtomicReference.class, new ViolatedAssumptionAnswer());
      CloseCodeReasonMessageTest.Listener closeCodeReasonMessageTest_Listener0 = new CloseCodeReasonMessageTest.Listener(countDownLatch0, atomicReference0);
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder1 = webSocketUpgradeHandler_Builder0.addWebSocketListener(closeCodeReasonMessageTest_Listener0);
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder2 = webSocketUpgradeHandler_Builder1.addWebSocketListener(closeCodeReasonMessageTest_Listener0);
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      Throwable throwable0 = mockThrowable1.fillInStackTrace();
      MockThrowable mockThrowable2 = new MockThrowable("read only", throwable0);
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder2.build();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(channel0).toString();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      MockThrowable mockThrowable3 = new MockThrowable("q@c:uW/E");
      webSocketUpgradeHandler0.onThrowable(mockThrowable3);
      webSocketUpgradeHandler0.setWebSocket(nettyWebSocket0);
      HttpResponseStatus httpResponseStatus0 = mock(HttpResponseStatus.class, new ViolatedAssumptionAnswer());
      doReturn(96).when(httpResponseStatus0).getStatusCode();
      webSocketUpgradeHandler0.onStatusReceived(httpResponseStatus0);
      webSocketUpgradeHandler0.onCompleted0();
      webSocketUpgradeHandler0.onThrowable(mockThrowable2);
      NettyWebSocket nettyWebSocket1 = webSocketUpgradeHandler0.onCompleted();
      assertSame(nettyWebSocket1, nettyWebSocket0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders1 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<WebSocketListener> linkedList0 = new LinkedList<WebSocketListener>();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = new WebSocketUpgradeHandler(linkedList0);
      // Undeclared exception!
      try { 
        webSocketUpgradeHandler0.onOpen();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.ws.WebSocketUpgradeHandler", e);
      }
  }
}
