/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:37:06 GMT 2017
 */

package org.asynchttpclient;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import org.asynchttpclient.Realm;
import org.asynchttpclient.uri.Uri;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Realm_ESTest extends Realm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "");
      Realm.Builder realm_Builder1 = realm_Builder0.setUseAbsoluteURI(true);
      Realm.Builder realm_Builder2 = realm_Builder1.setQop("://");
      Realm.Builder realm_Builder3 = realm_Builder2.setOpaque("");
      Realm.Builder realm_Builder4 = realm_Builder3.setNonce(", algorithm='");
      Realm.Builder realm_Builder5 = realm_Builder4.setNc("");
      realm_Builder0.setUsePreemptiveAuth(false);
      realm_Builder5.setNtlmHost((String) null);
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.KERBEROS;
      Realm.Builder realm_Builder6 = realm_Builder5.setScheme(realm_AuthScheme0);
      realm_Builder6.parseWWWAuthenticateHeader(", algorithm='");
      realm_Builder6.setOpaque("scheme");
      realm_Builder6.setAlgorithm(", algorithm='");
      realm_Builder0.setNc("://");
      realm_Builder1.setUsePreemptiveAuth(false);
      Realm realm0 = realm_Builder3.build();
      realm0.getPrincipal();
      realm0.getNtlmHost();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "<8&D6LDTR)3M-L");
      Realm.Builder realm_Builder1 = realm_Builder0.setUsePreemptiveAuth(true);
      realm_Builder0.setQop("auth");
      Realm.Builder realm_Builder2 = realm_Builder1.setAlgorithm("-SnmVOJ|l!S6k");
      Realm.Builder realm_Builder3 = realm_Builder2.parseWWWAuthenticateHeader("<8&D6LDTR)3M-L");
      realm_Builder2.setNtlmDomain("");
      Realm.Builder realm_Builder4 = realm_Builder3.setNtlmHost("");
      Realm realm0 = realm_Builder4.build();
      realm0.getCnonce();
      realm_Builder2.setUsePreemptiveAuth(true);
      realm0.getNtlmDomain();
      realm0.getPassword();
      realm0.getNtlmHost();
      realm0.getCharset();
      realm0.getScheme();
      realm0.getCnonce();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "");
      Realm.Builder realm_Builder1 = realm_Builder0.parseProxyAuthenticateHeader("");
      Realm.Builder realm_Builder2 = realm_Builder1.setNc("");
      Realm.Builder realm_Builder3 = realm_Builder2.setNonce("");
      Realm realm0 = realm_Builder3.build();
      realm0.getUri();
      realm_Builder3.setUri((Uri) null);
      Realm.Builder realm_Builder4 = realm_Builder3.setOpaque("");
      Realm realm1 = realm_Builder4.build();
      realm1.getCharset();
      realm1.getOpaque();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("?*Y2;D-p,Cg!4n,*b", "W`K9q$cTMYKt");
      Realm.Builder realm_Builder1 = realm_Builder0.setQop("ArTyG^bEzc");
      realm_Builder0.setUsePreemptiveAuth(false);
      realm_Builder1.setCharset((Charset) null);
      realm_Builder0.setUsePreemptiveAuth(false);
      realm_Builder1.setRealmName("g\"8Y_G'");
      Realm.Builder realm_Builder2 = realm_Builder1.setMethodName("?*Y2;D-p,Cg!4n,*b");
      realm_Builder1.setMethodName("o3");
      realm_Builder1.setUsePreemptiveAuth(true);
      realm_Builder0.parseProxyAuthenticateHeader("?*Y2;D-p,Cg!4n,*b");
      realm_Builder0.setAlgorithm("ArTyG^bEzc");
      Realm realm0 = realm_Builder0.build();
      realm0.toString();
      realm0.getCnonce();
      realm0.getCharset();
      realm0.toString();
      realm0.getCharset();
      realm0.getRealmName();
      realm_Builder2.setNtlmDomain("o3");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "wss");
      Realm.Builder realm_Builder1 = realm_Builder0.setNc("");
      realm_Builder1.setUseAbsoluteURI(false);
      realm_Builder0.parseWWWAuthenticateHeader("");
      realm_Builder0.parseProxyAuthenticateHeader("");
      Realm.Builder realm_Builder2 = realm_Builder1.setOpaque("Cqi9hCy.<");
      realm_Builder2.setAlgorithm("");
      realm_Builder0.setNtlmHost("");
      realm_Builder2.parseProxyAuthenticateHeader("Cqi9hCy.<");
      realm_Builder2.setRealmName("");
      Realm.Builder realm_Builder3 = realm_Builder0.parseProxyAuthenticateHeader((String) null);
      Realm realm0 = realm_Builder3.build();
      realm0.getNtlmDomain();
      realm0.getUri();
      realm0.getNonce();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.KERBEROS;
      realm_Builder3.setScheme(realm_AuthScheme0);
      realm_Builder3.setAlgorithm("");
      realm0.getScheme();
      realm0.getNc();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("PC&M/w1&`@", "'zB");
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("Kdbz.=Dx");
      Realm.Builder realm_Builder2 = realm_Builder1.setUsePreemptiveAuth(false);
      Realm.Builder realm_Builder3 = realm_Builder1.setOpaque("Kdbz.=Dx");
      realm_Builder3.setNonce(",6%q _[0#");
      realm_Builder0.setOpaque("Kdbz.=Dx");
      realm_Builder0.setMethodName("");
      realm_Builder2.setOmitQuery(false);
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.KERBEROS;
      realm_Builder1.setScheme(realm_AuthScheme0);
      realm_Builder2.setNtlmDomain("I+t?LGHRiWg");
      realm_Builder0.setRealmName("");
      Realm realm0 = realm_Builder3.build();
      realm0.getOpaque();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "");
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("k3y(FCWvr76");
      Realm.Builder realm_Builder2 = realm_Builder1.setNonce("");
      realm_Builder2.setOpaque("k3y(FCWvr76");
      Realm.Builder realm_Builder3 = realm_Builder2.setOmitQuery(true);
      realm_Builder1.setOpaque("");
      Realm.Builder realm_Builder4 = realm_Builder3.setUsePreemptiveAuth(true);
      Realm realm0 = realm_Builder4.build();
      realm0.toString();
      realm0.getNonce();
      realm0.isUseAbsoluteURI();
      realm_Builder1.setResponse("");
      realm_Builder4.parseWWWAuthenticateHeader(" could not be parsed into a proper Uri, missing host");
      realm_Builder3.setOmitQuery(true);
      realm_Builder4.setNtlmHost("k3y(FCWvr76");
      realm0.toString();
      realm0.getQop();
      realm_Builder3.parseProxyAuthenticateHeader("");
      realm0.isUseAbsoluteURI();
      realm0.getPassword();
      Charset charset0 = realm0.getCharset();
      realm_Builder4.setCharset(charset0);
      Realm.AuthScheme.values();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(" could not be parsed into a proper Uri, missing host", "");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      Realm.Builder realm_Builder1 = realm_Builder0.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder2 = realm_Builder1.setResponse("Cl+z=");
      Realm.Builder realm_Builder3 = realm_Builder2.setOmitQuery(true);
      Realm.Builder realm_Builder4 = realm_Builder3.setUsePreemptiveAuth(true);
      realm_Builder3.parseWWWAuthenticateHeader((String) null);
      realm_Builder3.setQop("{p4C68Lm");
      Realm realm0 = realm_Builder3.build();
      realm0.getUri();
      realm_Builder3.setUri((Uri) null);
      Realm realm1 = realm_Builder4.build();
      realm1.isOmitQuery();
      realm1.getPrincipal();
      realm1.getPassword();
      realm_Builder3.setOmitQuery(true);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("_/Echs=>#+{rTG@{F-", "");
      Realm.Builder realm_Builder1 = realm_Builder0.setMethodName("_/Echs=>#+{rTG@{F-");
      Realm.Builder realm_Builder2 = realm_Builder1.setResponse("");
      Realm.Builder realm_Builder3 = realm_Builder2.setQop("");
      Realm.Builder realm_Builder4 = realm_Builder3.setNonce("host");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      Realm.Builder realm_Builder5 = realm_Builder4.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder6 = realm_Builder5.setNtlmHost("host");
      realm_Builder3.setUsePreemptiveAuth(false);
      Realm realm0 = realm_Builder3.build();
      realm0.toString();
      realm0.toString();
      realm0.getCnonce();
      realm0.getNtlmDomain();
      realm_Builder4.setUseAbsoluteURI(false);
      realm_Builder6.setResponse("host");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("wss", "wss");
      Realm.Builder realm_Builder1 = realm_Builder0.setNonce(" could not be parsed into a proper Uri, missing scheme");
      realm_Builder0.parseProxyAuthenticateHeader(" could not be parsed into a proper Uri, missing scheme");
      Realm.Builder realm_Builder2 = realm_Builder1.setResponse("wss");
      Realm.Builder realm_Builder3 = realm_Builder2.setRealmName("wss");
      Realm.Builder realm_Builder4 = realm_Builder3.setQop("cr*Y");
      Realm realm0 = realm_Builder0.build();
      realm_Builder0.setNonce("wss");
      realm_Builder1.setOmitQuery(false);
      Realm realm1 = realm_Builder4.build();
      realm_Builder3.parseProxyAuthenticateHeader(" could not be parsed into a proper Uri, missing scheme");
      realm1.toString();
      realm_Builder2.setMethodName(" could not be parsed into a proper Uri, missing scheme");
      realm_Builder2.setRealmName(" could not be parsed into a proper Uri, missing scheme");
      realm1.getCharset();
      realm1.getNonce();
      realm1.toString();
      realm1.getNtlmHost();
      realm1.getQop();
      realm_Builder2.setUsePreemptiveAuth(false);
      realm0.getAlgorithm();
      // Undeclared exception!
      try { 
        Realm.AuthScheme.valueOf("cr*Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.asynchttpclient.Realm.AuthScheme.cr*Y
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "");
      Realm.Builder realm_Builder1 = realm_Builder0.setNc("scheme");
      Realm.Builder realm_Builder2 = realm_Builder1.setMethodName("");
      Realm.Builder realm_Builder3 = realm_Builder2.setResponse("D)(;");
      Realm.Builder realm_Builder4 = realm_Builder3.parseWWWAuthenticateHeader("D)(;");
      Realm.Builder realm_Builder5 = realm_Builder4.setNtlmHost("scheme");
      Realm.Builder realm_Builder6 = realm_Builder5.setOmitQuery(true);
      realm_Builder5.setQop("host");
      realm_Builder6.parseProxyAuthenticateHeader("");
      realm_Builder0.setAlgorithm("\"");
      Realm.AuthScheme.values();
      realm_Builder5.setRealmName("");
      Realm realm0 = realm_Builder0.build();
      realm0.getNc();
      realm0.getAlgorithm();
      realm_Builder0.setNc("");
      realm0.getRealmName();
      realm0.getNonce();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("i}.u3ttbO ", ", scheme=");
      realm_Builder0.setUsePreemptiveAuth(true);
      realm_Builder0.setOpaque("");
      Realm.Builder realm_Builder1 = realm_Builder0.parseProxyAuthenticateHeader("4c^MWNZ`?JU:");
      Realm.Builder realm_Builder2 = realm_Builder1.setOmitQuery(true);
      Realm.Builder realm_Builder3 = realm_Builder2.setResponse("");
      Realm.Builder realm_Builder4 = realm_Builder2.setNtlmHost("O52^I=>>[s3Bc");
      realm_Builder3.setOpaque(", scheme=");
      Realm.Builder realm_Builder5 = realm_Builder4.setRealmName("");
      Realm realm0 = realm_Builder5.build();
      realm0.toString();
      realm_Builder3.setNonce(", scheme=");
      realm_Builder4.setMethodName("");
      realm_Builder5.parseWWWAuthenticateHeader("gb.jAp'h");
      realm0.isUsePreemptiveAuth();
      realm0.getAlgorithm();
      realm0.getPassword();
      realm_Builder5.setUsePreemptiveAuth(true);
      realm_Builder3.setNtlmHost("[3U86?");
      realm0.isUseAbsoluteURI();
      realm0.isUsePreemptiveAuth();
      Realm.Builder realm_Builder6 = realm_Builder4.setMethodName("https");
      realm_Builder6.setNtlmDomain("4c^MWNZ`?JU:");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "");
      Realm.Builder realm_Builder1 = realm_Builder0.parseProxyAuthenticateHeader("");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.KERBEROS;
      Realm.Builder realm_Builder2 = realm_Builder1.setScheme(realm_AuthScheme0);
      realm_Builder0.setResponse((String) null);
      Realm.Builder realm_Builder3 = realm_Builder2.setResponse((String) null);
      Realm.Builder realm_Builder4 = realm_Builder1.parseWWWAuthenticateHeader("");
      Realm.Builder realm_Builder5 = realm_Builder3.setRealmName((String) null);
      realm_Builder1.setAlgorithm(">rjkt@/v");
      Realm realm0 = realm_Builder4.build();
      realm0.getUri();
      realm_Builder5.setUri((Uri) null);
      realm_Builder3.setNc((String) null);
      realm_Builder3.setQop("");
      Realm realm1 = realm_Builder5.build();
      realm_Builder2.setNc("");
      realm_Builder2.setNonce("|6~4o'kPHd6}i'?8");
      realm_Builder1.setScheme(realm_AuthScheme0);
      realm1.toString();
      realm1.getNonce();
      realm_Builder5.setQop((String) null);
      realm1.getNc();
      realm1.getPassword();
      realm1.getPrincipal();
      realm_Builder5.setUsePreemptiveAuth(true);
      realm1.getRealmName();
      realm1.getResponse();
      realm1.isUseAbsoluteURI();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("qop", "qop");
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("qop");
      Realm.Builder realm_Builder2 = realm_Builder1.setNc("qop");
      Realm.Builder realm_Builder3 = realm_Builder2.setOpaque("qop");
      Realm.Builder realm_Builder4 = realm_Builder3.setAlgorithm("qop");
      Realm.Builder realm_Builder5 = realm_Builder4.setMethodName("");
      realm_Builder5.setNonce("");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(", response='", ", response='");
      Realm.Builder realm_Builder1 = realm_Builder0.setNonce("ZP;%GWJqTt\f#z&kw_");
      Realm.Builder realm_Builder2 = realm_Builder1.parseProxyAuthenticateHeader("ZP;%GWJqTt\f#z&kw_");
      Realm.Builder realm_Builder3 = realm_Builder2.setMethodName("ZP;%GWJqTt\f#z&kw_");
      Realm.Builder realm_Builder4 = realm_Builder3.setOpaque("ZP;%GWJqTt\f#z&kw_");
      realm_Builder3.setRealmName("ZP;%GWJqTt\f#z&kw_");
      Realm realm0 = realm_Builder4.build();
      realm_Builder3.parseWWWAuthenticateHeader("ZP;%GWJqTt\f#z&kw_");
      realm0.getNonce();
      realm0.getNc();
      Realm.Builder realm_Builder5 = realm_Builder4.setRealmName("ZP;%GWJqTt\f#z&kw_");
      realm0.toString();
      Realm realm1 = realm_Builder5.build();
      realm1.getUri();
      realm_Builder4.setUri((Uri) null);
      realm0.getQop();
      realm0.getScheme();
      realm0.getScheme();
      realm0.getRealmName();
      realm0.getPassword();
      realm0.getNtlmHost();
      realm_Builder3.build();
      // Undeclared exception!
      try { 
        Realm.AuthScheme.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.asynchttpclient.Realm.AuthScheme.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("xVaPN><", "\"t2T=");
      Realm.Builder realm_Builder1 = realm_Builder0.setUseAbsoluteURI(false);
      Realm.Builder realm_Builder2 = realm_Builder1.setAlgorithm("");
      Realm.Builder realm_Builder3 = realm_Builder2.setNc("b')ArbR;L");
      Realm.Builder realm_Builder4 = realm_Builder0.parseProxyAuthenticateHeader("");
      Realm.Builder realm_Builder5 = realm_Builder4.setUsePreemptiveAuth(true);
      Realm realm0 = realm_Builder5.build();
      realm_Builder0.setOpaque("b')ArbR;L");
      realm_Builder3.setNonce("ws");
      realm0.getUri();
      Charset charset0 = realm0.getCharset();
      realm_Builder3.setCharset(charset0);
      realm_Builder3.setUri((Uri) null);
      Realm.Builder realm_Builder6 = realm_Builder3.setOmitQuery(false);
      Realm realm1 = realm_Builder6.build();
      Charset charset1 = realm1.getCharset();
      Realm.Builder realm_Builder7 = realm_Builder6.setCharset(charset1);
      realm_Builder0.setNtlmDomain("https");
      realm_Builder7.setNtlmHost("");
      realm1.toString();
      realm_Builder7.setOpaque("%J@m");
      realm1.getPrincipal();
      realm0.getAlgorithm();
      realm_Builder1.setMethodName("b')ArbR;L");
      realm_Builder1.setRealmName("ws");
      realm0.getAlgorithm();
      realm0.toString();
      realm_Builder5.setAlgorithm("ws");
      realm_Builder5.setNtlmDomain((String) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("|?M$(@}J,=vL1j,7", "|?M$(@}J,=vL1j,7");
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("|?M$(@}J,=vL1j,7");
      Realm realm0 = realm_Builder1.build();
      realm0.getQop();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("*VJ", "ws");
      realm_Builder0.setMethodName("*VJ");
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("");
      Realm.Builder realm_Builder2 = realm_Builder1.setAlgorithm("*VJ");
      Realm.Builder realm_Builder3 = realm_Builder2.setMethodName("d_xQ(o");
      Realm.Builder realm_Builder4 = realm_Builder3.setUsePreemptiveAuth(false);
      realm_Builder3.setNonce("");
      realm_Builder3.parseWWWAuthenticateHeader("*VJ");
      realm_Builder3.setOmitQuery(false);
      realm_Builder4.setResponse("");
      realm_Builder2.setUseAbsoluteURI(true);
      Realm realm0 = realm_Builder4.build();
      realm0.getUri();
      realm_Builder4.setResponse((String) null);
      realm_Builder1.setUri((Uri) null);
      realm_Builder0.setUsePreemptiveAuth(false);
      realm0.toString();
      Realm.Builder realm_Builder5 = realm_Builder4.parseProxyAuthenticateHeader("");
      realm0.isOmitQuery();
      realm_Builder5.parseProxyAuthenticateHeader("");
      realm0.getOpaque();
      realm_Builder1.setUseAbsoluteURI(false);
      realm0.getAlgorithm();
      realm0.getAlgorithm();
      realm_Builder5.setUsePreemptiveAuth(true);
      realm0.getUri();
      realm0.getUri();
      realm0.isUseAbsoluteURI();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "http");
      Realm.Builder realm_Builder1 = realm_Builder0.setOpaque("e#S8RU5,Qun>Q]9VJ");
      Realm.Builder realm_Builder2 = realm_Builder1.setUseAbsoluteURI(true);
      Realm.Builder realm_Builder3 = realm_Builder2.setNonce("http");
      realm_Builder0.setResponse("");
      realm_Builder2.parseWWWAuthenticateHeader("@$'Q6Q");
      Realm.Builder realm_Builder4 = realm_Builder3.setMethodName("");
      realm_Builder4.setNtlmDomain("@$'Q6Q");
      Realm.Builder realm_Builder5 = realm_Builder4.setAlgorithm("");
      Realm.Builder realm_Builder6 = realm_Builder5.parseWWWAuthenticateHeader("scheme");
      realm_Builder5.setOpaque("}NUY>$6R,9h`");
      Realm realm0 = realm_Builder2.build();
      realm0.getUri();
      realm_Builder1.setRealmName("http");
      realm0.getResponse();
      realm_Builder6.setQop("wss");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("s+5mXv", "s+5mXv");
      Realm.Builder realm_Builder1 = realm_Builder0.setNc("s+5mXv");
      realm_Builder1.setUsePreemptiveAuth(false);
      realm_Builder0.parseProxyAuthenticateHeader("s+5mXv");
      Realm.Builder realm_Builder2 = realm_Builder1.setOmitQuery(true);
      realm_Builder2.setNtlmDomain("Z6\"M#z8[d");
      realm_Builder2.setNonce("s+5mXv");
      realm_Builder2.setNonce("");
      realm_Builder1.setQop("");
      Realm.Builder realm_Builder3 = new Realm.Builder("s+5mXv", "s+5mXv");
      Realm realm0 = realm_Builder2.build();
      realm0.getNtlmDomain();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "");
      realm_Builder0.parseWWWAuthenticateHeader("");
      Realm realm0 = realm_Builder0.build();
      realm_Builder0.setResponse("");
      realm_Builder0.parseWWWAuthenticateHeader("");
      realm0.getAlgorithm();
      realm0.isUsePreemptiveAuth();
      realm0.getAlgorithm();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("T]<M$v~3Z27?+z7u8", "g!\"AK3:Q|lcd{Iaf");
      Realm.Builder realm_Builder1 = realm_Builder0.setNtlmDomain("HO)czu.(7w{");
      Realm.Builder realm_Builder2 = realm_Builder1.setNc("?`TYc5)O(");
      Realm.Builder realm_Builder3 = realm_Builder2.setAlgorithm("HO)czu.(7w{");
      realm_Builder0.setUseAbsoluteURI(false);
      Realm.Builder realm_Builder4 = realm_Builder3.setRealmName("HO)czu.(7w{");
      realm_Builder2.setOmitQuery(false);
      realm_Builder1.setOpaque("");
      realm_Builder3.setNonce("/(}?Y?pbnpvRJ4CC]mm");
      // Undeclared exception!
      try { 
        realm_Builder4.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("http.auth.ntlm.domain", "http.auth.ntlm.domain");
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(false);
      Realm.Builder realm_Builder2 = realm_Builder1.parseProxyAuthenticateHeader("dmDU");
      Realm.Builder realm_Builder3 = realm_Builder2.setNtlmHost("dmDU");
      Realm.Builder realm_Builder4 = realm_Builder3.setUsePreemptiveAuth(false);
      Realm.Builder realm_Builder5 = realm_Builder4.setAlgorithm("http.auth.ntlm.domain");
      realm_Builder0.setUsePreemptiveAuth(false);
      realm_Builder5.parseWWWAuthenticateHeader("http.auth.ntlm.domain");
      realm_Builder5.setMethodName("");
      realm_Builder1.setAlgorithm("G#tk'm");
      realm_Builder1.setResponse("ws");
      realm_Builder4.setRealmName("EDy[6z_jj^T.");
      realm_Builder5.parseWWWAuthenticateHeader("");
      Realm.Builder realm_Builder6 = realm_Builder3.setUsePreemptiveAuth(false);
      Realm realm0 = realm_Builder6.build();
      realm0.getCnonce();
      Realm.Builder realm_Builder7 = realm_Builder0.setNc((String) null);
      realm_Builder7.setNtlmDomain("");
      realm0.toString();
      realm_Builder7.setNc("ar&");
      realm_Builder3.setNonce((String) null);
      Charset charset0 = realm0.getCharset();
      realm_Builder6.setCharset(charset0);
      realm0.getResponse();
      realm0.isUsePreemptiveAuth();
      realm0.getCharset();
      realm0.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("=Q=", "=Q=");
      Realm.Builder realm_Builder1 = realm_Builder0.setUseAbsoluteURI(true);
      realm_Builder1.parseWWWAuthenticateHeader("V&5<0|9v>G0,v#@");
      realm_Builder1.setQop("^jxfzTlsbuI%q");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      realm_Builder1.setQop("true");
      Realm.Builder realm_Builder2 = realm_Builder1.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder3 = realm_Builder2.parseProxyAuthenticateHeader("%rLzI*LeKbi}pYxS-@");
      realm_Builder3.setNc("%rLzI*LeKbi}pYxS-@");
      Realm.Builder realm_Builder4 = realm_Builder3.setNc("=Q=");
      Realm realm0 = realm_Builder4.build();
      realm0.toString();
      realm0.getCnonce();
      realm_Builder4.parseProxyAuthenticateHeader("Realm{principal='=Q=', scheme=BASIC, realmName='null', nonce='null', algorithm='null', response='null', qop='true', nc='=Q=', cnonce='null', uri='null', useAbsoluteURI='true', omitQuery='false'}");
      realm0.toString();
      realm0.getCnonce();
      realm0.toString();
      realm0.getPrincipal();
      realm0.getPassword();
      realm0.getQop();
      realm0.getScheme();
      realm0.getCnonce();
      realm0.getPrincipal();
      // Undeclared exception!
      try { 
        Realm.AuthScheme.valueOf("k1q!UNvk$0-k:F>Y(c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.asynchttpclient.Realm.AuthScheme.k1q!UNvk$0-k:F>Y(c
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("*VJ", "ws");
      realm_Builder0.setMethodName("*VJ");
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("");
      Realm.Builder realm_Builder2 = realm_Builder1.setAlgorithm("*VJ");
      Realm.Builder realm_Builder3 = realm_Builder2.setMethodName("d_xQ(o");
      Realm.Builder realm_Builder4 = realm_Builder3.setUsePreemptiveAuth(false);
      realm_Builder2.setOmitQuery(false);
      realm_Builder3.parseWWWAuthenticateHeader("*VJ");
      realm_Builder3.setOmitQuery(false);
      realm_Builder4.setResponse("");
      realm_Builder3.setRealmName("d_xQ(o");
      Realm realm0 = realm_Builder4.build();
      realm0.getUri();
      realm_Builder4.setResponse("*VJ");
      realm_Builder1.setUri((Uri) null);
      realm_Builder0.setUsePreemptiveAuth(false);
      realm0.toString();
      Realm.Builder realm_Builder5 = realm_Builder4.parseProxyAuthenticateHeader("");
      realm0.isOmitQuery();
      realm0.getOpaque();
      realm_Builder1.setUseAbsoluteURI(false);
      realm0.getAlgorithm();
      realm0.getNonce();
      realm_Builder5.setUsePreemptiveAuth(true);
      realm0.getUri();
      realm0.getUri();
      realm0.isUseAbsoluteURI();
      realm0.getScheme();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "");
      Realm.Builder realm_Builder1 = realm_Builder0.parseProxyAuthenticateHeader("");
      Realm.Builder realm_Builder2 = realm_Builder1.setQop("://");
      Realm.Builder realm_Builder3 = realm_Builder2.setOpaque("");
      Realm.Builder realm_Builder4 = realm_Builder3.setNonce(", algorithm='");
      Realm.Builder realm_Builder5 = realm_Builder4.setNc("");
      realm_Builder0.setUsePreemptiveAuth(false);
      realm_Builder5.setNtlmHost((String) null);
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.KERBEROS;
      Realm.Builder realm_Builder6 = realm_Builder5.setScheme(realm_AuthScheme0);
      realm_Builder6.parseWWWAuthenticateHeader(", algorithm='");
      realm_Builder6.setOpaque("scheme");
      realm_Builder6.setAlgorithm(", algorithm='");
      realm_Builder0.setNc("://");
      realm_Builder1.setUsePreemptiveAuth(false);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("http", "(;ypf-~u9hL2l");
      Realm.Builder realm_Builder1 = realm_Builder0.setAlgorithm("(;ypf-~u9hL2l");
      realm_Builder1.setQop("(;ypf-~u9hL2l");
      Realm.Builder realm_Builder2 = realm_Builder1.parseWWWAuthenticateHeader((String) null);
      Realm realm0 = realm_Builder2.build();
      realm0.getUri();
      realm_Builder1.setUri((Uri) null);
      realm0.getUri();
      realm_Builder2.setOpaque("e:_eI~:*=`");
      Realm.Builder realm_Builder3 = realm_Builder2.setUri((Uri) null);
      realm_Builder2.setQop("QYiAiP-;OCj!Dhm2m.8");
      Realm.Builder realm_Builder4 = realm_Builder3.setResponse("https");
      realm_Builder4.setUri((Uri) null);
      Realm realm1 = realm_Builder3.build();
      Charset charset0 = realm1.getCharset();
      realm_Builder2.setQop("");
      realm_Builder4.setCharset(charset0);
      realm_Builder4.setNonce("http");
      realm0.getScheme();
      realm0.getNc();
      realm1.getPrincipal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", "");
      realm_Builder0.parseWWWAuthenticateHeader("");
      Realm realm0 = realm_Builder0.build();
      realm_Builder0.setResponse("");
      realm_Builder0.parseWWWAuthenticateHeader("");
      realm0.getPrincipal();
      realm0.isUsePreemptiveAuth();
      realm0.getPassword();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("NTLM", "");
      assertNotNull(realm_Builder0);
      
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("");
      assertNotNull(realm_Builder1);
      assertSame(realm_Builder0, realm_Builder1);
      assertSame(realm_Builder1, realm_Builder0);
      
      Realm realm0 = realm_Builder0.build();
      assertNotNull(realm0);
      assertSame(realm_Builder0, realm_Builder1);
      assertNull(realm0.getAlgorithm());
      assertNull(realm0.getResponse());
      assertEquals("localhost", realm0.getNtlmHost());
      assertNull(realm0.getNonce());
      assertEquals("00000001", realm0.getNc());
      assertNull(realm0.getNtlmDomain());
      assertEquals("", realm0.getPassword());
      assertNull(realm0.getQop());
      assertFalse(realm0.isUseAbsoluteURI());
      assertNull(realm0.getRealmName());
      assertFalse(realm0.isOmitQuery());
      assertNull(realm0.getOpaque());
      assertEquals(Realm.AuthScheme.BASIC, realm0.getScheme());
      assertEquals("NTLM", realm0.getPrincipal());
      assertFalse(realm0.isUsePreemptiveAuth());
      assertNull(realm0.getCnonce());
      
      Uri uri0 = realm0.getUri();
      assertNull(uri0);
      assertSame(realm_Builder0, realm_Builder1);
      assertNull(realm0.getAlgorithm());
      assertNull(realm0.getResponse());
      assertEquals("localhost", realm0.getNtlmHost());
      assertNull(realm0.getNonce());
      assertEquals("00000001", realm0.getNc());
      assertNull(realm0.getNtlmDomain());
      assertEquals("", realm0.getPassword());
      assertNull(realm0.getQop());
      assertFalse(realm0.isUseAbsoluteURI());
      assertNull(realm0.getRealmName());
      assertFalse(realm0.isOmitQuery());
      assertNull(realm0.getOpaque());
      assertEquals(Realm.AuthScheme.BASIC, realm0.getScheme());
      assertEquals("NTLM", realm0.getPrincipal());
      assertFalse(realm0.isUsePreemptiveAuth());
      assertNull(realm0.getCnonce());
      
      Realm.Builder realm_Builder2 = realm_Builder1.setUri((Uri) null);
      assertNotNull(realm_Builder2);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder1);
      assertSame(realm_Builder1, realm_Builder0);
      assertSame(realm_Builder1, realm_Builder2);
      assertSame(realm_Builder2, realm_Builder1);
      assertSame(realm_Builder2, realm_Builder0);
      
      Realm.Builder realm_Builder3 = realm_Builder0.setAlgorithm(",;>cheme=");
      assertNotNull(realm_Builder3);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder1);
      assertSame(realm_Builder3, realm_Builder2);
      assertSame(realm_Builder3, realm_Builder0);
      assertSame(realm_Builder3, realm_Builder1);
      
      Realm.Builder realm_Builder4 = realm_Builder1.setNc(", nonce='");
      assertNotNull(realm_Builder4);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder1);
      assertSame(realm_Builder1, realm_Builder3);
      assertSame(realm_Builder1, realm_Builder0);
      assertSame(realm_Builder1, realm_Builder4);
      assertSame(realm_Builder1, realm_Builder2);
      assertSame(realm_Builder4, realm_Builder3);
      assertSame(realm_Builder4, realm_Builder2);
      assertSame(realm_Builder4, realm_Builder1);
      assertSame(realm_Builder4, realm_Builder0);
      
      Realm.Builder realm_Builder5 = realm_Builder1.setNonce("?A.");
      assertNotNull(realm_Builder5);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder5);
      assertSame(realm_Builder0, realm_Builder1);
      assertSame(realm_Builder1, realm_Builder3);
      assertSame(realm_Builder1, realm_Builder5);
      assertSame(realm_Builder1, realm_Builder0);
      assertSame(realm_Builder1, realm_Builder4);
      assertSame(realm_Builder1, realm_Builder2);
      assertSame(realm_Builder5, realm_Builder4);
      assertSame(realm_Builder5, realm_Builder2);
      assertSame(realm_Builder5, realm_Builder3);
      assertSame(realm_Builder5, realm_Builder0);
      assertSame(realm_Builder5, realm_Builder1);
      
      Realm realm1 = realm_Builder5.build();
      assertNotNull(realm1);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder5);
      assertSame(realm_Builder0, realm_Builder1);
      assertSame(realm_Builder1, realm_Builder3);
      assertSame(realm_Builder1, realm_Builder5);
      assertSame(realm_Builder1, realm_Builder0);
      assertSame(realm_Builder1, realm_Builder4);
      assertSame(realm_Builder1, realm_Builder2);
      assertSame(realm_Builder5, realm_Builder4);
      assertSame(realm_Builder5, realm_Builder2);
      assertSame(realm_Builder5, realm_Builder3);
      assertSame(realm_Builder5, realm_Builder0);
      assertSame(realm_Builder5, realm_Builder1);
      assertNotSame(realm1, realm0);
      assertFalse(realm1.equals((Object)realm0));
      assertFalse(realm1.isUseAbsoluteURI());
      assertEquals("2e715fcba251b7c89a6eb8f10f36b7fe", realm1.getCnonce());
      assertNull(realm1.getResponse());
      assertNull(realm1.getQop());
      assertEquals(",;>cheme=", realm1.getAlgorithm());
      assertEquals("NTLM", realm1.getPrincipal());
      assertEquals("localhost", realm1.getNtlmHost());
      assertNull(realm1.getRealmName());
      assertNull(realm1.getOpaque());
      assertEquals("?A.", realm1.getNonce());
      assertEquals(Realm.AuthScheme.BASIC, realm1.getScheme());
      assertNull(realm1.getNtlmDomain());
      assertEquals(", nonce='", realm1.getNc());
      assertEquals("", realm1.getPassword());
      assertFalse(realm1.isUsePreemptiveAuth());
      assertFalse(realm1.isOmitQuery());
      
      String string0 = realm0.toString();
      assertNotNull(string0);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder5);
      assertSame(realm_Builder0, realm_Builder1);
      assertNotSame(realm0, realm1);
      assertFalse(realm0.equals((Object)realm1));
      assertEquals("Realm{principal='NTLM', scheme=BASIC, realmName='null', nonce='null', algorithm='null', response='null', qop='null', nc='00000001', cnonce='null', uri='null', useAbsoluteURI='false', omitQuery='false'}", string0);
      assertNull(realm0.getAlgorithm());
      assertNull(realm0.getResponse());
      assertEquals("localhost", realm0.getNtlmHost());
      assertNull(realm0.getNonce());
      assertEquals("00000001", realm0.getNc());
      assertNull(realm0.getNtlmDomain());
      assertEquals("", realm0.getPassword());
      assertNull(realm0.getQop());
      assertFalse(realm0.isUseAbsoluteURI());
      assertNull(realm0.getRealmName());
      assertFalse(realm0.isOmitQuery());
      assertNull(realm0.getOpaque());
      assertEquals(Realm.AuthScheme.BASIC, realm0.getScheme());
      assertEquals("NTLM", realm0.getPrincipal());
      assertFalse(realm0.isUsePreemptiveAuth());
      assertNull(realm0.getCnonce());
      
      String string1 = realm1.toString();
      assertNotNull(string1);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder5);
      assertSame(realm_Builder0, realm_Builder1);
      assertSame(realm_Builder1, realm_Builder3);
      assertSame(realm_Builder1, realm_Builder5);
      assertSame(realm_Builder1, realm_Builder0);
      assertSame(realm_Builder1, realm_Builder4);
      assertSame(realm_Builder1, realm_Builder2);
      assertSame(realm_Builder5, realm_Builder4);
      assertSame(realm_Builder5, realm_Builder2);
      assertSame(realm_Builder5, realm_Builder3);
      assertSame(realm_Builder5, realm_Builder0);
      assertSame(realm_Builder5, realm_Builder1);
      assertNotSame(realm1, realm0);
      assertFalse(realm1.equals((Object)realm0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Realm{principal='NTLM', scheme=BASIC, realmName='null', nonce='?A.', algorithm=',;>cheme=', response='null', qop='null', nc=', nonce='', cnonce='2e715fcba251b7c89a6eb8f10f36b7fe', uri='null', useAbsoluteURI='false', omitQuery='false'}", string1);
      assertFalse(realm1.isUseAbsoluteURI());
      assertEquals("2e715fcba251b7c89a6eb8f10f36b7fe", realm1.getCnonce());
      assertNull(realm1.getResponse());
      assertNull(realm1.getQop());
      assertEquals(",;>cheme=", realm1.getAlgorithm());
      assertEquals("NTLM", realm1.getPrincipal());
      assertEquals("localhost", realm1.getNtlmHost());
      assertNull(realm1.getRealmName());
      assertNull(realm1.getOpaque());
      assertEquals("?A.", realm1.getNonce());
      assertEquals(Realm.AuthScheme.BASIC, realm1.getScheme());
      assertNull(realm1.getNtlmDomain());
      assertEquals(", nonce='", realm1.getNc());
      assertEquals("", realm1.getPassword());
      assertFalse(realm1.isUsePreemptiveAuth());
      assertFalse(realm1.isOmitQuery());
      
      String string2 = realm1.getNtlmHost();
      assertNotNull(string2);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder5);
      assertSame(realm_Builder0, realm_Builder1);
      assertSame(realm_Builder1, realm_Builder3);
      assertSame(realm_Builder1, realm_Builder5);
      assertSame(realm_Builder1, realm_Builder0);
      assertSame(realm_Builder1, realm_Builder4);
      assertSame(realm_Builder1, realm_Builder2);
      assertSame(realm_Builder5, realm_Builder4);
      assertSame(realm_Builder5, realm_Builder2);
      assertSame(realm_Builder5, realm_Builder3);
      assertSame(realm_Builder5, realm_Builder0);
      assertSame(realm_Builder5, realm_Builder1);
      assertNotSame(realm1, realm0);
      assertFalse(realm1.equals((Object)realm0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("localhost", string2);
      assertFalse(realm1.isUseAbsoluteURI());
      assertEquals("2e715fcba251b7c89a6eb8f10f36b7fe", realm1.getCnonce());
      assertNull(realm1.getResponse());
      assertNull(realm1.getQop());
      assertEquals(",;>cheme=", realm1.getAlgorithm());
      assertEquals("NTLM", realm1.getPrincipal());
      assertEquals("localhost", realm1.getNtlmHost());
      assertNull(realm1.getRealmName());
      assertNull(realm1.getOpaque());
      assertEquals("?A.", realm1.getNonce());
      assertEquals(Realm.AuthScheme.BASIC, realm1.getScheme());
      assertNull(realm1.getNtlmDomain());
      assertEquals(", nonce='", realm1.getNc());
      assertEquals("", realm1.getPassword());
      assertFalse(realm1.isUsePreemptiveAuth());
      assertFalse(realm1.isOmitQuery());
      
      Realm.Builder realm_Builder6 = realm_Builder0.setResponse("localhost");
      assertNotNull(realm_Builder6);
      assertSame(realm_Builder0, realm_Builder6);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder5);
      assertSame(realm_Builder0, realm_Builder1);
      assertSame(realm_Builder6, realm_Builder0);
      assertSame(realm_Builder6, realm_Builder1);
      assertSame(realm_Builder6, realm_Builder5);
      assertSame(realm_Builder6, realm_Builder3);
      assertSame(realm_Builder6, realm_Builder4);
      assertSame(realm_Builder6, realm_Builder2);
      
      String string3 = realm1.getNtlmDomain();
      assertNull(string3);
      assertSame(realm_Builder0, realm_Builder6);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder5);
      assertSame(realm_Builder0, realm_Builder1);
      assertSame(realm_Builder1, realm_Builder3);
      assertSame(realm_Builder1, realm_Builder5);
      assertSame(realm_Builder1, realm_Builder0);
      assertSame(realm_Builder1, realm_Builder6);
      assertSame(realm_Builder1, realm_Builder4);
      assertSame(realm_Builder1, realm_Builder2);
      assertSame(realm_Builder5, realm_Builder4);
      assertSame(realm_Builder5, realm_Builder2);
      assertSame(realm_Builder5, realm_Builder3);
      assertSame(realm_Builder5, realm_Builder0);
      assertSame(realm_Builder5, realm_Builder1);
      assertSame(realm_Builder5, realm_Builder6);
      assertNotSame(realm1, realm0);
      assertFalse(realm1.equals((Object)realm0));
      assertFalse(realm1.isUseAbsoluteURI());
      assertEquals("2e715fcba251b7c89a6eb8f10f36b7fe", realm1.getCnonce());
      assertNull(realm1.getResponse());
      assertNull(realm1.getQop());
      assertEquals(",;>cheme=", realm1.getAlgorithm());
      assertEquals("NTLM", realm1.getPrincipal());
      assertEquals("localhost", realm1.getNtlmHost());
      assertNull(realm1.getRealmName());
      assertNull(realm1.getOpaque());
      assertEquals("?A.", realm1.getNonce());
      assertEquals(Realm.AuthScheme.BASIC, realm1.getScheme());
      assertNull(realm1.getNtlmDomain());
      assertEquals(", nonce='", realm1.getNc());
      assertEquals("", realm1.getPassword());
      assertFalse(realm1.isUsePreemptiveAuth());
      assertFalse(realm1.isOmitQuery());
      
      String string4 = realm1.getRealmName();
      assertNull(string4);
      assertSame(realm_Builder0, realm_Builder6);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder5);
      assertSame(realm_Builder0, realm_Builder1);
      assertSame(realm_Builder1, realm_Builder3);
      assertSame(realm_Builder1, realm_Builder5);
      assertSame(realm_Builder1, realm_Builder0);
      assertSame(realm_Builder1, realm_Builder6);
      assertSame(realm_Builder1, realm_Builder4);
      assertSame(realm_Builder1, realm_Builder2);
      assertSame(realm_Builder5, realm_Builder4);
      assertSame(realm_Builder5, realm_Builder2);
      assertSame(realm_Builder5, realm_Builder3);
      assertSame(realm_Builder5, realm_Builder0);
      assertSame(realm_Builder5, realm_Builder1);
      assertSame(realm_Builder5, realm_Builder6);
      assertNotSame(realm1, realm0);
      assertFalse(realm1.equals((Object)realm0));
      assertFalse(realm1.isUseAbsoluteURI());
      assertEquals("2e715fcba251b7c89a6eb8f10f36b7fe", realm1.getCnonce());
      assertNull(realm1.getResponse());
      assertNull(realm1.getQop());
      assertEquals(",;>cheme=", realm1.getAlgorithm());
      assertEquals("NTLM", realm1.getPrincipal());
      assertEquals("localhost", realm1.getNtlmHost());
      assertNull(realm1.getRealmName());
      assertNull(realm1.getOpaque());
      assertEquals("?A.", realm1.getNonce());
      assertEquals(Realm.AuthScheme.BASIC, realm1.getScheme());
      assertNull(realm1.getNtlmDomain());
      assertEquals(", nonce='", realm1.getNc());
      assertEquals("", realm1.getPassword());
      assertFalse(realm1.isUsePreemptiveAuth());
      assertFalse(realm1.isOmitQuery());
      
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      Realm.Builder realm_Builder7 = realm_Builder6.setScheme(realm_AuthScheme0);
      assertNotNull(realm_Builder7);
      assertSame(realm_Builder7, realm_Builder0);
      assertSame(realm_Builder7, realm_Builder2);
      assertSame(realm_Builder7, realm_Builder5);
      assertSame(realm_Builder7, realm_Builder6);
      assertSame(realm_Builder7, realm_Builder1);
      assertSame(realm_Builder7, realm_Builder4);
      assertSame(realm_Builder7, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder6);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder7);
      assertSame(realm_Builder0, realm_Builder5);
      assertSame(realm_Builder0, realm_Builder1);
      assertSame(realm_Builder6, realm_Builder7);
      assertSame(realm_Builder6, realm_Builder0);
      assertSame(realm_Builder6, realm_Builder1);
      assertSame(realm_Builder6, realm_Builder5);
      assertSame(realm_Builder6, realm_Builder3);
      assertSame(realm_Builder6, realm_Builder4);
      assertSame(realm_Builder6, realm_Builder2);
      
      String string5 = realm0.getNtlmDomain();
      assertNull(string5);
      assertSame(realm_Builder0, realm_Builder6);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder7);
      assertSame(realm_Builder0, realm_Builder5);
      assertSame(realm_Builder0, realm_Builder1);
      assertNotSame(realm0, realm1);
      assertFalse(realm0.equals((Object)realm1));
      assertNull(realm0.getAlgorithm());
      assertNull(realm0.getResponse());
      assertEquals("localhost", realm0.getNtlmHost());
      assertNull(realm0.getNonce());
      assertEquals("00000001", realm0.getNc());
      assertNull(realm0.getNtlmDomain());
      assertEquals("", realm0.getPassword());
      assertNull(realm0.getQop());
      assertFalse(realm0.isUseAbsoluteURI());
      assertNull(realm0.getRealmName());
      assertFalse(realm0.isOmitQuery());
      assertNull(realm0.getOpaque());
      assertEquals(Realm.AuthScheme.BASIC, realm0.getScheme());
      assertEquals("NTLM", realm0.getPrincipal());
      assertFalse(realm0.isUsePreemptiveAuth());
      assertNull(realm0.getCnonce());
      
      String string6 = realm0.getOpaque();
      assertNull(string6);
      assertSame(realm_Builder0, realm_Builder6);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder7);
      assertSame(realm_Builder0, realm_Builder5);
      assertSame(realm_Builder0, realm_Builder1);
      assertNotSame(realm0, realm1);
      assertFalse(realm0.equals((Object)realm1));
      assertNull(realm0.getAlgorithm());
      assertNull(realm0.getResponse());
      assertEquals("localhost", realm0.getNtlmHost());
      assertNull(realm0.getNonce());
      assertEquals("00000001", realm0.getNc());
      assertNull(realm0.getNtlmDomain());
      assertEquals("", realm0.getPassword());
      assertNull(realm0.getQop());
      assertFalse(realm0.isUseAbsoluteURI());
      assertNull(realm0.getRealmName());
      assertFalse(realm0.isOmitQuery());
      assertNull(realm0.getOpaque());
      assertEquals(Realm.AuthScheme.BASIC, realm0.getScheme());
      assertEquals("NTLM", realm0.getPrincipal());
      assertFalse(realm0.isUsePreemptiveAuth());
      assertNull(realm0.getCnonce());
      
      Realm.Builder realm_Builder8 = realm_Builder6.parseWWWAuthenticateHeader("Realm{principal='NTLM', scheme=BASIC, realmName='null', nonce='null', algorithm='null', response='null', qop='null', nc='00000001', cnonce='null', uri='null', useAbsoluteURI='false', omitQuery='false'}");
      assertNotNull(realm_Builder8);
      assertSame(realm_Builder0, realm_Builder6);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder8);
      assertSame(realm_Builder0, realm_Builder7);
      assertSame(realm_Builder0, realm_Builder5);
      assertSame(realm_Builder0, realm_Builder1);
      assertSame(realm_Builder8, realm_Builder1);
      assertSame(realm_Builder8, realm_Builder3);
      assertSame(realm_Builder8, realm_Builder7);
      assertSame(realm_Builder8, realm_Builder0);
      assertSame(realm_Builder8, realm_Builder5);
      assertSame(realm_Builder8, realm_Builder6);
      assertSame(realm_Builder8, realm_Builder2);
      assertSame(realm_Builder8, realm_Builder4);
      assertSame(realm_Builder6, realm_Builder7);
      assertSame(realm_Builder6, realm_Builder0);
      assertSame(realm_Builder6, realm_Builder1);
      assertSame(realm_Builder6, realm_Builder5);
      assertSame(realm_Builder6, realm_Builder3);
      assertSame(realm_Builder6, realm_Builder4);
      assertSame(realm_Builder6, realm_Builder2);
      assertSame(realm_Builder6, realm_Builder8);
      
      Realm.AuthScheme realm_AuthScheme1 = Realm.AuthScheme.KERBEROS;
      Realm.Builder realm_Builder9 = realm_Builder5.setScheme(realm_AuthScheme1);
      assertNotNull(realm_Builder9);
      assertSame(realm_Builder0, realm_Builder6);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder8);
      assertSame(realm_Builder0, realm_Builder7);
      assertSame(realm_Builder0, realm_Builder5);
      assertSame(realm_Builder0, realm_Builder9);
      assertSame(realm_Builder0, realm_Builder1);
      assertSame(realm_Builder1, realm_Builder9);
      assertSame(realm_Builder1, realm_Builder3);
      assertSame(realm_Builder1, realm_Builder7);
      assertSame(realm_Builder1, realm_Builder5);
      assertSame(realm_Builder1, realm_Builder0);
      assertSame(realm_Builder1, realm_Builder6);
      assertSame(realm_Builder1, realm_Builder4);
      assertSame(realm_Builder1, realm_Builder2);
      assertSame(realm_Builder1, realm_Builder8);
      assertNotSame(realm_AuthScheme1, realm_AuthScheme0);
      assertSame(realm_Builder9, realm_Builder1);
      assertSame(realm_Builder9, realm_Builder3);
      assertSame(realm_Builder9, realm_Builder7);
      assertSame(realm_Builder9, realm_Builder0);
      assertSame(realm_Builder9, realm_Builder5);
      assertSame(realm_Builder9, realm_Builder6);
      assertSame(realm_Builder9, realm_Builder8);
      assertSame(realm_Builder9, realm_Builder2);
      assertSame(realm_Builder9, realm_Builder4);
      assertSame(realm_Builder5, realm_Builder4);
      assertSame(realm_Builder5, realm_Builder7);
      assertSame(realm_Builder5, realm_Builder2);
      assertSame(realm_Builder5, realm_Builder3);
      assertSame(realm_Builder5, realm_Builder0);
      assertSame(realm_Builder5, realm_Builder9);
      assertSame(realm_Builder5, realm_Builder1);
      assertSame(realm_Builder5, realm_Builder8);
      assertSame(realm_Builder5, realm_Builder6);
      assertFalse(realm_AuthScheme1.equals((Object)realm_AuthScheme0));
      
      Realm.Builder realm_Builder10 = realm_Builder6.setAlgorithm("wss");
      assertNotNull(realm_Builder10);
      assertSame(realm_Builder0, realm_Builder6);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder8);
      assertSame(realm_Builder0, realm_Builder10);
      assertSame(realm_Builder0, realm_Builder7);
      assertSame(realm_Builder0, realm_Builder5);
      assertSame(realm_Builder0, realm_Builder9);
      assertSame(realm_Builder0, realm_Builder1);
      assertSame(realm_Builder10, realm_Builder0);
      assertSame(realm_Builder10, realm_Builder2);
      assertSame(realm_Builder10, realm_Builder8);
      assertSame(realm_Builder10, realm_Builder7);
      assertSame(realm_Builder10, realm_Builder9);
      assertSame(realm_Builder10, realm_Builder6);
      assertSame(realm_Builder10, realm_Builder4);
      assertSame(realm_Builder10, realm_Builder1);
      assertSame(realm_Builder10, realm_Builder3);
      assertSame(realm_Builder10, realm_Builder5);
      assertSame(realm_Builder6, realm_Builder10);
      assertSame(realm_Builder6, realm_Builder7);
      assertSame(realm_Builder6, realm_Builder9);
      assertSame(realm_Builder6, realm_Builder0);
      assertSame(realm_Builder6, realm_Builder1);
      assertSame(realm_Builder6, realm_Builder5);
      assertSame(realm_Builder6, realm_Builder3);
      assertSame(realm_Builder6, realm_Builder4);
      assertSame(realm_Builder6, realm_Builder2);
      assertSame(realm_Builder6, realm_Builder8);
      
      boolean boolean0 = realm0.isUseAbsoluteURI();
      assertSame(realm_Builder0, realm_Builder6);
      assertSame(realm_Builder0, realm_Builder3);
      assertSame(realm_Builder0, realm_Builder4);
      assertSame(realm_Builder0, realm_Builder2);
      assertSame(realm_Builder0, realm_Builder8);
      assertSame(realm_Builder0, realm_Builder10);
      assertSame(realm_Builder0, realm_Builder7);
      assertSame(realm_Builder0, realm_Builder5);
      assertSame(realm_Builder0, realm_Builder9);
      assertSame(realm_Builder0, realm_Builder1);
      assertNotSame(realm0, realm1);
      assertFalse(realm0.equals((Object)realm1));
      assertFalse(boolean0);
      assertNull(realm0.getAlgorithm());
      assertNull(realm0.getResponse());
      assertEquals("localhost", realm0.getNtlmHost());
      assertNull(realm0.getNonce());
      assertEquals("00000001", realm0.getNc());
      assertNull(realm0.getNtlmDomain());
      assertEquals("", realm0.getPassword());
      assertNull(realm0.getQop());
      assertFalse(realm0.isUseAbsoluteURI());
      assertNull(realm0.getRealmName());
      assertFalse(realm0.isOmitQuery());
      assertNull(realm0.getOpaque());
      assertEquals(Realm.AuthScheme.BASIC, realm0.getScheme());
      assertEquals("NTLM", realm0.getPrincipal());
      assertFalse(realm0.isUsePreemptiveAuth());
      assertNull(realm0.getCnonce());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("NTLM", "NTLM");
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("");
      Realm realm0 = realm_Builder0.build();
      realm0.getUri();
      realm_Builder1.setUri((Uri) null);
      realm_Builder0.setAlgorithm(", scheme=");
      realm_Builder1.setNc(", nonce='");
      Realm.Builder realm_Builder2 = realm_Builder1.setNonce("?A.");
      Realm realm1 = realm_Builder2.build();
      realm1.getResponse();
      realm0.toString();
      String string0 = realm1.toString();
      assertEquals("Realm{principal='NTLM', scheme=BASIC, realmName='null', nonce='?A.', algorithm=', scheme=', response='null', qop='null', nc=', nonce='', cnonce='46771e0091276d484b71c6d5cea68f54', uri='null', useAbsoluteURI='false', omitQuery='false'}", string0);
      
      realm1.getNtlmHost();
      Realm.Builder realm_Builder3 = realm_Builder0.setResponse("un992~v kLL`I");
      realm0.getRealmName();
      realm1.getNtlmDomain();
      realm1.getRealmName();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      realm_Builder3.setScheme(realm_AuthScheme0);
      realm0.getNtlmDomain();
      realm0.getOpaque();
      realm_Builder3.parseWWWAuthenticateHeader("Realm{principal='NTLM', scheme=BASIC, realmName='null', nonce='null', algorithm='null', response='null', qop='null', nc='00000001', cnonce='null', uri='null', useAbsoluteURI='false', omitQuery='false'}");
      Realm.AuthScheme realm_AuthScheme1 = Realm.AuthScheme.KERBEROS;
      realm_Builder2.setScheme(realm_AuthScheme1);
      realm_Builder3.setAlgorithm((String) null);
      realm1.getPrincipal();
      realm0.isUseAbsoluteURI();
      assertFalse(realm0.isUsePreemptiveAuth());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("https", "https");
      Realm.Builder realm_Builder1 = realm_Builder0.setQop("https");
      Realm.Builder realm_Builder2 = realm_Builder1.setOpaque("q/DW^~.");
      realm_Builder2.setNtlmDomain("q/DW^~.");
      Realm.Builder realm_Builder3 = realm_Builder2.setRealmName("q/DW^~.");
      assertSame(realm_Builder1, realm_Builder3);
  }
}
