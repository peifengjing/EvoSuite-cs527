/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 00:55:46 GMT 2017
 */

package org.asynchttpclient.netty.timeout;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.handler.codec.http.HttpRequest;
import io.netty.util.HashedWheelTimer;
import io.netty.util.Timeout;
import io.netty.util.Timer;
import java.util.concurrent.TimeUnit;
import org.asynchttpclient.AsyncHandler;
import org.asynchttpclient.AsyncHttpClientConfig;
import org.asynchttpclient.AsyncHttpClientState;
import org.asynchttpclient.Request;
import org.asynchttpclient.channel.ChannelPoolPartitioning;
import org.asynchttpclient.netty.NettyResponseFuture;
import org.asynchttpclient.netty.channel.ChannelManager;
import org.asynchttpclient.netty.channel.ConnectionSemaphore;
import org.asynchttpclient.netty.request.NettyRequest;
import org.asynchttpclient.netty.request.NettyRequestSender;
import org.asynchttpclient.netty.request.body.NettyBody;
import org.asynchttpclient.netty.timeout.RequestTimeoutTimerTask;
import org.asynchttpclient.netty.timeout.TimeoutsHolder;
import org.asynchttpclient.proxy.ProxyServer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RequestTimeoutTimerTask_ESTest extends RequestTimeoutTimerTask_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(2801, 0, 0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(2801, 0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(false).when(asyncHttpClientConfig0).isUseLaxCookieEncoder();
      ConnectionSemaphore connectionSemaphore0 = ConnectionSemaphore.newConnectionSemaphore(asyncHttpClientConfig0);
      AsyncHttpClientState asyncHttpClientState0 = mock(AsyncHttpClientState.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(asyncHttpClientState0).isClosed();
      NettyRequestSender nettyRequestSender0 = new NettyRequestSender(asyncHttpClientConfig0, (ChannelManager) null, connectionSemaphore0, (Timer) null, asyncHttpClientState0);
      RequestTimeoutTimerTask requestTimeoutTimerTask0 = new RequestTimeoutTimerTask((NettyResponseFuture<?>) null, nettyRequestSender0, (TimeoutsHolder) null, 443);
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Timeout timeout0 = hashedWheelTimer0.newTimeout(requestTimeoutTimerTask0, 443, timeUnit0);
      try { 
        requestTimeoutTimerTask0.run(timeout0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.timeout.RequestTimeoutTimerTask", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncHandler<Integer> asyncHandler0 = (AsyncHandler<Integer>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      HttpRequest httpRequest0 = mock(HttpRequest.class, new ViolatedAssumptionAnswer());
      NettyBody nettyBody0 = mock(NettyBody.class, new ViolatedAssumptionAnswer());
      NettyRequest nettyRequest0 = new NettyRequest(httpRequest0, nettyBody0);
      NettyResponseFuture<Integer> nettyResponseFuture0 = new NettyResponseFuture<Integer>((Request) null, asyncHandler0, nettyRequest0, 4, (ChannelPoolPartitioning) null, (ConnectionSemaphore) null, (ProxyServer) null);
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(asyncHttpClientConfig0).isUseLaxCookieEncoder();
      AsyncHttpClientState asyncHttpClientState0 = mock(AsyncHttpClientState.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(asyncHttpClientState0).isClosed();
      NettyRequestSender nettyRequestSender0 = new NettyRequestSender(asyncHttpClientConfig0, (ChannelManager) null, (ConnectionSemaphore) null, (Timer) null, asyncHttpClientState0);
      RequestTimeoutTimerTask requestTimeoutTimerTask0 = new RequestTimeoutTimerTask(nettyResponseFuture0, nettyRequestSender0, (TimeoutsHolder) null, 683);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer(4, timeUnit0, 2368);
      Timeout timeout0 = hashedWheelTimer0.newTimeout(requestTimeoutTimerTask0, 0L, timeUnit0);
      requestTimeoutTimerTask0.run(timeout0);
      requestTimeoutTimerTask0.run(timeout0);
      assertFalse(timeout0.isCancelled());
  }
}
