/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:19:37 GMT 2017
 */

package org.asynchttpclient.netty.request.body;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.channel.FileRegion;
import java.nio.channels.WritableByteChannel;
import org.asynchttpclient.netty.request.body.BodyFileRegion;
import org.asynchttpclient.request.body.RandomAccessBody;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BodyFileRegion_ESTest extends BodyFileRegion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      doReturn(1873L).when(randomAccessBody0).transferTo(any(java.nio.channels.WritableByteChannel.class));
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      bodyFileRegion0.transferTo(writableByteChannel0, 0L);
      long long0 = bodyFileRegion0.transferred();
      assertEquals(1873L, bodyFileRegion0.transfered());
      assertEquals(1873L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      doReturn(1873L).when(randomAccessBody0).transferTo(any(java.nio.channels.WritableByteChannel.class));
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      bodyFileRegion0.transferTo(writableByteChannel0, 0L);
      long long0 = bodyFileRegion0.transfered();
      assertEquals(1873L, bodyFileRegion0.transferred());
      assertEquals(1873L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      doReturn(1873L, 0L, (-1L)).when(randomAccessBody0).transferTo(any(java.nio.channels.WritableByteChannel.class));
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      bodyFileRegion0.transferTo(writableByteChannel0, 0L);
      WritableByteChannel writableByteChannel1 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      bodyFileRegion0.transferTo(writableByteChannel1, 1873L);
      WritableByteChannel writableByteChannel2 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      long long0 = bodyFileRegion0.transferTo(writableByteChannel2, 1873L);
      assertEquals(1873L, bodyFileRegion0.transfered());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      doReturn(2033L).when(randomAccessBody0).transferTo(any(java.nio.channels.WritableByteChannel.class));
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      bodyFileRegion0.transferTo((WritableByteChannel) null, 2304L);
      bodyFileRegion0.touch((Object) null);
      assertEquals(2033L, bodyFileRegion0.transferred());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      bodyFileRegion0.release();
      FileRegion fileRegion0 = bodyFileRegion0.touch((Object) "2{NsiL<");
      assertSame(fileRegion0, bodyFileRegion0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 1748L).when(randomAccessBody0).transferTo(any(java.nio.channels.WritableByteChannel.class));
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      bodyFileRegion0.transferTo((WritableByteChannel) null, 1748L);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      bodyFileRegion0.transferTo(writableByteChannel0, 0L);
      bodyFileRegion0.touch();
      assertEquals(1748L, bodyFileRegion0.transfered());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      bodyFileRegion0.release();
      FileRegion fileRegion0 = bodyFileRegion0.touch();
      assertSame(bodyFileRegion0, fileRegion0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      doReturn(884L).when(randomAccessBody0).transferTo(any(java.nio.channels.WritableByteChannel.class));
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      bodyFileRegion0.transferTo(writableByteChannel0, (-2142L));
      bodyFileRegion0.retain(1);
      assertEquals(2, bodyFileRegion0.refCnt());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      doReturn(884L).when(randomAccessBody0).transferTo(any(java.nio.channels.WritableByteChannel.class));
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      bodyFileRegion0.transferTo(writableByteChannel0, (-2142L));
      bodyFileRegion0.retain();
      assertEquals(884L, bodyFileRegion0.transfered());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(randomAccessBody0).getContentLength();
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      long long0 = bodyFileRegion0.count();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      doReturn((-3658L)).when(randomAccessBody0).getContentLength();
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      long long0 = bodyFileRegion0.count();
      assertEquals((-3658L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      bodyFileRegion0.release();
      // Undeclared exception!
      try { 
        bodyFileRegion0.retain(1971);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refCnt: 0, increment: 1971
         //
         verifyException("io.netty.util.AbstractReferenceCounted", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      // Undeclared exception!
      try { 
        bodyFileRegion0.retain(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // increment: 0 (expected: > 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      bodyFileRegion0.release();
      // Undeclared exception!
      try { 
        bodyFileRegion0.retain();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refCnt: 0, increment: 1
         //
         verifyException("io.netty.util.AbstractReferenceCounted", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BodyFileRegion bodyFileRegion0 = null;
      try {
        bodyFileRegion0 = new BodyFileRegion((RandomAccessBody) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // body
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      bodyFileRegion0.deallocate();
      assertEquals(0L, bodyFileRegion0.position());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      long long0 = bodyFileRegion0.transfered();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      bodyFileRegion0.retain(1);
      assertEquals(2, bodyFileRegion0.refCnt());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      doReturn(1873L).when(randomAccessBody0).getContentLength();
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      long long0 = bodyFileRegion0.count();
      assertEquals(1873L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      FileRegion fileRegion0 = bodyFileRegion0.retain();
      assertEquals(0L, fileRegion0.transferred());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      long long0 = bodyFileRegion0.transferred();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomAccessBody randomAccessBody0 = mock(RandomAccessBody.class, new ViolatedAssumptionAnswer());
      BodyFileRegion bodyFileRegion0 = new BodyFileRegion(randomAccessBody0);
      long long0 = bodyFileRegion0.position();
      assertEquals(0L, long0);
  }
}
