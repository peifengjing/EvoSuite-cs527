/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:00:33 GMT 2017
 */

package org.asynchttpclient.netty.request.body;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.channel.Channel;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelProgressivePromise;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.asynchttpclient.AsyncHandler;
import org.asynchttpclient.netty.NettyResponseFuture;
import org.asynchttpclient.netty.request.body.NettyInputStreamBody;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NettyInputStreamBody_ESTest extends NettyInputStreamBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NettyInputStreamBody nettyInputStreamBody0 = new NettyInputStreamBody(pipedInputStream0, 0L);
      InputStream inputStream0 = nettyInputStreamBody0.getInputStream();
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NettyInputStreamBody nettyInputStreamBody0 = new NettyInputStreamBody(pipedInputStream0, 0L);
      long long0 = nettyInputStreamBody0.getContentLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      NettyInputStreamBody nettyInputStreamBody0 = new NettyInputStreamBody(inputStream0, 1879L);
      long long0 = nettyInputStreamBody0.getContentLength();
      assertEquals(1879L, long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NettyInputStreamBody nettyInputStreamBody0 = new NettyInputStreamBody((InputStream) null, 1L);
      NettyResponseFuture<Object> nettyResponseFuture0 = (NettyResponseFuture<Object>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(nettyResponseFuture0).isStreamConsumed();
      // Undeclared exception!
      try { 
        nettyInputStreamBody0.write((Channel) null, nettyResponseFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in
         //
         verifyException("io.netty.handler.stream.ChunkedStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(inputStream0).markSupported();
      NettyInputStreamBody nettyInputStreamBody0 = new NettyInputStreamBody(inputStream0, 0L);
      NettyResponseFuture<Integer> nettyResponseFuture0 = (NettyResponseFuture<Integer>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(nettyResponseFuture0).isStreamConsumed();
      // Undeclared exception!
      try { 
        nettyInputStreamBody0.write((Channel) null, nettyResponseFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.request.body.NettyInputStreamBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NettyInputStreamBody nettyInputStreamBody0 = new NettyInputStreamBody(pipedInputStream0, 0L);
      NettyResponseFuture<Integer> nettyResponseFuture0 = (NettyResponseFuture<Integer>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(nettyResponseFuture0).isStreamConsumed();
      nettyInputStreamBody0.write((Channel) null, nettyResponseFuture0);
      assertEquals(0L, nettyInputStreamBody0.getContentLength());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      NettyInputStreamBody nettyInputStreamBody0 = new NettyInputStreamBody(inputStream0, 1879L);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelProgressivePromise) null).when(channel0).newProgressivePromise();
      doReturn((ChannelFuture) null).when(channel0).write(any() , any(io.netty.channel.ChannelPromise.class));
      NettyResponseFuture<Integer> nettyResponseFuture0 = (NettyResponseFuture<Integer>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler) null).when(nettyResponseFuture0).getAsyncHandler();
      doReturn(false).when(nettyResponseFuture0).isStreamConsumed();
      // Undeclared exception!
      try { 
        nettyInputStreamBody0.write(channel0, nettyResponseFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.request.body.NettyInputStreamBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      NettyInputStreamBody nettyInputStreamBody0 = new NettyInputStreamBody(pipedInputStream0);
      long long0 = nettyInputStreamBody0.getContentLength();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NettyInputStreamBody nettyInputStreamBody0 = new NettyInputStreamBody((InputStream) null);
      nettyInputStreamBody0.getInputStream();
      assertEquals((-1L), nettyInputStreamBody0.getContentLength());
  }
}
