/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:27:27 GMT 2017
 */

package org.asynchttpclient.netty.channel;

import org.junit.Test;
import static org.junit.Assert.*;
import org.asynchttpclient.netty.channel.NonBlockingSemaphoreInfinite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NonBlockingSemaphoreInfinite_ESTest extends NonBlockingSemaphoreInfinite_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NonBlockingSemaphoreInfinite[] nonBlockingSemaphoreInfiniteArray0 = NonBlockingSemaphoreInfinite.values();
      assertNotNull(nonBlockingSemaphoreInfiniteArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NonBlockingSemaphoreInfinite nonBlockingSemaphoreInfinite0 = NonBlockingSemaphoreInfinite.valueOf("INSTANCE");
      assertTrue(nonBlockingSemaphoreInfinite0.tryAcquire());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NonBlockingSemaphoreInfinite nonBlockingSemaphoreInfinite0 = NonBlockingSemaphoreInfinite.INSTANCE;
      String string0 = nonBlockingSemaphoreInfinite0.toString();
      assertEquals("org.asynchttpclient.netty.channel.NonBlockingSemaphore", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NonBlockingSemaphoreInfinite nonBlockingSemaphoreInfinite0 = NonBlockingSemaphoreInfinite.INSTANCE;
      nonBlockingSemaphoreInfinite0.release();
      assertTrue(nonBlockingSemaphoreInfinite0.tryAcquire());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NonBlockingSemaphoreInfinite nonBlockingSemaphoreInfinite0 = NonBlockingSemaphoreInfinite.INSTANCE;
      boolean boolean0 = nonBlockingSemaphoreInfinite0.tryAcquire();
      assertTrue(boolean0);
  }
}
