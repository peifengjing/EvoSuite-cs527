/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 00:39:09 GMT 2017
 */

package org.asynchttpclient.netty.channel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.asynchttpclient.AsyncHttpClientConfig;
import org.asynchttpclient.netty.channel.ConnectionSemaphore;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConnectionSemaphore_ESTest extends ConnectionSemaphore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((-1442), 2003, (-1442)).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(2003, (-1442), (-1)).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      ConnectionSemaphore connectionSemaphore0 = ConnectionSemaphore.newConnectionSemaphore(asyncHttpClientConfig0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      connectionSemaphore0.acquireChannelLock(mockThaiBuddhistDate0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((-415)).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn((-61)).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      ConnectionSemaphore connectionSemaphore0 = ConnectionSemaphore.newConnectionSemaphore(asyncHttpClientConfig0);
      assertNull(connectionSemaphore0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConnectionSemaphore.newConnectionSemaphore((AsyncHttpClientConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.channel.ConnectionSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(1903, 1903, 1, 1).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(1903, 1).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      ConnectionSemaphore connectionSemaphore0 = ConnectionSemaphore.newConnectionSemaphore(asyncHttpClientConfig0);
      MockIOException mockIOException0 = new MockIOException();
      Object object0 = new Object();
      connectionSemaphore0.acquireChannelLock(object0);
      connectionSemaphore0.releaseChannelLock(mockIOException0);
      try { 
        connectionSemaphore0.acquireChannelLock(object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too many connections: 1903
         //
         verifyException("org.asynchttpclient.netty.channel.ConnectionSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(17, 0, 0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(17, 0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      ConnectionSemaphore connectionSemaphore0 = ConnectionSemaphore.newConnectionSemaphore(asyncHttpClientConfig0);
      connectionSemaphore0.acquireChannelLock(connectionSemaphore0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((-1442), 2003, (-1442)).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(2003, (-1442), (-1)).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      ConnectionSemaphore connectionSemaphore0 = ConnectionSemaphore.newConnectionSemaphore(asyncHttpClientConfig0);
      AsyncHttpClientConfig asyncHttpClientConfig1 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((-4481), (-2213), 1990, (-61)).when(asyncHttpClientConfig1).getMaxConnections();
      doReturn(2003, 2, (-1442)).when(asyncHttpClientConfig1).getMaxConnectionsPerHost();
      ConnectionSemaphore connectionSemaphore1 = ConnectionSemaphore.newConnectionSemaphore(asyncHttpClientConfig1);
      try { 
        connectionSemaphore1.acquireChannelLock(connectionSemaphore0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Too many connections: -2213
         //
         verifyException("org.asynchttpclient.netty.channel.ConnectionSemaphore", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      ConnectionSemaphore connectionSemaphore0 = ConnectionSemaphore.newConnectionSemaphore(asyncHttpClientConfig0);
      assertNull(connectionSemaphore0);
  }
}
