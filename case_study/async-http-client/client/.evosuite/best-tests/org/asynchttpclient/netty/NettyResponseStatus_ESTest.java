/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:14:25 GMT 2017
 */

package org.asynchttpclient.netty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.channel.Channel;
import io.netty.handler.codec.http.HttpResponse;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.handler.codec.http.HttpVersion;
import java.net.SocketAddress;
import org.asynchttpclient.netty.NettyResponseStatus;
import org.asynchttpclient.uri.Uri;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NettyResponseStatus_ESTest extends NettyResponseStatus_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpVersion httpVersion0 = new HttpVersion("https", 0, 0, true);
      HttpResponseStatus httpResponseStatus0 = HttpResponseStatus.CREATED;
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn(httpVersion0, httpVersion0, httpVersion0, httpVersion0, httpVersion0).when(httpResponse0).protocolVersion();
      doReturn(httpResponseStatus0).when(httpResponse0).status();
      Uri uri1 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpResponse httpResponse1 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri1, httpResponse1, channel0);
      nettyResponseStatus0.getLocalAddress();
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel1).localAddress();
      doReturn((SocketAddress) null).when(channel1).remoteAddress();
      NettyResponseStatus nettyResponseStatus1 = new NettyResponseStatus(uri0, httpResponse0, channel1);
      nettyResponseStatus1.getProtocolName();
      nettyResponseStatus1.getProtocolText();
      nettyResponseStatus1.getProtocolMinorVersion();
      nettyResponseStatus1.getProtocolText();
      nettyResponseStatus1.getProtocolText();
      int int0 = nettyResponseStatus1.getProtocolMinorVersion();
      nettyResponseStatus1.getStatusCode();
      nettyResponseStatus1.getRemoteAddress();
      int int1 = nettyResponseStatus1.getProtocolMajorVersion();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SocketAddress socketAddress0 = mock(SocketAddress.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus((Uri) null, (HttpResponse) null, channel0);
      SocketAddress socketAddress1 = nettyResponseStatus0.getLocalAddress();
      SocketAddress socketAddress2 = nettyResponseStatus0.getRemoteAddress();
      assertSame(socketAddress2, socketAddress1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn((HttpResponseStatus) null).when(httpResponse0).status();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, channel0);
      // Undeclared exception!
      try { 
        nettyResponseStatus0.getStatusCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.NettyResponseStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn((HttpVersion) null).when(httpResponse0).protocolVersion();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, channel0);
      // Undeclared exception!
      try { 
        nettyResponseStatus0.getProtocolMinorVersion();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.NettyResponseStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn((HttpVersion) null).when(httpResponse0).protocolVersion();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, channel0);
      // Undeclared exception!
      try { 
        nettyResponseStatus0.getProtocolText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.NettyResponseStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn((HttpVersion) null).when(httpResponse0).protocolVersion();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, channel0);
      // Undeclared exception!
      try { 
        nettyResponseStatus0.getProtocolName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.NettyResponseStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_1;
      HttpResponseStatus httpResponseStatus0 = HttpResponseStatus.PERMANENT_REDIRECT;
      HttpResponseStatus httpResponseStatus1 = HttpResponseStatus.PROCESSING;
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn(httpVersion0, httpVersion0, httpVersion0, httpVersion0, httpVersion0).when(httpResponse0).protocolVersion();
      doReturn(httpResponseStatus0, httpResponseStatus0, httpResponseStatus1).when(httpResponse0).status();
      HttpVersion httpVersion1 = new HttpVersion("https", 1073741824, 1073741824, false);
      HttpResponse httpResponse1 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn((HttpResponseStatus) null).when(httpResponse1).status();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus((Uri) null, httpResponse1, channel0);
      nettyResponseStatus0.getLocalAddress();
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel1).localAddress();
      doReturn((SocketAddress) null).when(channel1).remoteAddress();
      NettyResponseStatus nettyResponseStatus1 = new NettyResponseStatus(uri0, httpResponse0, channel1);
      nettyResponseStatus1.getProtocolText();
      nettyResponseStatus1.getProtocolMinorVersion();
      nettyResponseStatus1.getProtocolText();
      nettyResponseStatus1.getProtocolMajorVersion();
      nettyResponseStatus1.getRemoteAddress();
      nettyResponseStatus1.getProtocolMajorVersion();
      nettyResponseStatus1.getProtocolMajorVersion();
      nettyResponseStatus1.getProtocolMinorVersion();
      nettyResponseStatus1.getProtocolText();
      nettyResponseStatus1.getProtocolMinorVersion();
      nettyResponseStatus1.getRemoteAddress();
      nettyResponseStatus1.getProtocolMinorVersion();
      nettyResponseStatus1.getStatusText();
      nettyResponseStatus1.getProtocolText();
      nettyResponseStatus1.getProtocolName();
      nettyResponseStatus1.getProtocolMajorVersion();
      nettyResponseStatus1.getLocalAddress();
      nettyResponseStatus1.getProtocolMinorVersion();
      nettyResponseStatus1.getLocalAddress();
      nettyResponseStatus1.getStatusText();
      nettyResponseStatus1.getStatusCode();
      nettyResponseStatus1.getProtocolMinorVersion();
      nettyResponseStatus1.getProtocolName();
      nettyResponseStatus1.getProtocolName();
      // Undeclared exception!
      try { 
        nettyResponseStatus0.getStatusText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.NettyResponseStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      HttpVersion httpVersion0 = HttpVersion.HTTP_1_0;
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn(httpVersion0, httpVersion0, httpVersion0, httpVersion0, httpVersion0).when(httpResponse0).protocolVersion();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus(uri0, httpResponse0, channel0);
      nettyResponseStatus0.getProtocolName();
      nettyResponseStatus0.getProtocolText();
      nettyResponseStatus0.getProtocolMinorVersion();
      nettyResponseStatus0.getProtocolName();
      nettyResponseStatus0.getProtocolText();
      nettyResponseStatus0.getProtocolText();
      nettyResponseStatus0.getProtocolMinorVersion();
      // Undeclared exception!
      try { 
        HttpVersion.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("io.netty.handler.codec.http.HttpVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpResponseStatus.valueOf(0);
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      doReturn((HttpResponseStatus) null).when(httpResponse0).status();
      HttpResponse httpResponse1 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
      NettyResponseStatus nettyResponseStatus0 = new NettyResponseStatus((Uri) null, httpResponse1, (Channel) null);
      nettyResponseStatus0.getRemoteAddress();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      NettyResponseStatus nettyResponseStatus1 = new NettyResponseStatus((Uri) null, httpResponse0, channel0);
      // Undeclared exception!
      try { 
        nettyResponseStatus1.getStatusCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.NettyResponseStatus", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpResponse httpResponse0 = mock(HttpResponse.class, new ViolatedAssumptionAnswer());
  }
}
