/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 00:54:41 GMT 2017
 */

package org.asynchttpclient.handler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;
import io.netty.handler.codec.http.CombinedHttpHeaders;
import io.netty.handler.codec.http.EmptyHttpHeaders;
import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.HttpResponse;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.util.concurrent.Future;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.io.IOCase;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.asynchttpclient.AsyncHandler;
import org.asynchttpclient.HttpResponseStatus;
import org.asynchttpclient.Response;
import org.asynchttpclient.handler.BodyDeferringAsyncHandler;
import org.asynchttpclient.netty.EagerResponseBodyPart;
import org.asynchttpclient.netty.LazyResponseBodyPart;
import org.asynchttpclient.netty.NettyResponseStatus;
import org.asynchttpclient.uri.Uri;
import org.asynchttpclient.webdav.WebDavResponse;
import org.eclipse.jetty.util.InetAddressSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BodyDeferringAsyncHandler_ESTest extends BodyDeferringAsyncHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("pIBF,8+79$:<?Ea");
      assertNotNull(mockPrintStream0);
      
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(mockPrintStream0);
      assertNotNull(bodyDeferringAsyncHandler0);
      
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuf) null).when(byteBuf0).getBytes(anyInt() , any(byte[].class));
      doReturn(false).when(byteBuf0).hasArray();
      doReturn(0).when(byteBuf0).readableBytes();
      doReturn(0).when(byteBuf0).readerIndex();
      EagerResponseBodyPart eagerResponseBodyPart0 = new EagerResponseBodyPart(byteBuf0, false);
      assertNotNull(eagerResponseBodyPart0);
      assertEquals(0, eagerResponseBodyPart0.length());
      assertFalse(eagerResponseBodyPart0.isLast());
      
      ByteBuffer byteBuffer0 = eagerResponseBodyPart0.getBodyByteBuffer();
      assertNotNull(byteBuffer0);
      assertEquals(0, eagerResponseBodyPart0.length());
      assertFalse(eagerResponseBodyPart0.isLast());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      
      AsyncHandler.State asyncHandler_State0 = bodyDeferringAsyncHandler0.onBodyPartReceived(eagerResponseBodyPart0);
      assertEquals(AsyncHandler.State.CONTINUE, asyncHandler_State0);
      assertEquals(0, eagerResponseBodyPart0.length());
      assertFalse(eagerResponseBodyPart0.isLast());
      
      AsyncHandler.State asyncHandler_State1 = bodyDeferringAsyncHandler0.onBodyPartReceived(eagerResponseBodyPart0);
      assertEquals(AsyncHandler.State.CONTINUE, asyncHandler_State1);
      assertSame(asyncHandler_State1, asyncHandler_State0);
      assertEquals(0, eagerResponseBodyPart0.length());
      assertFalse(eagerResponseBodyPart0.isLast());
      
      Future<Response> future0 = (Future<Response>) mock(Future.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(future0).get();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BodyDeferringAsyncHandler.BodyDeferringInputStream bodyDeferringAsyncHandler_BodyDeferringInputStream0 = new BodyDeferringAsyncHandler.BodyDeferringInputStream(future0, bodyDeferringAsyncHandler0, pipedInputStream0);
      assertNotNull(bodyDeferringAsyncHandler_BodyDeferringInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      bodyDeferringAsyncHandler_BodyDeferringInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      MockThrowable mockThrowable0 = new MockThrowable("kKPRp.j@Z{!BE[Jt{");
      assertNotNull(mockThrowable0);
      assertEquals("kKPRp.j@Z{!BE[Jt{", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: kKPRp.j@Z{!BE[Jt{", mockThrowable0.toString());
      
      MockThrowable mockThrowable1 = new MockThrowable("p.1", mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      assertEquals("kKPRp.j@Z{!BE[Jt{", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: kKPRp.j@Z{!BE[Jt{", mockThrowable0.toString());
      assertEquals("p.1", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: p.1", mockThrowable1.toString());
      
      MockThrowable mockThrowable2 = new MockThrowable(mockThrowable1);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(mockThrowable2.equals((Object)mockThrowable1));
      assertFalse(mockThrowable2.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable2);
      assertEquals("kKPRp.j@Z{!BE[Jt{", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: kKPRp.j@Z{!BE[Jt{", mockThrowable0.toString());
      assertEquals("p.1", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: p.1", mockThrowable1.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: p.1", mockThrowable2.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: p.1", mockThrowable2.getMessage());
      
      MockThrowable mockThrowable3 = new MockThrowable();
      assertFalse(mockThrowable3.equals((Object)mockThrowable1));
      assertFalse(mockThrowable3.equals((Object)mockThrowable2));
      assertFalse(mockThrowable3.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable3);
      assertNull(mockThrowable3.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable3.toString());
      
      // Undeclared exception!
      try { 
        mockThrowable2.initCause(mockThrowable3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s0q*IedT4{T0", "s0q*IedT4{T0");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("s0q*IedT4{T0", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/async-http-client/client/s0q*IedT4{T0", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/async-http-client/client/s0q*IedT4{T0/s0q*IedT4{T0", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("s0q*IedT4{T0", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/async-http-client/client/s0q*IedT4{T0", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/async-http-client/client/s0q*IedT4{T0/s0q*IedT4{T0", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(mockPrintStream0);
      assertNotNull(bodyDeferringAsyncHandler0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("s0q*IedT4{T0", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/async-http-client/client/s0q*IedT4{T0", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/async-http-client/client/s0q*IedT4{T0/s0q*IedT4{T0", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      assertNotNull(mockThrowable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      
      bodyDeferringAsyncHandler0.onThrowable(mockThrowable0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("s0q*IedT4{T0", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/async-http-client/client/s0q*IedT4{T0", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/async-http-client/client/s0q*IedT4{T0/s0q*IedT4{T0", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("I*Sr-n8v#-dP");
      assertNotNull(mockPrintStream0);
      
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(mockPrintStream0);
      assertNotNull(bodyDeferringAsyncHandler0);
      
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(false);
      assertNotNull(combinedHttpHeaders0);
      assertEquals(0, combinedHttpHeaders0.size());
      
      HttpHeaders httpHeaders0 = combinedHttpHeaders0.remove("I*Sr-n8v#-dP");
      assertSame(combinedHttpHeaders0, httpHeaders0);
      assertSame(httpHeaders0, combinedHttpHeaders0);
      assertNotNull(httpHeaders0);
      assertEquals(0, combinedHttpHeaders0.size());
      assertEquals(0, httpHeaders0.size());
      
      AsyncHandler.State asyncHandler_State0 = bodyDeferringAsyncHandler0.onHeadersReceived(httpHeaders0);
      assertEquals(AsyncHandler.State.CONTINUE, asyncHandler_State0);
      assertSame(combinedHttpHeaders0, httpHeaders0);
      assertSame(httpHeaders0, combinedHttpHeaders0);
      assertEquals(0, combinedHttpHeaders0.size());
      assertEquals(0, httpHeaders0.size());
      
      AsyncHandler.State asyncHandler_State1 = bodyDeferringAsyncHandler0.onStatusReceived((HttpResponseStatus) null);
      assertEquals(AsyncHandler.State.CONTINUE, asyncHandler_State1);
      assertSame(asyncHandler_State1, asyncHandler_State0);
      
      Response response0 = bodyDeferringAsyncHandler0.onCompleted();
      assertNull(response0);
      
      Future<Response> future0 = (Future<Response>) mock(Future.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-79));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Future<Response> future0 = (Future<Response>) mock(Future.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(byteArrayOutputStream0);
      assertNotNull(bodyDeferringAsyncHandler0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      AsyncHandler.State asyncHandler_State0 = bodyDeferringAsyncHandler0.onTrailingHeadersReceived((HttpHeaders) null);
      assertEquals(AsyncHandler.State.CONTINUE, asyncHandler_State0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      bodyDeferringAsyncHandler0.closeOut();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(780);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      pipedOutputStream0.write(780);
      assertEquals(1, pipedInputStream0.available());
      
      try { 
        pipedInputStream0.connect(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler((OutputStream) null);
      assertNotNull(bodyDeferringAsyncHandler0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      
      MockThrowable mockThrowable1 = new MockThrowable("", mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable1.toString());
      assertEquals("", mockThrowable1.getMessage());
      
      Throwable throwable0 = mockThrowable0.initCause(mockThrowable1);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertFalse(throwable0.equals((Object)mockThrowable1));
      assertNotSame(mockThrowable0, mockThrowable1);
      assertSame(mockThrowable0, throwable0);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertNotSame(mockThrowable1, throwable0);
      assertSame(throwable0, mockThrowable0);
      assertNotSame(throwable0, mockThrowable1);
      assertNotNull(throwable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable1.toString());
      assertEquals("", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertNull(throwable0.getMessage());
      
      // Undeclared exception!
      try { 
        bodyDeferringAsyncHandler0.onThrowable(throwable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.handler.BodyDeferringAsyncHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler((OutputStream) null);
      assertNotNull(bodyDeferringAsyncHandler0);
      
      // Undeclared exception!
      try { 
        bodyDeferringAsyncHandler0.closeOut();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.handler.BodyDeferringAsyncHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(pipedOutputStream0);
      assertNotNull(bodyDeferringAsyncHandler0);
      
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuf) null).when(byteBuf0).getBytes(anyInt() , any(byte[].class));
      doReturn(false).when(byteBuf0).hasArray();
      doReturn(0).when(byteBuf0).readableBytes();
      doReturn(0).when(byteBuf0).readerIndex();
      EagerResponseBodyPart eagerResponseBodyPart0 = new EagerResponseBodyPart(byteBuf0, true);
      assertNotNull(eagerResponseBodyPart0);
      assertEquals(0, eagerResponseBodyPart0.length());
      assertTrue(eagerResponseBodyPart0.isLast());
      
      try { 
        bodyDeferringAsyncHandler0.onBodyPartReceived(eagerResponseBodyPart0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1282);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(byteArrayOutputStream0);
      assertNotNull(bodyDeferringAsyncHandler0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      Response response0 = bodyDeferringAsyncHandler0.onCompleted();
      assertNull(response0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      Response response1 = bodyDeferringAsyncHandler0.getResponse();
      assertNull(response1);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      Future<Response> future0 = (Future<Response>) mock(Future.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(future0).get();
      byteArrayOutputStream0.write(1282);
      assertEquals("\u0002", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BodyDeferringAsyncHandler.BodyDeferringInputStream bodyDeferringAsyncHandler_BodyDeferringInputStream0 = new BodyDeferringAsyncHandler.BodyDeferringInputStream(future0, bodyDeferringAsyncHandler0, pipedInputStream0);
      assertNotNull(bodyDeferringAsyncHandler_BodyDeferringInputStream0);
      assertEquals("\u0002", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals(0, pipedInputStream0.available());
      
      bodyDeferringAsyncHandler_BodyDeferringInputStream0.mark(1282);
      assertEquals("\u0002", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals(0, pipedInputStream0.available());
      
      bodyDeferringAsyncHandler_BodyDeferringInputStream0.close();
      assertEquals("\u0002", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals(0, pipedInputStream0.available());
      
      EmptyHttpHeaders emptyHttpHeaders0 = EmptyHttpHeaders.INSTANCE;
      assertNotNull(emptyHttpHeaders0);
      assertTrue(emptyHttpHeaders0.isEmpty());
      assertEquals(0, emptyHttpHeaders0.size());
      
      String string0 = "$;O;2[I";
      // Undeclared exception!
      try { 
        Pattern.compile("$;O;2[I");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 6
         // $;O;2[I
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("!tVU)<)VSV6G3%");
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(mockPrintStream0);
      bodyDeferringAsyncHandler0.closeOut();
      Future<Response> future0 = (Future<Response>) mock(Future.class, new ViolatedAssumptionAnswer());
      int int0 = (-967);
      bodyDeferringAsyncHandler0.onCompleted();
      bodyDeferringAsyncHandler0.onCompleted();
      boolean boolean0 = false;
      EmptyHttpHeaders emptyHttpHeaders0 = EmptyHttpHeaders.INSTANCE;
      // Undeclared exception!
      try { 
        emptyHttpHeaders0.set("sR,~!)p]^^=}", (Iterable<?>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // read only
         //
         verifyException("io.netty.handler.codec.http.EmptyHttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler((OutputStream) null);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuf) null).when(byteBuf0).duplicate();
      doReturn((ByteBuffer) null).when(byteBuf0).nioBuffer();
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(byteBuf0, false);
      lazyResponseBodyPart0.getBodyByteBuffer();
      try { 
        bodyDeferringAsyncHandler0.onBodyPartReceived(lazyResponseBodyPart0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Future<Response> future0 = null;
      MockFile mockFile0 = new MockFile("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "sendTo(..)";
      String string1 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "sendTo(..)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "TJG*d+";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("TJG*d+", "TJG*d+");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // TJG*d+
         //
         verifyException("java.io.PrintStream", e);
      }
  }
}
