/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:21:18 GMT 2017
 */

package org.asynchttpclient.handler.resumable;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import org.asynchttpclient.handler.resumable.ResumableRandomAccessFileListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResumableRandomAccessFileListener_ESTest extends ResumableRandomAccessFileListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(randomAccessFile0).length();
      ResumableRandomAccessFileListener resumableRandomAccessFileListener0 = new ResumableRandomAccessFileListener(randomAccessFile0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2737);
      byteBuffer0.getFloat();
      resumableRandomAccessFileListener0.onBytesReceived(byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(randomAccessFile0).length();
      ResumableRandomAccessFileListener resumableRandomAccessFileListener0 = new ResumableRandomAccessFileListener(randomAccessFile0);
      long long0 = resumableRandomAccessFileListener0.length();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());
      doReturn((long)224).when(randomAccessFile0).length();
      ResumableRandomAccessFileListener resumableRandomAccessFileListener0 = new ResumableRandomAccessFileListener(randomAccessFile0);
      long long0 = resumableRandomAccessFileListener0.length();
      assertEquals(224L, long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ResumableRandomAccessFileListener resumableRandomAccessFileListener0 = new ResumableRandomAccessFileListener((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        resumableRandomAccessFileListener0.onBytesReceived((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.handler.resumable.ResumableRandomAccessFileListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ResumableRandomAccessFileListener resumableRandomAccessFileListener0 = new ResumableRandomAccessFileListener((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        resumableRandomAccessFileListener0.length();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.handler.resumable.ResumableRandomAccessFileListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(randomAccessFile0).length();
      ResumableRandomAccessFileListener resumableRandomAccessFileListener0 = new ResumableRandomAccessFileListener(randomAccessFile0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2737);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      resumableRandomAccessFileListener0.onBytesReceived(byteBuffer1);
      assertEquals(2737, byteBuffer1.remaining());
      assertTrue(byteBuffer0.equals((Object)byteBuffer1));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());
      doReturn((-78L)).when(randomAccessFile0).length();
      ResumableRandomAccessFileListener resumableRandomAccessFileListener0 = new ResumableRandomAccessFileListener(randomAccessFile0);
      long long0 = resumableRandomAccessFileListener0.length();
      assertEquals((-78L), long0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RandomAccessFile randomAccessFile0 = mock(RandomAccessFile.class, new ViolatedAssumptionAnswer());
      ResumableRandomAccessFileListener resumableRandomAccessFileListener0 = new ResumableRandomAccessFileListener(randomAccessFile0);
      resumableRandomAccessFileListener0.onAllBytesReceived();
      assertEquals(0L, resumableRandomAccessFileListener0.length());
  }
}
