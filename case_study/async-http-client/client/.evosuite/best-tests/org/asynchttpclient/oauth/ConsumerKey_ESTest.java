/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 00:38:24 GMT 2017
 */

package org.asynchttpclient.oauth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.asynchttpclient.oauth.ConsumerKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConsumerKey_ESTest extends ConsumerKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("", "org.asynchttpclient.util.Utf8UrlEncoder");
      consumerKey0.hashCode();
      assertEquals("", consumerKey0.getKey());
      assertEquals("org.asynchttpclient.util.Utf8UrlEncoder", consumerKey0.getSecret());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("^`jU!c20X\"/", "^`jU!c20X\"/");
      String string0 = consumerKey0.getSecret();
      assertEquals("^`jU!c20X\"/", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("", "");
      String string0 = consumerKey0.getSecret();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("~4LG+ruG?@dn!OnD", "~4LG+ruG?@dn!OnD");
      String string0 = consumerKey0.getPercentEncodedKey();
      assertEquals("~4LG%2BruG%3F%40dn%21OnD", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("", "");
      String string0 = consumerKey0.getPercentEncodedKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("^`jU!c20X\"/", "^`jU!c20X\"/");
      String string0 = consumerKey0.getKey();
      assertEquals("^`jU!c20X\"/", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("", "org.asynchttpclient.util.Utf8UrlEncoder");
      String string0 = consumerKey0.getKey();
      assertEquals("org.asynchttpclient.util.Utf8UrlEncoder", consumerKey0.getSecret());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("^`jU!c20X\"/", "^`jU!c20X\"/");
      ConsumerKey consumerKey1 = new ConsumerKey("^`jU!c20X\"/", "^`jU!c20X\"/");
      boolean boolean0 = consumerKey0.equals(consumerKey1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("Fqo}", "Fqo}");
      ConsumerKey consumerKey1 = new ConsumerKey("Fqo}", "Fqow");
      boolean boolean0 = consumerKey0.equals(consumerKey1);
      assertEquals("Fqo}", consumerKey1.getKey());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("Fqo}", "Fqo}");
      ConsumerKey consumerKey1 = new ConsumerKey("Fqow", "Fqow");
      boolean boolean0 = consumerKey0.equals(consumerKey1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("fi)lW|?7B!$2", "fi)lW|?7B!$2");
      Object object0 = new Object();
      boolean boolean0 = consumerKey0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("fi)lW|?7B!$2", "fi)lW|?7B!$2");
      boolean boolean0 = consumerKey0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("L&avAGt*2PO iMj].", "L&avAGt*2PO iMj].");
      boolean boolean0 = consumerKey0.equals(consumerKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey((String) null, (String) null);
      ConsumerKey consumerKey1 = new ConsumerKey("{Consumer key, key=null, secret=null}", (String) null);
      // Undeclared exception!
      try { 
        consumerKey0.equals(consumerKey1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("{Consumer key, key=null, secret=null}", (String) null);
      String string0 = consumerKey0.toString();
      assertEquals("{Consumer key, key=\"{Consumer key, key=null, secret=null}\", secret=null}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey((String) null, (String) null);
      String string0 = consumerKey0.getPercentEncodedKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey((String) null, (String) null);
      String string0 = consumerKey0.getSecret();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey((String) null, (String) null);
      String string0 = consumerKey0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey((String) null, (String) null);
      // Undeclared exception!
      try { 
        consumerKey0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.oauth.ConsumerKey", e);
      }
  }
}
