/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:47:02 GMT 2017
 */

package org.asynchttpclient.request.body.generator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.asynchttpclient.request.body.generator.FileBodyGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileBodyGenerator_ESTest extends FileBodyGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 470L, 470L);
      long long0 = fileBodyGenerator0.getRegionSeek();
      assertEquals(470L, fileBodyGenerator0.getRegionLength());
      assertEquals(470L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = MockFile.createTempFile("nSGp4mXvUP:+N3z", "");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(file0, (-541L), 3061L);
      long long0 = fileBodyGenerator0.getRegionSeek();
      assertEquals(3061L, fileBodyGenerator0.getRegionLength());
      assertEquals((-541L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = MockFile.createTempFile("i0:6xE`X", "");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(file0);
      long long0 = fileBodyGenerator0.getRegionLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = MockFile.createTempFile("nSGp4mXvUP:+N3z", "");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(file0, (-541L), 3061L);
      long long0 = fileBodyGenerator0.getRegionLength();
      assertEquals((-541L), fileBodyGenerator0.getRegionSeek());
      assertEquals(3061L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZK", "ZK");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/async-http-client/client/ZK/ZK");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "d8hstl");
      File file0 = fileBodyGenerator0.getFile();
      assertTrue(file0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 470L, 470L);
      fileBodyGenerator0.getFile();
      assertEquals(470L, fileBodyGenerator0.getRegionSeek());
      assertEquals(470L, fileBodyGenerator0.getRegionLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileBodyGenerator fileBodyGenerator0 = null;
      try {
        fileBodyGenerator0 = new FileBodyGenerator((File) null, (-1588L), (-1588L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException("org.asynchttpclient.util.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileBodyGenerator fileBodyGenerator0 = null;
      try {
        fileBodyGenerator0 = new FileBodyGenerator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.generator.FileBodyGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^", "^");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, (-5060L), (-5060L));
      // Undeclared exception!
      try { 
        fileBodyGenerator0.createBody();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FileBodyGenerator.createBody isn't used, Netty direclt sends the file
         //
         verifyException("org.asynchttpclient.request.body.generator.FileBodyGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ZK", "ZK");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0);
      long long0 = fileBodyGenerator0.getRegionSeek();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, 0L);
      File file0 = fileBodyGenerator0.getFile();
      assertFalse(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^", "^");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, (-5060L), (-5060L));
      long long0 = fileBodyGenerator0.getRegionLength();
      assertEquals((-5060L), long0);
      assertEquals((-5060L), fileBodyGenerator0.getRegionSeek());
  }
}
