/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 23:56:03 GMT 2017
 */

package org.asynchttpclient.request.body.multipart.part;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.CompositeByteBuf;
import io.netty.buffer.EmptyByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.buffer.UnpooledDirectByteBuf;
import io.netty.buffer.UnpooledHeapByteBuf;
import io.netty.buffer.UnpooledUnsafeDirectByteBuf;
import java.io.FileDescriptor;
import java.io.IOException;
import java.net.ProtocolFamily;
import java.net.StandardProtocolFamily;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.DatagramChannel;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.SocketChannel;
import java.nio.channels.WritableByteChannel;
import java.nio.charset.Charset;
import org.apache.tomcat.util.buf.Utf8Encoder;
import org.asynchttpclient.request.body.multipart.ByteArrayPart;
import org.asynchttpclient.request.body.multipart.StringPart;
import org.asynchttpclient.request.body.multipart.part.ByteArrayMultipartPart;
import org.asynchttpclient.request.body.multipart.part.MessageEndMultipartPart;
import org.asynchttpclient.request.body.multipart.part.MultipartState;
import org.asynchttpclient.request.body.multipart.part.PartVisitor;
import org.asynchttpclient.request.body.multipart.part.StringMultipartPart;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultipartPart_ESTest extends MultipartPart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("$xaIl~<Ww_G{", byteArray0, "$xaIl~<Ww_G{", (Charset) null, "$xaIl~<Ww_G{", "$xaIl~<Ww_G{", "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitTransferEncodingHeader(partVisitor_CounterPartVisitor0);
      assertEquals(29, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      StringPart stringPart0 = new StringPart("AapTTe6=!&.b", "AapTTe6=!&.b");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      stringMultipartPart0.visitStart(partVisitor_CounterPartVisitor0);
      assertEquals(3, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("$xaIl~<Ww_G{", byteArray0, "J.2bn", (Charset) null, "$xaIl~<Ww_G{", "J.2bn", "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitPostContent(partVisitor_CounterPartVisitor0);
      assertEquals(2, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("", "", "", charset0);
      byte[] byteArray0 = new byte[2];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      stringMultipartPart0.visitEndOfHeaders(partVisitor_CounterPartVisitor0);
      assertEquals(4, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      StringPart stringPart0 = new StringPart("test({}) -> [depth {}>{}]", "test({}) -> [depth {}>{}]");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      stringMultipartPart0.visitDispositionHeader(partVisitor_CounterPartVisitor0);
      assertEquals(66, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("$xaIl~<Ww_G{", byteArray0, "J.2bn", (Charset) null, "$xaIl~<Ww_G{", "J.2bn", "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("J.2bn");
      mockFileOutputStream0.getChannel();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = pooledByteBufAllocator0.ioBuffer();
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(byteBuf0);
      byteArrayMultipartPart0.visitCustomHeaders(partVisitor_ByteBufVisitor0);
      assertFalse(byteArrayMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("org.asynchttpclient.request.body.multipart.part.MultipartPart", byteArray0, "org.asynchttpclient.request.body.multipart.part.MultipartPart", (Charset) null, "org.asynchttpclient.request.body.multipart.part.MultipartPart", "charset");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitContentTypeHeader(partVisitor_CounterPartVisitor0);
      assertEquals(77, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0, (String) null, charset0, (String) null, "M");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitContentIdHeader(partVisitor_CounterPartVisitor0);
      assertEquals(15, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("0C`+V{nsGm", byteArray0, "0C`+V{nsGm");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      byteArrayMultipartPart0.close();
      assertFalse(byteArrayMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      StringPart stringPart0 = new StringPart("_E3@Of3H ", "_E3@Of3H ", "_E3@Of3H ", charset0);
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, "", stringPart0.DEFAULT_CHARSET, "r2m^:iL.3Hjp{!-");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(false);
      UnpooledHeapByteBuf unpooledHeapByteBuf0 = new UnpooledHeapByteBuf(pooledByteBufAllocator0, (byte)67, (byte)67);
      long long0 = byteArrayMultipartPart0.transferTo((ByteBuf) unpooledHeapByteBuf0);
      assertEquals(67, unpooledHeapByteBuf0.writerIndex());
      assertEquals(67L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("ppc64le", byteArray0, "ppc64le");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      long long0 = byteArrayMultipartPart0.transferContentTo(datagramChannel0);
      assertFalse(byteArrayMultipartPart0.isTargetSlow());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, (String) null, (Charset) null);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kw\"]Nb-**!3U>G");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      long long0 = byteArrayMultipartPart0.transferContentTo(fileChannel0);
      assertEquals(6L, long0);
      assertFalse(byteArrayMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      byte[] byteArray1 = new byte[3];
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray1);
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(pooledByteBufAllocator0, 103, 1064);
      long long0 = byteArrayMultipartPart0.transferContentTo(unpooledUnsafeDirectByteBuf0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("S$:4ow/^Z", byteArray0, "key", charset0, "S$:4ow/^Z", "Content-Transfer-Encoding: ", "S$:4ow/^Z");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, (byte)104, (byte)104);
      long long0 = byteArrayMultipartPart0.transferContentTo(unpooledDirectByteBuf0);
      assertEquals(5, unpooledDirectByteBuf0.writerIndex());
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Transfer-Encoding: ", byteArray0, "Content-Transfer-Encoding: ", charset0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MultipartState multipartState0 = MultipartState.POST_CONTENT;
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      long long0 = byteArrayMultipartPart0.transfer(emptyByteBuf0, datagramChannel0, multipartState0);
      assertEquals(0L, long0);
      assertFalse(byteArrayMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      StringPart stringPart0 = new StringPart("r2GPi\"j", "", "Content-Transfer-Encoding: ");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      MultipartState multipartState0 = MultipartState.POST_CONTENT;
      long long0 = stringMultipartPart0.transfer(emptyByteBuf0, emptyByteBuf0, multipartState0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("S$:4ow/^Z", byteArray0, "key", charset0, "S$:4ow/^Z", "Content-Transfer-Encoding: ", "S$:4ow/^Z");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, (byte)104, (byte)104);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.writeChar((byte) (-1));
      MultipartState multipartState0 = MultipartState.PRE_CONTENT;
      long long0 = byteArrayMultipartPart0.transfer(byteBuf0, unpooledDirectByteBuf0, multipartState0);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      long long0 = byteArrayMultipartPart0.getContentLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("$xaIl~<Ww_G{", byteArray0, "$xaIl~<Ww_G{", (Charset) null, "$xaIl~<Ww_G{", "$xaIl~<Ww_G{", "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      long long0 = byteArrayMultipartPart0.getContentLength();
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("S$:4ow/^Z", byteArray0, "key", charset0, "S$:4ow/^Z", "Content-Transfer-Encoding: ", "S$:4ow/^Z");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      int int0 = byteArrayMultipartPart0.computePreContentLength();
      assertEquals(196, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      byte[] byteArray1 = new byte[3];
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray1);
      int int0 = byteArrayMultipartPart0.computePostContentLength();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      ByteBuf byteBuf0 = byteArrayMultipartPart0.computePostContentBytes((byte)0);
      assertNotNull(byteBuf0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitTransferEncodingHeader((PartVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("gf+kKkw", byteArray0, "", charset0, ",bN<ME[4F", "gf+kKkw");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitStart((PartVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart((byte[]) null);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes(0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(byteBuf0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitStart(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitPreContent(partVisitor_CounterPartVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitPreContent(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      StringPart stringPart0 = new StringPart("", "org.asynchttpclient.request.body.multipart.part.MultipartPart");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      ByteBuffer byteBuffer0 = emptyByteBuf0.internalNioBuffer((byte)97, 1656);
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor(byteBuffer0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.visitPostContent(partVisitor_ByteBufferVisitor0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("--", byteArray0, "--");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor((ByteBuf) null);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitPostContent(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.PartVisitor$ByteBufVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Transfer-Encoding: ", byteArray0, "Content-Transfer-Encoding: ", charset0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitPostContent(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("$xaIl~<Ww_G{", byteArray0, "J.2bn", (Charset) null, "$xaIl~<Ww_G{", "J.2bn", "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      byte[] byteArray1 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray1);
      ByteBuffer byteBuffer1 = byteBuffer0.put((byte)0);
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor(byteBuffer1);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitEndOfHeaders(partVisitor_ByteBufferVisitor0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, "", charset0, "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitEndOfHeaders((PartVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      StringPart stringPart0 = new StringPart("ByteArrayPart name=Content-Transfer-Encoding:  contentType=Content-Transfer-Encoding:  charset=UTF-8 tranferEncoding=null contentId=null dispositionType=null filename=null", "", "Content-Transfer-Encoding: ");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.visitEndOfHeaders(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("0C`+V{nsGm", byteArray0, "0C`+V{nsGm");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("0C`+V{nsGm");
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor(byteBuffer0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitDispositionHeader(partVisitor_ByteBufferVisitor0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitDispositionHeader(partVisitor_CounterPartVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      byteArrayPart0.addCustomHeader("Xp_A", (String) null);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitCustomHeaders((PartVisitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Transfer-Encoding: ", byteArray0, "Content-Transfer-Encoding: ", charset0);
      byteArrayPart0.addCustomHeader("+izG/avR: !(|*,", "Content-Transfer-Encoding: ");
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitCustomHeaders(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("S$:4ow/^Z", byteArray0, "key", charset0, "S$:4ow/^Z", "Content-Transfer-Encoding: ", "S$:4ow/^Z");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(6);
      PartVisitor.ByteBufferVisitor partVisitor_ByteBufferVisitor0 = new PartVisitor.ByteBufferVisitor(byteBuffer0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitContentTypeHeader(partVisitor_ByteBufferVisitor0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitContentTypeHeader(partVisitor_CounterPartVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Transfer-Encoding: ", byteArray0, "Content-Transfer-Encoding: ", charset0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitContentTypeHeader(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitContentIdHeader(partVisitor_CounterPartVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      StringPart stringPart0 = new StringPart((String) null, "", "", charset0, "TK?.xkAOml5%oS", "");
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.visitContentIdHeader(partVisitor_ByteBufVisitor0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("$xaIl~<Ww_G{", byteArray0, "J.2bn", (Charset) null, "$xaIl~<Ww_G{", "J.2bn", "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("J.2bn");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      mockFileOutputStream0.close();
      try { 
        byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("$xaIl~<Ww_G{", byteArray0, "J.2bn", (Charset) null, "$xaIl~<Ww_G{", "J.2bn", "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("J.2bn");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      StringPart stringPart0 = new StringPart("2xQ+a 2HUIsTsW", "_E3@Of3H ", "_E3@Of3H ", charset0, "io.netty.allocator.normalCacheSize", "EKg.");
      byte[] byteArray0 = new byte[6];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferTo((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, (String) null, charset0, "", (String) null);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      SocketChannel socketChannel0 = SocketChannel.open();
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferContentTo(socketChannel0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("org.asynchttpclient.request.body.multipart.part.MultipartPart", byteArray0, "org.asynchttpclient.request.body.multipart.part.MultipartPart", (Charset) null, "org.asynchttpclient.request.body.multipart.part.MultipartPart", "charset");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferContentTo((WritableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      StringPart stringPart0 = new StringPart((String) null, "", "", charset0, "TK?.xkAOml5%oS", "");
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferContentTo((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      StringPart stringPart0 = new StringPart("", "org.asynchttpclient.request.body.multipart.part.MultipartPart");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeDirectBuffer(4583);
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET6;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      MultipartState multipartState0 = MultipartState.PRE_CONTENT;
      // Undeclared exception!
      try { 
        stringMultipartPart0.transfer(compositeByteBuf0, datagramChannel0, multipartState0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      StringPart stringPart0 = new StringPart("r2GPi\"j", "", "Content-Transfer-Encoding: ");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      MultipartState multipartState0 = MultipartState.CONTENT;
      // Undeclared exception!
      try { 
        stringMultipartPart0.transfer(emptyByteBuf0, (WritableByteChannel) null, multipartState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("org.asynchttpclient.request.body.multipart.part.MultipartPart", byteArray0, "org.asynchttpclient.request.body.multipart.part.MultipartPart", (Charset) null, "org.asynchttpclient.request.body.multipart.part.MultipartPart", "charset");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      StringPart stringPart0 = new StringPart("", "org.asynchttpclient.request.body.multipart.part.MultipartPart");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      ByteBuf byteBuf0 = stringMultipartPart0.computePreContentBytes((byte)0);
      MultipartState multipartState0 = MultipartState.PRE_CONTENT;
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transfer(byteBuf0, (ByteBuf) null, multipartState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart((byte[]) null);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.length();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MessageEndMultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("nDirectArea: ", byteArray0, "io.netty.tmpdir");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.computePreContentBytes((-4838));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity: -4838 (expected: 0+)
         //
         verifyException("io.netty.buffer.AbstractByteBufAllocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      StringPart stringPart0 = new StringPart("", "");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.computePostContentBytes((-2884));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity: -2884 (expected: 0+)
         //
         verifyException("io.netty.buffer.AbstractByteBufAllocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Transfer-Encodig: ", byteArray0, "Content-Transfer-Encodig: ", charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      byteArrayMultipartPart0.computePostContentBytes(536870912);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Transfer-Encoding: ", byteArray0, "Content-Transfer-Encoding: ", charset0);
      byteArrayPart0.addCustomHeader("+izG/tavR: !(|*,", "Content-Transfer-Encoding: ");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      assertFalse(byteArrayMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringPart stringPart0 = new StringPart((String) null, "io.netty.allocator.cacheTrimInterval", (String) null);
      byte[] byteArray0 = new byte[5];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      stringMultipartPart0.visitPreContent(partVisitor_CounterPartVisitor0);
      assertEquals(43, partVisitor_CounterPartVisitor0.getCount());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      StringPart stringPart0 = new StringPart("2xQ+a 2HUIsTsW", "_E3@Of3H ", "_E3@Of3H ", charset0, "io.netty.allocator.normalCacheSize", "EKg.");
      byte[] byteArray0 = new byte[6];
      stringPart0.setDispositionType("I/51ZyI&*RW");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      assertFalse(stringMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Transfer-Encoding: ", byteArray0, "Content-Transfer-Encoding: ", charset0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MultipartState multipartState0 = MultipartState.POST_CONTENT;
      byteArrayMultipartPart0.state = multipartState0;
      byteArrayMultipartPart0.transferTo((ByteBuf) emptyByteBuf0);
      byteArrayMultipartPart0.close();
      assertEquals(MultipartState.POST_CONTENT, byteArrayMultipartPart0.getState());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Transfer-Encoding: ", byteArray0, "Content-Transfer-Encoding: ", charset0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      byteArrayMultipartPart0.transferTo((ByteBuf) emptyByteBuf0);
      byteArrayMultipartPart0.close();
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferTo((WritableByteChannel) datagramChannel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refCnt: 0
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Transfer-Encoding: ", byteArray0, "Content-Transfer-Encoding: ", charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      byteArrayMultipartPart0.close();
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refCnt: 0, decrement: 1
         //
         verifyException("io.netty.buffer.AbstractReferenceCountedByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("$xaIl~<Ww_G{", byteArray0, "J.2bn", (Charset) null, "$xaIl~<Ww_G{", "J.2bn", "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("J.2bn");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      MultipartState multipartState0 = MultipartState.POST_CONTENT;
      byteArrayMultipartPart0.state = multipartState0;
      long long0 = byteArrayMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
      assertEquals(2L, fileChannel0.position());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      byte[] byteArray1 = new byte[3];
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray1);
      MultipartState multipartState0 = MultipartState.CONTENT;
      byteArrayMultipartPart0.state = multipartState0;
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferTo((WritableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Transfer-Encoding: ", byteArray0, "Content-Transfer-Encoding: ", charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferTo((WritableByteChannel) datagramChannel0);
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      MultipartState multipartState0 = MultipartState.DONE;
      messageEndMultipartPart0.state = multipartState0;
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0);
      byte[] byteArray1 = new byte[3];
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray1);
      byteArrayMultipartPart0.state = messageEndMultipartPart0.state;
      long long0 = byteArrayMultipartPart0.transferTo((WritableByteChannel) null);
      assertEquals(0L, long0);
      assertFalse(byteArrayMultipartPart0.isTargetSlow());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Transfer-Encoding: ", byteArray0, "Content-Transfer-Encoding: ", charset0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MultipartState multipartState0 = MultipartState.CONTENT;
      byteArrayMultipartPart0.state = multipartState0;
      long long0 = byteArrayMultipartPart0.transferTo((ByteBuf) emptyByteBuf0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Transfer-Encoding: ", byteArray0, "Content-Transfer-Encoding: ", charset0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MultipartState multipartState0 = MultipartState.DONE;
      byteArrayMultipartPart0.state = multipartState0;
      long long0 = byteArrayMultipartPart0.transferTo((ByteBuf) emptyByteBuf0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("", byteArray0, (String) null, charset0, "", (String) null);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      boolean boolean0 = byteArrayMultipartPart0.isTargetSlow();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Transfer-Encoding: ", byteArray0, "Content-Transfer-Encoding: ", charset0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      long long0 = byteArrayMultipartPart0.length();
      assertEquals(140L, long0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("Content-Transfer-Encoding: ", byteArray0, "Content-Transfer-Encoding: ", charset0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MultipartState multipartState0 = MultipartState.POST_CONTENT;
      byteArrayMultipartPart0.state = multipartState0;
      byteArrayMultipartPart0.transferTo((ByteBuf) emptyByteBuf0);
      long long0 = byteArrayMultipartPart0.transferTo((ByteBuf) emptyByteBuf0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("$xaIl~<Ww_G{", byteArray0, "J.2bn", (Charset) null, "$xaIl~<Ww_G{", "J.2bn", "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      MultipartState multipartState0 = byteArrayMultipartPart0.getState();
      assertEquals(MultipartState.PRE_CONTENT, multipartState0);
  }
}
