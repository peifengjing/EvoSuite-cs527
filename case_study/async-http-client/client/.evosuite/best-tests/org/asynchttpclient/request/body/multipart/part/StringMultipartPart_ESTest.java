/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 01:39:01 GMT 2017
 */

package org.asynchttpclient.request.body.multipart.part;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import java.nio.channels.WritableByteChannel;
import java.nio.charset.Charset;
import java.util.LinkedList;
import org.asynchttpclient.Param;
import org.asynchttpclient.request.body.multipart.StringPart;
import org.asynchttpclient.request.body.multipart.part.StringMultipartPart;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringMultipartPart_ESTest extends StringMultipartPart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      StringPart stringPart0 = mock(StringPart.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0, charset0).when(stringPart0).getCharset();
      doReturn("").when(stringPart0).getContentId();
      doReturn("Xv#`*n").when(stringPart0).getContentType();
      doReturn(linkedList0).when(stringPart0).getCustomHeaders();
      doReturn("s*-XX:MaxDirectMemorySizes*=s*([0-9]+)s*([kKmMgG]?)s*$", "rSU").when(stringPart0).getDispositionType();
      doReturn("s*-XX:MaxDirectMemorySizes*=s*([0-9]+)s*([kKmMgG]?)s*$", "#61l,K").when(stringPart0).getName();
      doReturn(" (+").when(stringPart0).getTransferEncoding();
      doReturn("1H3`/q&*pL").when(stringPart0).getValue();
      byte[] byteArray0 = new byte[2];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn((int)(byte)1).when(writableByteChannel0).write(any(java.nio.ByteBuffer.class));
      long long0 = stringMultipartPart0.transferContentTo(writableByteChannel0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      StringPart stringPart0 = mock(StringPart.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0, charset0).when(stringPart0).getCharset();
      doReturn("GbBNm").when(stringPart0).getContentId();
      doReturn("A[y}h `_\"Y<{").when(stringPart0).getContentType();
      doReturn(linkedList0).when(stringPart0).getCustomHeaders();
      doReturn("", "GbBNm").when(stringPart0).getDispositionType();
      doReturn("A[y}h `_\"Y<{", "uMSOwGbiIi7/C").when(stringPart0).getName();
      doReturn("").when(stringPart0).getTransferEncoding();
      doReturn("").when(stringPart0).getValue();
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      ByteBuf byteBuf0 = stringMultipartPart0.computePostContentBytes(0);
      long long0 = stringMultipartPart0.transferContentTo(byteBuf0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      StringPart stringPart0 = mock(StringPart.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0, charset0).when(stringPart0).getCharset();
      doReturn("GbBNm").when(stringPart0).getContentId();
      doReturn("GbBNm").when(stringPart0).getContentType();
      doReturn(linkedList0).when(stringPart0).getCustomHeaders();
      doReturn("", "GbBNm").when(stringPart0).getDispositionType();
      doReturn("GbBNm", "GbBNm").when(stringPart0).getName();
      doReturn("").when(stringPart0).getTransferEncoding();
      doReturn("").when(stringPart0).getValue();
      byte[] byteArray0 = new byte[9];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      long long0 = stringMultipartPart0.getContentLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      StringPart stringPart0 = mock(StringPart.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0, charset0).when(stringPart0).getCharset();
      doReturn("$jK?|1DI{A&<n").when(stringPart0).getContentId();
      doReturn("$jK?|1DI{A&<n").when(stringPart0).getContentType();
      doReturn(linkedList0).when(stringPart0).getCustomHeaders();
      doReturn("xih", "").when(stringPart0).getDispositionType();
      doReturn("RGj*A31T;T'o~bU", "xih").when(stringPart0).getName();
      doReturn("xih").when(stringPart0).getTransferEncoding();
      doReturn("$jK?|1DI{A&<n").when(stringPart0).getValue();
      byte[] byteArray0 = new byte[6];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferContentTo((WritableByteChannel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      StringPart stringPart0 = mock(StringPart.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0, charset0).when(stringPart0).getCharset();
      doReturn("GbBNm").when(stringPart0).getContentId();
      doReturn("A[y}h `_\"Y<{").when(stringPart0).getContentType();
      doReturn(linkedList0).when(stringPart0).getCustomHeaders();
      doReturn("", "GbBNm").when(stringPart0).getDispositionType();
      doReturn("A[y}h `_\"Y<{", "uMSOwGbiIi7/C").when(stringPart0).getName();
      doReturn("").when(stringPart0).getTransferEncoding();
      doReturn("").when(stringPart0).getValue();
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn(945).when(writableByteChannel0).write(any(java.nio.ByteBuffer.class));
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferContentTo(writableByteChannel0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.EmptyByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      StringPart stringPart0 = mock(StringPart.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0, charset0).when(stringPart0).getCharset();
      doReturn("u 6'4DX2P1u4dk4").when(stringPart0).getContentId();
      doReturn(",Qgjf/TpZUi").when(stringPart0).getContentType();
      doReturn(linkedList0).when(stringPart0).getCustomHeaders();
      doReturn("@ip", ",Qgjf/TpZUi").when(stringPart0).getDispositionType();
      doReturn(",Qgjf/TpZUi", ",Qgjf/TpZUi").when(stringPart0).getName();
      doReturn("u 6'4DX2P1u4dk4").when(stringPart0).getTransferEncoding();
      doReturn("@ip").when(stringPart0).getValue();
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      stringMultipartPart0.close();
      ByteBuf byteBuf0 = stringMultipartPart0.computePostContentBytes((byte)0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferContentTo(byteBuf0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refCnt: 0
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      StringPart stringPart0 = mock(StringPart.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0, charset0).when(stringPart0).getCharset();
      doReturn("GbBNm").when(stringPart0).getContentId();
      doReturn("GbBNm").when(stringPart0).getContentType();
      doReturn(linkedList0).when(stringPart0).getCustomHeaders();
      doReturn("KdnFQ`h+U", "GbBNm").when(stringPart0).getDispositionType();
      doReturn("GbBNm", "GbBNm").when(stringPart0).getName();
      doReturn("KdnFQ`h+U").when(stringPart0).getTransferEncoding();
      doReturn("KdnFQ`h+U").when(stringPart0).getValue();
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferContentTo((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset.defaultCharset();
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      StringPart stringPart0 = mock(StringPart.class, new ViolatedAssumptionAnswer());
      doReturn("sun.misc.Unsafe.copyMemory: available", (String) null).when(stringPart0).getDispositionType();
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = null;
      try {
        stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.request.body.multipart.part.MultipartPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      StringPart stringPart0 = mock(StringPart.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0, charset0).when(stringPart0).getCharset();
      doReturn("GbBNm").when(stringPart0).getContentId();
      doReturn("GbBNm").when(stringPart0).getContentType();
      doReturn(linkedList0).when(stringPart0).getCustomHeaders();
      doReturn("KdnFQ`h+U", "GbBNm").when(stringPart0).getDispositionType();
      doReturn("GbBNm", "GbBNm").when(stringPart0).getName();
      doReturn("KdnFQ`h+U").when(stringPart0).getTransferEncoding();
      doReturn("KdnFQ`h+U").when(stringPart0).getValue();
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      long long0 = stringMultipartPart0.getContentLength();
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      StringPart stringPart0 = mock(StringPart.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0, charset0).when(stringPart0).getCharset();
      doReturn("GbBNm").when(stringPart0).getContentId();
      doReturn("GbBNm").when(stringPart0).getContentType();
      doReturn(linkedList0).when(stringPart0).getCustomHeaders();
      doReturn("KdnFQ`h+U", "GbBNm").when(stringPart0).getDispositionType();
      doReturn("GbBNm", "GbBNm").when(stringPart0).getName();
      doReturn("KdnFQ`h+U").when(stringPart0).getTransferEncoding();
      doReturn("KdnFQ`h+U").when(stringPart0).getValue();
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(writableByteChannel0).write(any(java.nio.ByteBuffer.class));
      long long0 = stringMultipartPart0.transferContentTo(writableByteChannel0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      StringPart stringPart0 = mock(StringPart.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0, charset0).when(stringPart0).getCharset();
      doReturn("u 6'4DX2P1u4dk4").when(stringPart0).getContentId();
      doReturn(",Qgjf/TpZUi").when(stringPart0).getContentType();
      doReturn(linkedList0).when(stringPart0).getCustomHeaders();
      doReturn("@ip", ",Qgjf/TpZUi").when(stringPart0).getDispositionType();
      doReturn(",Qgjf/TpZUi", "").when(stringPart0).getName();
      doReturn("u 6'4DX2P1u4dk4").when(stringPart0).getTransferEncoding();
      doReturn("yp9m,zz.b$H:l Y").when(stringPart0).getValue();
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      stringMultipartPart0.close();
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferContentTo(writableByteChannel0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refCnt: 0
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      StringPart stringPart0 = mock(StringPart.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0, charset0).when(stringPart0).getCharset();
      doReturn("GbBNm").when(stringPart0).getContentId();
      doReturn("GbBNm").when(stringPart0).getContentType();
      doReturn(linkedList0).when(stringPart0).getCustomHeaders();
      doReturn("KdnFQ`h+U", "GbBNm").when(stringPart0).getDispositionType();
      doReturn("GbBNm", "GbBNm").when(stringPart0).getName();
      doReturn("KdnFQ`h+U").when(stringPart0).getTransferEncoding();
      doReturn("KdnFQ`h+U").when(stringPart0).getValue();
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      ByteBuf byteBuf0 = stringMultipartPart0.computePostContentBytes(0);
      long long0 = stringMultipartPart0.transferContentTo(byteBuf0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(writableByteChannel0).write(any(java.nio.ByteBuffer.class));
      long long1 = stringMultipartPart0.transferContentTo(writableByteChannel0);
      assertFalse(long1 == long0);
  }
}
