/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 06:20:41 GMT 2017
 */

package org.asynchttpclient.netty.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.AbstractReferenceCountedByteBuf;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.CompositeByteBuf;
import io.netty.buffer.EmptyByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.buffer.UnpooledDirectByteBuf;
import io.netty.util.internal.logging.InternalLoggerFactory;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Stack;
import org.apache.tomcat.util.buf.Utf8Encoder;
import org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utf8ByteBufCharsetDecoder_ESTest extends Utf8ByteBufCharsetDecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      CharBuffer charBuffer0 = utf8ByteBufCharsetDecoder0.charBuffer;
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1024, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(1024, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1024, charBuffer0.limit());
      assertEquals(1024, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(1024, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1024, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(1024, charBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1024, byteBuffer0.remaining());
      assertEquals(1126, byteBuffer0.capacity());
      assertEquals(1024, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1024 cap=1126]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(false);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertNotNull(pooledByteBufAllocator0);
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer();
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertFalse(compositeByteBuf0.isReadable());
      assertEquals(0, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertNotNull(compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.retain(3025);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertEquals(3026, compositeByteBuf0.refCnt());
      assertFalse(compositeByteBuf0.isReadable());
      assertEquals(0, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(0, compositeByteBuf1.capacity());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(3026, compositeByteBuf1.refCnt());
      assertEquals(0, compositeByteBuf1.readableBytes());
      assertEquals(0, compositeByteBuf1.writerIndex());
      assertFalse(compositeByteBuf1.isReadable());
      assertEquals(0, compositeByteBuf1.numComponents());
      assertEquals(16, compositeByteBuf1.maxNumComponents());
      assertNotNull(compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf1.writeDouble(3025);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(8, compositeByteBuf0.readableBytes());
      assertEquals(64, compositeByteBuf0.capacity());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(3026, compositeByteBuf0.refCnt());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(8, compositeByteBuf0.writerIndex());
      assertEquals(64, compositeByteBuf1.capacity());
      assertEquals(8, compositeByteBuf1.writerIndex());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(3026, compositeByteBuf1.refCnt());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(16, compositeByteBuf1.maxNumComponents());
      assertEquals(8, compositeByteBuf1.readableBytes());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(8, compositeByteBuf2.readableBytes());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(8, compositeByteBuf2.writerIndex());
      assertEquals(1, compositeByteBuf2.numComponents());
      assertEquals(3026, compositeByteBuf2.refCnt());
      assertEquals(64, compositeByteBuf2.capacity());
      assertEquals(16, compositeByteBuf2.maxNumComponents());
      assertNotNull(compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      
      String string0 = utf8ByteBufCharsetDecoder0.decode((ByteBuf) compositeByteBuf2);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(8, compositeByteBuf0.readableBytes());
      assertEquals(64, compositeByteBuf0.capacity());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(3026, compositeByteBuf0.refCnt());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(8, compositeByteBuf0.writerIndex());
      assertEquals(64, compositeByteBuf1.capacity());
      assertEquals(8, compositeByteBuf1.writerIndex());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(3026, compositeByteBuf1.refCnt());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(16, compositeByteBuf1.maxNumComponents());
      assertEquals(8, compositeByteBuf1.readableBytes());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(8, compositeByteBuf2.readableBytes());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(8, compositeByteBuf2.writerIndex());
      assertEquals(1, compositeByteBuf2.numComponents());
      assertEquals(3026, compositeByteBuf2.refCnt());
      assertEquals(64, compositeByteBuf2.capacity());
      assertEquals(16, compositeByteBuf2.maxNumComponents());
      assertNotNull(string0);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      
      ByteBuf[] byteBufArray0 = new ByteBuf[8];
      byteBufArray0[0] = (ByteBuf) compositeByteBuf1;
      byteBufArray0[1] = (ByteBuf) compositeByteBuf1;
      byteBufArray0[2] = (ByteBuf) compositeByteBuf2;
      byteBufArray0[3] = (ByteBuf) compositeByteBuf0;
      byteBufArray0[4] = (ByteBuf) compositeByteBuf1;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)76;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)127, (byte) (-7), (byte)6, (byte) (-29), (byte)76}, byteArray0);
      
      CompositeByteBuf compositeByteBuf3 = compositeByteBuf2.capacity(3025);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(8, compositeByteBuf0.readableBytes());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(3026, compositeByteBuf0.refCnt());
      assertEquals(3025, compositeByteBuf0.capacity());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(8, compositeByteBuf0.writerIndex());
      assertEquals(3025, compositeByteBuf3.capacity());
      assertEquals(0, compositeByteBuf3.readerIndex());
      assertEquals(8, compositeByteBuf3.writerIndex());
      assertTrue(compositeByteBuf3.isReadable());
      assertEquals(3026, compositeByteBuf3.refCnt());
      assertEquals(16, compositeByteBuf3.maxNumComponents());
      assertEquals(8, compositeByteBuf3.readableBytes());
      assertEquals(2, compositeByteBuf3.numComponents());
      assertEquals(8, compositeByteBuf1.writerIndex());
      assertEquals(3025, compositeByteBuf1.capacity());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(3026, compositeByteBuf1.refCnt());
      assertEquals(16, compositeByteBuf1.maxNumComponents());
      assertEquals(8, compositeByteBuf1.readableBytes());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(8, compositeByteBuf2.readableBytes());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(8, compositeByteBuf2.writerIndex());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(3026, compositeByteBuf2.refCnt());
      assertEquals(16, compositeByteBuf2.maxNumComponents());
      assertEquals(3025, compositeByteBuf2.capacity());
      assertNotNull(compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      
      byteBufArray0[5] = (ByteBuf) compositeByteBuf3;
      CompositeByteBuf compositeByteBuf4 = compositeByteBuf2.addComponents((Iterable<ByteBuf>) compositeByteBuf0);
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(3033, compositeByteBuf0.capacity());
      assertEquals(8, compositeByteBuf0.readableBytes());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(3026, compositeByteBuf0.refCnt());
      assertEquals(3, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(8, compositeByteBuf0.writerIndex());
      assertEquals(8, compositeByteBuf1.writerIndex());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(3026, compositeByteBuf1.refCnt());
      assertEquals(3033, compositeByteBuf1.capacity());
      assertEquals(16, compositeByteBuf1.maxNumComponents());
      assertEquals(8, compositeByteBuf1.readableBytes());
      assertEquals(3, compositeByteBuf1.numComponents());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(8, compositeByteBuf2.readableBytes());
      assertEquals(3033, compositeByteBuf2.capacity());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(8, compositeByteBuf2.writerIndex());
      assertEquals(3, compositeByteBuf2.numComponents());
      assertEquals(3026, compositeByteBuf2.refCnt());
      assertEquals(16, compositeByteBuf2.maxNumComponents());
      assertEquals(3026, compositeByteBuf4.refCnt());
      assertTrue(compositeByteBuf4.isReadable());
      assertEquals(8, compositeByteBuf4.readableBytes());
      assertEquals(16, compositeByteBuf4.maxNumComponents());
      assertEquals(3033, compositeByteBuf4.capacity());
      assertEquals(0, compositeByteBuf4.readerIndex());
      assertEquals(8, compositeByteBuf4.writerIndex());
      assertEquals(3, compositeByteBuf4.numComponents());
      assertNotNull(compositeByteBuf4);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf4);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf4);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf4);
      assertSame(compositeByteBuf4, compositeByteBuf3);
      assertSame(compositeByteBuf4, compositeByteBuf1);
      assertSame(compositeByteBuf4, compositeByteBuf2);
      assertSame(compositeByteBuf4, compositeByteBuf0);
      
      byteBufArray0[6] = (ByteBuf) compositeByteBuf4;
      byteBufArray0[7] = (ByteBuf) compositeByteBuf0;
      // Undeclared exception!
      utf8ByteBufCharsetDecoder0.decode(byteBufArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertNotNull(pooledByteBufAllocator0);
      
      Stack<ByteBuf> stack0 = new Stack<ByteBuf>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, false, 3864, stack0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(compositeByteBuf0.isReadable());
      assertEquals(0, compositeByteBuf0.numComponents());
      assertEquals(3864, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertNotNull(compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeInt(3864);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(3864, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(4, compositeByteBuf0.writerIndex());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(4, compositeByteBuf0.readableBytes());
      assertEquals(64, compositeByteBuf0.capacity());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(4, compositeByteBuf1.writerIndex());
      assertEquals(4, compositeByteBuf1.readableBytes());
      assertEquals(64, compositeByteBuf1.capacity());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(3864, compositeByteBuf1.maxNumComponents());
      assertNotNull(compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf1.writerIndex(11);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(3864, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(11, compositeByteBuf0.writerIndex());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(11, compositeByteBuf0.readableBytes());
      assertEquals(64, compositeByteBuf0.capacity());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(11, compositeByteBuf1.readableBytes());
      assertEquals(64, compositeByteBuf1.capacity());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(11, compositeByteBuf1.writerIndex());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(3864, compositeByteBuf1.maxNumComponents());
      assertEquals(64, compositeByteBuf2.capacity());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(1, compositeByteBuf2.numComponents());
      assertEquals(3864, compositeByteBuf2.maxNumComponents());
      assertEquals(11, compositeByteBuf2.writerIndex());
      assertEquals(11, compositeByteBuf2.readableBytes());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertNotNull(compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      
      CompositeByteBuf compositeByteBuf3 = compositeByteBuf2.ensureWritable(3864);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(3864, compositeByteBuf0.maxNumComponents());
      assertEquals(4096, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(11, compositeByteBuf0.writerIndex());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(11, compositeByteBuf0.readableBytes());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(11, compositeByteBuf1.readableBytes());
      assertEquals(4096, compositeByteBuf1.capacity());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(11, compositeByteBuf1.writerIndex());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(3864, compositeByteBuf1.maxNumComponents());
      assertEquals(4096, compositeByteBuf2.capacity());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(3864, compositeByteBuf2.maxNumComponents());
      assertEquals(11, compositeByteBuf2.writerIndex());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(11, compositeByteBuf2.readableBytes());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(1, compositeByteBuf3.refCnt());
      assertEquals(2, compositeByteBuf3.numComponents());
      assertTrue(compositeByteBuf3.isReadable());
      assertEquals(4096, compositeByteBuf3.capacity());
      assertEquals(0, compositeByteBuf3.readerIndex());
      assertEquals(11, compositeByteBuf3.readableBytes());
      assertEquals(11, compositeByteBuf3.writerIndex());
      assertEquals(3864, compositeByteBuf3.maxNumComponents());
      assertNotNull(compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      
      CompositeByteBuf compositeByteBuf4 = compositeByteBuf3.discardReadBytes();
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(3864, compositeByteBuf0.maxNumComponents());
      assertEquals(4096, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(11, compositeByteBuf0.writerIndex());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(11, compositeByteBuf0.readableBytes());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(11, compositeByteBuf1.readableBytes());
      assertEquals(4096, compositeByteBuf1.capacity());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(11, compositeByteBuf1.writerIndex());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(3864, compositeByteBuf1.maxNumComponents());
      assertEquals(4096, compositeByteBuf2.capacity());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(3864, compositeByteBuf2.maxNumComponents());
      assertEquals(11, compositeByteBuf2.writerIndex());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(11, compositeByteBuf2.readableBytes());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(1, compositeByteBuf3.refCnt());
      assertEquals(2, compositeByteBuf3.numComponents());
      assertTrue(compositeByteBuf3.isReadable());
      assertEquals(4096, compositeByteBuf3.capacity());
      assertEquals(0, compositeByteBuf3.readerIndex());
      assertEquals(11, compositeByteBuf3.readableBytes());
      assertEquals(11, compositeByteBuf3.writerIndex());
      assertEquals(3864, compositeByteBuf3.maxNumComponents());
      assertEquals(1, compositeByteBuf4.refCnt());
      assertEquals(0, compositeByteBuf4.readerIndex());
      assertEquals(3864, compositeByteBuf4.maxNumComponents());
      assertEquals(4096, compositeByteBuf4.capacity());
      assertEquals(11, compositeByteBuf4.writerIndex());
      assertEquals(11, compositeByteBuf4.readableBytes());
      assertTrue(compositeByteBuf4.isReadable());
      assertEquals(2, compositeByteBuf4.numComponents());
      assertNotNull(compositeByteBuf4);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf4);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf4);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf4);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf4);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertSame(compositeByteBuf4, compositeByteBuf0);
      assertSame(compositeByteBuf4, compositeByteBuf1);
      assertSame(compositeByteBuf4, compositeByteBuf2);
      assertSame(compositeByteBuf4, compositeByteBuf3);
      
      String string0 = utf8ByteBufCharsetDecoder0.decode((ByteBuf) compositeByteBuf4);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(3864, compositeByteBuf0.maxNumComponents());
      assertEquals(4096, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(11, compositeByteBuf0.writerIndex());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(11, compositeByteBuf0.readableBytes());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(11, compositeByteBuf1.readableBytes());
      assertEquals(4096, compositeByteBuf1.capacity());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(11, compositeByteBuf1.writerIndex());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(3864, compositeByteBuf1.maxNumComponents());
      assertEquals(4096, compositeByteBuf2.capacity());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(3864, compositeByteBuf2.maxNumComponents());
      assertEquals(11, compositeByteBuf2.writerIndex());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(11, compositeByteBuf2.readableBytes());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(1, compositeByteBuf3.refCnt());
      assertEquals(2, compositeByteBuf3.numComponents());
      assertTrue(compositeByteBuf3.isReadable());
      assertEquals(4096, compositeByteBuf3.capacity());
      assertEquals(0, compositeByteBuf3.readerIndex());
      assertEquals(11, compositeByteBuf3.readableBytes());
      assertEquals(11, compositeByteBuf3.writerIndex());
      assertEquals(3864, compositeByteBuf3.maxNumComponents());
      assertEquals(1, compositeByteBuf4.refCnt());
      assertEquals(0, compositeByteBuf4.readerIndex());
      assertEquals(3864, compositeByteBuf4.maxNumComponents());
      assertEquals(4096, compositeByteBuf4.capacity());
      assertEquals(11, compositeByteBuf4.writerIndex());
      assertEquals(11, compositeByteBuf4.readableBytes());
      assertTrue(compositeByteBuf4.isReadable());
      assertEquals(2, compositeByteBuf4.numComponents());
      assertNotNull(string0);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf4);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf4);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf4);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf4);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertSame(compositeByteBuf4, compositeByteBuf0);
      assertSame(compositeByteBuf4, compositeByteBuf1);
      assertSame(compositeByteBuf4, compositeByteBuf2);
      assertSame(compositeByteBuf4, compositeByteBuf3);
      
      CharBuffer charBuffer0 = utf8ByteBufCharsetDecoder0.allocateCharBuffer(0);
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      CompositeByteBuf compositeByteBuf5 = compositeByteBuf2.writerIndex(3864);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(3864, compositeByteBuf0.maxNumComponents());
      assertEquals(4096, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(3864, compositeByteBuf0.writerIndex());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(3864, compositeByteBuf0.readableBytes());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(4096, compositeByteBuf1.capacity());
      assertEquals(3864, compositeByteBuf1.readableBytes());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(3864, compositeByteBuf1.writerIndex());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(3864, compositeByteBuf1.maxNumComponents());
      assertEquals(3864, compositeByteBuf2.readableBytes());
      assertEquals(4096, compositeByteBuf2.capacity());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(3864, compositeByteBuf2.maxNumComponents());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(3864, compositeByteBuf2.writerIndex());
      assertTrue(compositeByteBuf5.isReadable());
      assertEquals(2, compositeByteBuf5.numComponents());
      assertEquals(3864, compositeByteBuf5.readableBytes());
      assertEquals(4096, compositeByteBuf5.capacity());
      assertEquals(1, compositeByteBuf5.refCnt());
      assertEquals(0, compositeByteBuf5.readerIndex());
      assertEquals(3864, compositeByteBuf5.maxNumComponents());
      assertEquals(3864, compositeByteBuf5.writerIndex());
      assertNotNull(compositeByteBuf5);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf4);
      assertSame(compositeByteBuf0, compositeByteBuf5);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf4);
      assertSame(compositeByteBuf1, compositeByteBuf5);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf4);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf5);
      assertSame(compositeByteBuf5, compositeByteBuf0);
      assertSame(compositeByteBuf5, compositeByteBuf2);
      assertSame(compositeByteBuf5, compositeByteBuf4);
      assertSame(compositeByteBuf5, compositeByteBuf3);
      assertSame(compositeByteBuf5, compositeByteBuf1);
      
      // Undeclared exception!
      try { 
        utf8ByteBufCharsetDecoder0.decode((ByteBuf) compositeByteBuf5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state = CODING_END, new state = CODING
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertNotNull(unpooledByteBufAllocator0);
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.release());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertNotNull(emptyByteBuf0);
      
      ByteBuf[] byteBufArray0 = new ByteBuf[4];
      byteBufArray0[0] = (ByteBuf) emptyByteBuf0;
      byteBufArray0[1] = (ByteBuf) emptyByteBuf0;
      byteBufArray0[2] = (ByteBuf) emptyByteBuf0;
      byteBufArray0[3] = (ByteBuf) emptyByteBuf0;
      String string0 = Utf8ByteBufCharsetDecoder.decodeUtf8(byteBufArray0);
      assertNotNull(string0);
      
      String string1 = utf8ByteBufCharsetDecoder0.decode(byteBufArray0[2]);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      ByteBuf byteBuf0 = emptyByteBuf0.setIndex(0, 0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.release());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadable());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.release());
      assertEquals(0, byteBuf0.writerIndex());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.arrayOffset());
      assertFalse(byteBuf0.isWritable());
      assertTrue(byteBuf0.hasArray());
      assertNotNull(byteBuf0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      
      String string2 = utf8ByteBufCharsetDecoder0.decode(byteBuf0);
      assertFalse(unpooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.release());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(0, emptyByteBuf0.capacity());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertFalse(emptyByteBuf0.isWritable());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.writableBytes());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals(0, byteBuf0.maxCapacity());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertFalse(byteBuf0.isReadOnly());
      assertTrue(byteBuf0.isDirect());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadable());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.release());
      assertEquals(0, byteBuf0.writerIndex());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.arrayOffset());
      assertFalse(byteBuf0.isWritable());
      assertTrue(byteBuf0.hasArray());
      assertEquals("", string2);
      assertNotNull(string2);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      assertFalse(string2.equals((Object)string0));
      
      ByteBuf[] byteBufArray1 = new ByteBuf[8];
      assertFalse(byteBufArray1.equals((Object)byteBufArray0));
      
      byteBufArray1[0] = (ByteBuf) emptyByteBuf0;
      byteBufArray1[1] = (ByteBuf) emptyByteBuf0;
      UnpooledByteBufAllocator unpooledByteBufAllocator1 = new UnpooledByteBufAllocator(false, false);
      assertFalse(unpooledByteBufAllocator1.isDirectBufferPooled());
      assertNotNull(unpooledByteBufAllocator1);
      assertFalse(unpooledByteBufAllocator1.equals((Object)unpooledByteBufAllocator0));
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator1, 0, 0);
      assertEquals(0, unpooledDirectByteBuf0.readerIndex());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.isReadable());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.writerIndex());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.readableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledByteBufAllocator1.isDirectBufferPooled());
      assertNotNull(unpooledDirectByteBuf0);
      assertFalse(unpooledByteBufAllocator1.equals((Object)unpooledByteBufAllocator0));
      
      ByteBuf byteBuf1 = unpooledDirectByteBuf0.setZero(0, 0);
      assertEquals(0, unpooledDirectByteBuf0.readerIndex());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.isReadable());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.writerIndex());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.readableBytes());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, byteBuf1.readerIndex());
      assertFalse(byteBuf1.hasArray());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(0, byteBuf1.capacity());
      assertEquals(0, byteBuf1.readableBytes());
      assertEquals(0, byteBuf1.writerIndex());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(1, byteBuf1.refCnt());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.isReadable());
      assertFalse(unpooledByteBufAllocator1.isDirectBufferPooled());
      assertNotNull(byteBuf1);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(unpooledByteBufAllocator1, unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator1.equals((Object)unpooledByteBufAllocator0));
      
      boolean boolean0 = ((AbstractReferenceCountedByteBuf) byteBuf1).release();
      assertEquals(0, unpooledDirectByteBuf0.readerIndex());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertFalse(unpooledDirectByteBuf0.isReadable());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.writerIndex());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.readableBytes());
      assertEquals(0, unpooledDirectByteBuf0.refCnt());
      assertEquals(0, byteBuf1.readerIndex());
      assertFalse(byteBuf1.hasArray());
      assertFalse(byteBuf1.hasMemoryAddress());
      assertEquals(0, byteBuf1.capacity());
      assertEquals(0, byteBuf1.readableBytes());
      assertEquals(0, byteBuf1.writerIndex());
      assertEquals(1, byteBuf1.nioBufferCount());
      assertEquals(0, byteBuf1.refCnt());
      assertTrue(byteBuf1.isDirect());
      assertFalse(byteBuf1.isReadable());
      assertFalse(unpooledByteBufAllocator1.isDirectBufferPooled());
      assertTrue(boolean0);
      assertSame(unpooledDirectByteBuf0, byteBuf1);
      assertSame(byteBuf1, unpooledDirectByteBuf0);
      assertNotSame(unpooledByteBufAllocator1, unpooledByteBufAllocator0);
      assertFalse(unpooledByteBufAllocator1.equals((Object)unpooledByteBufAllocator0));
      
      byteBufArray1[2] = byteBuf1;
      byteBufArray1[3] = (ByteBuf) emptyByteBuf0;
      byteBufArray1[4] = (ByteBuf) emptyByteBuf0;
      byteBufArray1[5] = byteBuf0;
      byteBufArray1[6] = byteBuf0;
      byteBufArray1[7] = byteBuf0;
      // Undeclared exception!
      try { 
        Utf8ByteBufCharsetDecoder.decodeUtf8(byteBufArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refCnt: 0, increment: 1
         //
         verifyException("io.netty.buffer.AbstractReferenceCountedByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      CharBuffer charBuffer0 = utf8ByteBufCharsetDecoder0.allocateCharBuffer(243);
      assertEquals(243, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(243, charBuffer0.length());
      assertEquals(243, charBuffer0.remaining());
      assertEquals(243, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      utf8ByteBufCharsetDecoder0.charBuffer = null;
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = '$';
      charArray0[2] = ':';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertEquals(3, charBuffer1.capacity());
      assertEquals(3, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(3, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(3, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("9$:", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'9', '$', ':'}, charArray0);
      
      utf8ByteBufCharsetDecoder0.charBuffer = null;
      // Undeclared exception!
      try { 
        utf8ByteBufCharsetDecoder0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      CharBuffer charBuffer0 = utf8ByteBufCharsetDecoder0.charBuffer;
      assertEquals(0, charBuffer0.position());
      assertEquals(1024, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1024, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1024, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1024, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      ByteBuf[] byteBufArray0 = new ByteBuf[0];
      String string0 = utf8ByteBufCharsetDecoder0.decode(byteBufArray0);
      assertNotNull(string0);
      
      CharBuffer charBuffer1 = utf8ByteBufCharsetDecoder0.allocateCharBuffer(3);
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(3, charBuffer1.remaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(3, charBuffer1.limit());
      assertEquals(3, charBuffer1.capacity());
      assertEquals("\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(3, charBuffer1.length());
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertNotNull(pooledByteBufAllocator0);
      
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, false, 25);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(25, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertFalse(compositeByteBuf0.isReadable());
      assertNotNull(compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeByte(25);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(1, compositeByteBuf0.writerIndex());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(25, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.readableBytes());
      assertEquals(64, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(1, compositeByteBuf1.writerIndex());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(64, compositeByteBuf1.capacity());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(25, compositeByteBuf1.maxNumComponents());
      assertEquals(1, compositeByteBuf1.readableBytes());
      assertNotNull(compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf1.ensureWritable(65566);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(1, compositeByteBuf0.writerIndex());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(25, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(131072, compositeByteBuf0.capacity());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertEquals(1, compositeByteBuf1.writerIndex());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(131072, compositeByteBuf1.capacity());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(25, compositeByteBuf1.maxNumComponents());
      assertEquals(1, compositeByteBuf1.readableBytes());
      assertEquals(1, compositeByteBuf2.writerIndex());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(131072, compositeByteBuf2.capacity());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(25, compositeByteBuf2.maxNumComponents());
      assertEquals(1, compositeByteBuf2.readableBytes());
      assertNotNull(compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      
      CompositeByteBuf compositeByteBuf3 = compositeByteBuf2.resetReaderIndex();
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(1, compositeByteBuf0.writerIndex());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(25, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(131072, compositeByteBuf0.capacity());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertEquals(1, compositeByteBuf1.writerIndex());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(131072, compositeByteBuf1.capacity());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(25, compositeByteBuf1.maxNumComponents());
      assertEquals(1, compositeByteBuf1.readableBytes());
      assertEquals(1, compositeByteBuf2.writerIndex());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(131072, compositeByteBuf2.capacity());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(25, compositeByteBuf2.maxNumComponents());
      assertEquals(1, compositeByteBuf2.readableBytes());
      assertEquals(0, compositeByteBuf3.readerIndex());
      assertEquals(2, compositeByteBuf3.numComponents());
      assertEquals(131072, compositeByteBuf3.capacity());
      assertEquals(1, compositeByteBuf3.writerIndex());
      assertEquals(1, compositeByteBuf3.refCnt());
      assertTrue(compositeByteBuf3.isReadable());
      assertEquals(1, compositeByteBuf3.readableBytes());
      assertEquals(25, compositeByteBuf3.maxNumComponents());
      assertNotNull(compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      
      double double0 = compositeByteBuf3.getDoubleLE(25);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(1, compositeByteBuf0.writerIndex());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(25, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(131072, compositeByteBuf0.capacity());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertEquals(1, compositeByteBuf1.writerIndex());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(131072, compositeByteBuf1.capacity());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(25, compositeByteBuf1.maxNumComponents());
      assertEquals(1, compositeByteBuf1.readableBytes());
      assertEquals(1, compositeByteBuf2.writerIndex());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(131072, compositeByteBuf2.capacity());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(25, compositeByteBuf2.maxNumComponents());
      assertEquals(1, compositeByteBuf2.readableBytes());
      assertEquals(0, compositeByteBuf3.readerIndex());
      assertEquals(2, compositeByteBuf3.numComponents());
      assertEquals(131072, compositeByteBuf3.capacity());
      assertEquals(1, compositeByteBuf3.writerIndex());
      assertEquals(1, compositeByteBuf3.refCnt());
      assertTrue(compositeByteBuf3.isReadable());
      assertEquals(1, compositeByteBuf3.readableBytes());
      assertEquals(25, compositeByteBuf3.maxNumComponents());
      assertEquals(0.0, double0, 0.01);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      
      CompositeByteBuf compositeByteBuf4 = compositeByteBuf3.addComponent((ByteBuf) compositeByteBuf0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(1, compositeByteBuf0.writerIndex());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(25, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(131073, compositeByteBuf0.capacity());
      assertEquals(3, compositeByteBuf0.numComponents());
      assertEquals(1, compositeByteBuf1.writerIndex());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(3, compositeByteBuf1.numComponents());
      assertEquals(131073, compositeByteBuf1.capacity());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(25, compositeByteBuf1.maxNumComponents());
      assertEquals(1, compositeByteBuf1.readableBytes());
      assertEquals(1, compositeByteBuf2.writerIndex());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(3, compositeByteBuf2.numComponents());
      assertEquals(131073, compositeByteBuf2.capacity());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(25, compositeByteBuf2.maxNumComponents());
      assertEquals(1, compositeByteBuf2.readableBytes());
      assertEquals(0, compositeByteBuf3.readerIndex());
      assertEquals(131073, compositeByteBuf3.capacity());
      assertEquals(3, compositeByteBuf3.numComponents());
      assertEquals(1, compositeByteBuf3.writerIndex());
      assertEquals(1, compositeByteBuf3.refCnt());
      assertTrue(compositeByteBuf3.isReadable());
      assertEquals(1, compositeByteBuf3.readableBytes());
      assertEquals(25, compositeByteBuf3.maxNumComponents());
      assertEquals(3, compositeByteBuf4.numComponents());
      assertEquals(1, compositeByteBuf4.readableBytes());
      assertEquals(1, compositeByteBuf4.writerIndex());
      assertEquals(25, compositeByteBuf4.maxNumComponents());
      assertTrue(compositeByteBuf4.isReadable());
      assertEquals(1, compositeByteBuf4.refCnt());
      assertEquals(131073, compositeByteBuf4.capacity());
      assertEquals(0, compositeByteBuf4.readerIndex());
      assertNotNull(compositeByteBuf4);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf4);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf4);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf4);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf4);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertSame(compositeByteBuf4, compositeByteBuf3);
      assertSame(compositeByteBuf4, compositeByteBuf2);
      assertSame(compositeByteBuf4, compositeByteBuf1);
      assertSame(compositeByteBuf4, compositeByteBuf0);
      
      // Undeclared exception!
      Utf8ByteBufCharsetDecoder.decodeUtf8((ByteBuf) compositeByteBuf4);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertNotNull(pooledByteBufAllocator0);
      
      CharBuffer charBuffer0 = utf8ByteBufCharsetDecoder0.allocateCharBuffer(0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      utf8ByteBufCharsetDecoder0.charBuffer = charBuffer0;
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", utf8ByteBufCharsetDecoder0.charBuffer.toString());
      assertFalse(utf8ByteBufCharsetDecoder0.charBuffer.isDirect());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.arrayOffset());
      assertTrue(utf8ByteBufCharsetDecoder0.charBuffer.hasArray());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.remaining());
      assertFalse(utf8ByteBufCharsetDecoder0.charBuffer.isReadOnly());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.position());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.length());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.capacity());
      assertFalse(utf8ByteBufCharsetDecoder0.charBuffer.hasRemaining());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.limit());
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer();
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(0, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertFalse(compositeByteBuf0.isReadable());
      assertEquals(0, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertNotNull(compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeShort(0);
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(64, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(2, compositeByteBuf0.writerIndex());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(2, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(64, compositeByteBuf1.capacity());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(2, compositeByteBuf1.writerIndex());
      assertEquals(16, compositeByteBuf1.maxNumComponents());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(2, compositeByteBuf1.readableBytes());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertNotNull(compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      
      ByteBuf[] byteBufArray0 = new ByteBuf[8];
      byteBufArray0[0] = (ByteBuf) compositeByteBuf1;
      byteBufArray0[1] = (ByteBuf) compositeByteBuf1;
      byteBufArray0[2] = (ByteBuf) compositeByteBuf0;
      byteBufArray0[3] = (ByteBuf) compositeByteBuf0;
      byteBufArray0[5] = (ByteBuf) compositeByteBuf1;
      byteBufArray0[6] = (ByteBuf) compositeByteBuf0;
      byteBufArray0[7] = (ByteBuf) compositeByteBuf0;
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf1.addComponents(true, byteBufArray0);
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(94, compositeByteBuf0.capacity());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(5, compositeByteBuf0.numComponents());
      assertEquals(32, compositeByteBuf0.writerIndex());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(32, compositeByteBuf0.readableBytes());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(16, compositeByteBuf1.maxNumComponents());
      assertEquals(94, compositeByteBuf1.capacity());
      assertEquals(32, compositeByteBuf1.writerIndex());
      assertEquals(0, compositeByteBuf1.refCnt());
      assertEquals(32, compositeByteBuf1.readableBytes());
      assertEquals(5, compositeByteBuf1.numComponents());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(94, compositeByteBuf2.capacity());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(5, compositeByteBuf2.numComponents());
      assertEquals(32, compositeByteBuf2.writerIndex());
      assertEquals(16, compositeByteBuf2.maxNumComponents());
      assertEquals(0, compositeByteBuf2.refCnt());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(32, compositeByteBuf2.readableBytes());
      assertNotNull(compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      
      // Undeclared exception!
      utf8ByteBufCharsetDecoder0.decode((ByteBuf) compositeByteBuf1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertNotNull(pooledByteBufAllocator0);
      
      CharBuffer charBuffer0 = utf8ByteBufCharsetDecoder0.allocateCharBuffer(0);
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1MBA");
      assertFalse(boolean0);
      
      utf8ByteBufCharsetDecoder0.charBuffer = charBuffer0;
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.position());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.limit());
      assertFalse(utf8ByteBufCharsetDecoder0.charBuffer.hasRemaining());
      assertEquals("", utf8ByteBufCharsetDecoder0.charBuffer.toString());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.arrayOffset());
      assertFalse(utf8ByteBufCharsetDecoder0.charBuffer.isDirect());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.length());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.remaining());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.capacity());
      assertTrue(utf8ByteBufCharsetDecoder0.charBuffer.hasArray());
      assertFalse(utf8ByteBufCharsetDecoder0.charBuffer.isReadOnly());
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.release());
      assertNotNull(emptyByteBuf0);
      
      ByteBuf byteBuf0 = emptyByteBuf0.readBytes(0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.writerIndex());
      assertEquals(0, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadable());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.writableBytes());
      assertFalse(byteBuf0.release());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.arrayOffset());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertEquals(0, byteBuf0.readableBytes());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.hasArray());
      assertNotNull(byteBuf0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      
      String string0 = utf8ByteBufCharsetDecoder0.decode(byteBuf0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.capacity());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertTrue(emptyByteBuf0.isDirect());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.writerIndex());
      assertEquals(0, byteBuf0.maxCapacity());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadable());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.writableBytes());
      assertFalse(byteBuf0.release());
      assertTrue(byteBuf0.isDirect());
      assertEquals(0, byteBuf0.arrayOffset());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertEquals(0, byteBuf0.readableBytes());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertTrue(byteBuf0.hasArray());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer(12);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(12, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(0, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.capacity());
      assertFalse(compositeByteBuf0.isReadable());
      assertNotNull(compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeShort(0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, compositeByteBuf0.writerIndex());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(12, compositeByteBuf0.maxNumComponents());
      assertEquals(2, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(64, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(2, compositeByteBuf1.readableBytes());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(12, compositeByteBuf1.maxNumComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(64, compositeByteBuf1.capacity());
      assertEquals(2, compositeByteBuf1.writerIndex());
      assertNotNull(compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      
      String string1 = utf8ByteBufCharsetDecoder0.decode((ByteBuf) compositeByteBuf1);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(2, compositeByteBuf0.writerIndex());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(12, compositeByteBuf0.maxNumComponents());
      assertEquals(2, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(64, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(2, compositeByteBuf1.readableBytes());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(12, compositeByteBuf1.maxNumComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(64, compositeByteBuf1.capacity());
      assertEquals(2, compositeByteBuf1.writerIndex());
      assertNotNull(string1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertFalse(string1.equals((Object)string0));
      
      ByteBuf byteBuf1 = pooledByteBufAllocator0.buffer(0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertNotNull(byteBuf1);
      
      String string2 = utf8ByteBufCharsetDecoder0.decode(byteBuf1);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      ByteBuf[] byteBufArray0 = new ByteBuf[7];
      byteBufArray0[0] = byteBuf1;
      byteBufArray0[1] = (ByteBuf) compositeByteBuf0;
      byteBufArray0[2] = (ByteBuf) compositeByteBuf1;
      byteBufArray0[3] = (ByteBuf) emptyByteBuf0;
      byteBufArray0[4] = (ByteBuf) compositeByteBuf1;
      byteBufArray0[5] = (ByteBuf) compositeByteBuf0;
      byteBufArray0[6] = (ByteBuf) compositeByteBuf1;
      // Undeclared exception!
      try { 
        utf8ByteBufCharsetDecoder0.decode(byteBufArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state = CODING_END, new state = CODING
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      // Undeclared exception!
      try { 
        utf8ByteBufCharsetDecoder0.allocateCharBuffer((-970));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      CharBuffer charBuffer0 = utf8ByteBufCharsetDecoder0.charBuffer;
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1024, charBuffer0.remaining());
      assertEquals(1024, charBuffer0.capacity());
      assertEquals(1024, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1024, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(1024, charBuffer0.capacity());
      assertEquals(1024, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(1024, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1024, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1126, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1024 cap=1126]", byteBuffer0.toString());
      assertEquals(1024, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      ByteBuf[] byteBufArray0 = new ByteBuf[0];
      String string0 = utf8ByteBufCharsetDecoder0.decode(byteBufArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      ByteBuf[] byteBufArray0 = new ByteBuf[2];
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertNotNull(pooledByteBufAllocator0);
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer();
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertFalse(compositeByteBuf0.isReadable());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertEquals(0, compositeByteBuf0.numComponents());
      assertNotNull(compositeByteBuf0);
      
      byteBufArray0[0] = (ByteBuf) compositeByteBuf0;
      ByteBuf byteBuf0 = pooledByteBufAllocator0.ioBuffer(3);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertNotNull(byteBuf0);
      
      ByteBuf byteBuf1 = pooledByteBufAllocator0.buffer();
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertNotNull(byteBuf1);
      assertTrue(byteBuf1.equals((Object)byteBuf0));
      
      byteBufArray0[1] = byteBuf0;
      String string0 = utf8ByteBufCharsetDecoder0.decode(byteBufArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = Utf8ByteBufCharsetDecoder.decodeUtf8(byteBufArray0[1]);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteBuf[] byteBufArray0 = new ByteBuf[9];
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      ByteBuf[] byteBufArray1 = new ByteBuf[1];
      assertFalse(byteBufArray1.equals((Object)byteBufArray0));
      
      // Undeclared exception!
      try { 
        utf8ByteBufCharsetDecoder0.decode(byteBufArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      utf8ByteBufCharsetDecoder0.reset();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utf8ByteBufCharsetDecoder.decodeUtf8((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      // Undeclared exception!
      try { 
        utf8ByteBufCharsetDecoder0.decodePartial((ByteBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      // Undeclared exception!
      try { 
        utf8ByteBufCharsetDecoder0.decode((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteBuf[] byteBufArray0 = new ByteBuf[0];
      String string0 = Utf8ByteBufCharsetDecoder.decodeUtf8(byteBufArray0);
      assertNotNull(string0);
      
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      InternalLoggerFactory internalLoggerFactory0 = mock(InternalLoggerFactory.class, new ViolatedAssumptionAnswer());
      InternalLoggerFactory.setDefaultFactory(internalLoggerFactory0);
      // Undeclared exception!
      utf8ByteBufCharsetDecoder0.allocateCharBuffer(461845907);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertNotNull(pooledByteBufAllocator0);
      
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, true, 65280);
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(65280, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertFalse(compositeByteBuf0.isReadable());
      assertEquals(0, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertNotNull(compositeByteBuf0);
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 65280, 65280);
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.writerIndex());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.isReadable());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.readableBytes());
      assertEquals(65280, unpooledDirectByteBuf0.capacity());
      assertEquals(0, unpooledDirectByteBuf0.readerIndex());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertNotNull(unpooledDirectByteBuf0);
      
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.addComponent((ByteBuf) unpooledDirectByteBuf0);
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(65280, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertFalse(compositeByteBuf0.isReadable());
      assertEquals(0, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.writerIndex());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.isReadable());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.readableBytes());
      assertEquals(65280, unpooledDirectByteBuf0.capacity());
      assertEquals(0, unpooledDirectByteBuf0.readerIndex());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(compositeByteBuf1.isReadable());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(0, compositeByteBuf1.readableBytes());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(0, compositeByteBuf1.writerIndex());
      assertEquals(0, compositeByteBuf1.capacity());
      assertEquals(65280, compositeByteBuf1.maxNumComponents());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertNotNull(compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf1.addComponent(false, (ByteBuf) compositeByteBuf0);
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(65280, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertFalse(compositeByteBuf0.isReadable());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.writerIndex());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.isReadable());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.readableBytes());
      assertEquals(65280, unpooledDirectByteBuf0.capacity());
      assertEquals(0, unpooledDirectByteBuf0.readerIndex());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(compositeByteBuf1.isReadable());
      assertEquals(0, compositeByteBuf1.readableBytes());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(0, compositeByteBuf1.writerIndex());
      assertEquals(0, compositeByteBuf1.capacity());
      assertEquals(65280, compositeByteBuf1.maxNumComponents());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertFalse(compositeByteBuf2.isReadable());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(0, compositeByteBuf2.capacity());
      assertEquals(0, compositeByteBuf2.writerIndex());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(65280, compositeByteBuf2.maxNumComponents());
      assertEquals(0, compositeByteBuf2.readableBytes());
      assertNotNull(compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      
      CompositeByteBuf compositeByteBuf3 = compositeByteBuf2.touch((Object) unpooledDirectByteBuf0);
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(65280, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertFalse(compositeByteBuf0.isReadable());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.writerIndex());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.isReadable());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.readableBytes());
      assertEquals(65280, unpooledDirectByteBuf0.capacity());
      assertEquals(0, unpooledDirectByteBuf0.readerIndex());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(compositeByteBuf1.isReadable());
      assertEquals(0, compositeByteBuf1.readableBytes());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(0, compositeByteBuf1.writerIndex());
      assertEquals(0, compositeByteBuf1.capacity());
      assertEquals(65280, compositeByteBuf1.maxNumComponents());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertFalse(compositeByteBuf2.isReadable());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(0, compositeByteBuf2.capacity());
      assertEquals(0, compositeByteBuf2.writerIndex());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(65280, compositeByteBuf2.maxNumComponents());
      assertEquals(0, compositeByteBuf2.readableBytes());
      assertEquals(0, compositeByteBuf3.readerIndex());
      assertEquals(0, compositeByteBuf3.readableBytes());
      assertEquals(65280, compositeByteBuf3.maxNumComponents());
      assertEquals(0, compositeByteBuf3.writerIndex());
      assertEquals(1, compositeByteBuf3.refCnt());
      assertFalse(compositeByteBuf3.isReadable());
      assertEquals(0, compositeByteBuf3.capacity());
      assertEquals(2, compositeByteBuf3.numComponents());
      assertNotNull(compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      
      CompositeByteBuf compositeByteBuf4 = compositeByteBuf3.resetWriterIndex();
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(65280, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertFalse(compositeByteBuf0.isReadable());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(0, unpooledDirectByteBuf0.writerIndex());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertFalse(unpooledDirectByteBuf0.isReadable());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.readableBytes());
      assertEquals(65280, unpooledDirectByteBuf0.capacity());
      assertEquals(0, unpooledDirectByteBuf0.readerIndex());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertFalse(compositeByteBuf1.isReadable());
      assertEquals(0, compositeByteBuf1.readableBytes());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(0, compositeByteBuf1.writerIndex());
      assertEquals(0, compositeByteBuf1.capacity());
      assertEquals(65280, compositeByteBuf1.maxNumComponents());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertFalse(compositeByteBuf2.isReadable());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(0, compositeByteBuf2.capacity());
      assertEquals(0, compositeByteBuf2.writerIndex());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(65280, compositeByteBuf2.maxNumComponents());
      assertEquals(0, compositeByteBuf2.readableBytes());
      assertEquals(0, compositeByteBuf3.readerIndex());
      assertEquals(0, compositeByteBuf3.readableBytes());
      assertEquals(65280, compositeByteBuf3.maxNumComponents());
      assertEquals(0, compositeByteBuf3.writerIndex());
      assertEquals(1, compositeByteBuf3.refCnt());
      assertFalse(compositeByteBuf3.isReadable());
      assertEquals(0, compositeByteBuf3.capacity());
      assertEquals(2, compositeByteBuf3.numComponents());
      assertEquals(1, compositeByteBuf4.refCnt());
      assertEquals(0, compositeByteBuf4.writerIndex());
      assertEquals(0, compositeByteBuf4.readableBytes());
      assertEquals(2, compositeByteBuf4.numComponents());
      assertEquals(65280, compositeByteBuf4.maxNumComponents());
      assertEquals(0, compositeByteBuf4.readerIndex());
      assertEquals(0, compositeByteBuf4.capacity());
      assertFalse(compositeByteBuf4.isReadable());
      assertNotNull(compositeByteBuf4);
      assertSame(compositeByteBuf0, compositeByteBuf4);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf4);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf4);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf4);
      assertSame(compositeByteBuf4, compositeByteBuf3);
      assertSame(compositeByteBuf4, compositeByteBuf0);
      assertSame(compositeByteBuf4, compositeByteBuf2);
      assertSame(compositeByteBuf4, compositeByteBuf1);
      
      // Undeclared exception!
      utf8ByteBufCharsetDecoder0.decode((ByteBuf) compositeByteBuf4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      CharBuffer charBuffer0 = utf8ByteBufCharsetDecoder0.charBuffer;
      assertTrue(charBuffer0.hasArray());
      assertEquals(1024, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1024, charBuffer0.limit());
      assertEquals(1024, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(1024, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1024, charBuffer0.limit());
      assertEquals(1024, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(1024, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1024, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1024, byteBuffer0.remaining());
      assertEquals(1126, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1024 cap=1126]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(true);
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertNotNull(pooledByteBufAllocator0);
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer();
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertFalse(compositeByteBuf0.isReadable());
      assertNotNull(compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.retain(3025);
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertEquals(3026, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertFalse(compositeByteBuf0.isReadable());
      assertEquals(0, compositeByteBuf1.writerIndex());
      assertEquals(16, compositeByteBuf1.maxNumComponents());
      assertEquals(0, compositeByteBuf1.readableBytes());
      assertEquals(3026, compositeByteBuf1.refCnt());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(0, compositeByteBuf1.capacity());
      assertEquals(0, compositeByteBuf1.numComponents());
      assertFalse(compositeByteBuf1.isReadable());
      assertNotNull(compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf1.writeDouble(3025);
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(3026, compositeByteBuf0.refCnt());
      assertEquals(64, compositeByteBuf0.capacity());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(8, compositeByteBuf0.writerIndex());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(8, compositeByteBuf0.readableBytes());
      assertEquals(16, compositeByteBuf1.maxNumComponents());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(3026, compositeByteBuf1.refCnt());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(64, compositeByteBuf1.capacity());
      assertEquals(8, compositeByteBuf1.writerIndex());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(8, compositeByteBuf1.readableBytes());
      assertEquals(3026, compositeByteBuf2.refCnt());
      assertEquals(16, compositeByteBuf2.maxNumComponents());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(64, compositeByteBuf2.capacity());
      assertEquals(8, compositeByteBuf2.readableBytes());
      assertEquals(1, compositeByteBuf2.numComponents());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(8, compositeByteBuf2.writerIndex());
      assertNotNull(compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      
      String string0 = utf8ByteBufCharsetDecoder0.decode((ByteBuf) compositeByteBuf2);
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(3026, compositeByteBuf0.refCnt());
      assertEquals(64, compositeByteBuf0.capacity());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(8, compositeByteBuf0.writerIndex());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(8, compositeByteBuf0.readableBytes());
      assertEquals(16, compositeByteBuf1.maxNumComponents());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(3026, compositeByteBuf1.refCnt());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(64, compositeByteBuf1.capacity());
      assertEquals(8, compositeByteBuf1.writerIndex());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(8, compositeByteBuf1.readableBytes());
      assertEquals(3026, compositeByteBuf2.refCnt());
      assertEquals(16, compositeByteBuf2.maxNumComponents());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(64, compositeByteBuf2.capacity());
      assertEquals(8, compositeByteBuf2.readableBytes());
      assertEquals(1, compositeByteBuf2.numComponents());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(8, compositeByteBuf2.writerIndex());
      assertNotNull(string0);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      
      // Undeclared exception!
      try { 
        utf8ByteBufCharsetDecoder0.decodePartial(byteBuffer0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Current state = CODING_END, new state = CODING
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(false);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertNotNull(pooledByteBufAllocator0);
      
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertNotNull(emptyByteBuf0);
      
      ByteBuf byteBuf0 = emptyByteBuf0.markWriterIndex();
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertTrue(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.writerIndex());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadable());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.readableBytes());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.writableBytes());
      assertFalse(byteBuf0.release());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertNotNull(byteBuf0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      
      String string0 = utf8ByteBufCharsetDecoder0.decode(byteBuf0);
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(0, emptyByteBuf0.maxCapacity());
      assertEquals(0, emptyByteBuf0.capacity());
      assertFalse(emptyByteBuf0.isReadOnly());
      assertEquals(0, emptyByteBuf0.maxWritableBytes());
      assertEquals(1, emptyByteBuf0.nioBufferCount());
      assertEquals(0, emptyByteBuf0.readerIndex());
      assertTrue(emptyByteBuf0.hasArray());
      assertEquals(0, emptyByteBuf0.writerIndex());
      assertFalse(emptyByteBuf0.isWritable());
      assertFalse(emptyByteBuf0.release());
      assertEquals(0, emptyByteBuf0.arrayOffset());
      assertTrue(emptyByteBuf0.isDirect());
      assertTrue(emptyByteBuf0.hasMemoryAddress());
      assertEquals("EmptyByteBufBE", emptyByteBuf0.toString());
      assertEquals(0, emptyByteBuf0.readableBytes());
      assertFalse(emptyByteBuf0.isReadable());
      assertEquals(1, emptyByteBuf0.refCnt());
      assertEquals(0, emptyByteBuf0.writableBytes());
      assertTrue(byteBuf0.hasArray());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertEquals(0, byteBuf0.capacity());
      assertEquals(0, byteBuf0.writerIndex());
      assertEquals(1, byteBuf0.refCnt());
      assertFalse(byteBuf0.isReadable());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.maxCapacity());
      assertTrue(byteBuf0.isDirect());
      assertEquals("EmptyByteBufBE", byteBuf0.toString());
      assertTrue(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.readableBytes());
      assertFalse(byteBuf0.isWritable());
      assertEquals(0, byteBuf0.writableBytes());
      assertFalse(byteBuf0.release());
      assertFalse(byteBuf0.isReadOnly());
      assertEquals(0, byteBuf0.arrayOffset());
      assertEquals(0, byteBuf0.maxWritableBytes());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(emptyByteBuf0, byteBuf0);
      assertSame(byteBuf0, emptyByteBuf0);
      
      ByteBuf[] byteBufArray0 = new ByteBuf[7];
      byteBufArray0[0] = (ByteBuf) emptyByteBuf0;
      byteBufArray0[1] = (ByteBuf) emptyByteBuf0;
      byteBufArray0[2] = byteBuf0;
      byteBufArray0[3] = (ByteBuf) emptyByteBuf0;
      byteBufArray0[4] = byteBuf0;
      byteBufArray0[5] = (ByteBuf) emptyByteBuf0;
      byteBufArray0[6] = (ByteBuf) emptyByteBuf0;
      String string1 = utf8ByteBufCharsetDecoder0.decode(byteBufArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      ByteBuf[] byteBufArray0 = new ByteBuf[2];
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertNotNull(pooledByteBufAllocator0);
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer();
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16, compositeByteBuf0.maxNumComponents());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(0, compositeByteBuf0.capacity());
      assertFalse(compositeByteBuf0.isReadable());
      assertNotNull(compositeByteBuf0);
      
      byteBufArray0[0] = (ByteBuf) compositeByteBuf0;
      // Undeclared exception!
      try { 
        utf8ByteBufCharsetDecoder0.decode(byteBufArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      ByteBuf[] byteBufArray0 = new ByteBuf[0];
      String string0 = utf8ByteBufCharsetDecoder0.decode(byteBufArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(false);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertNotNull(pooledByteBufAllocator0);
      
      CharBuffer charBuffer0 = utf8ByteBufCharsetDecoder0.allocateCharBuffer(0);
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      utf8ByteBufCharsetDecoder0.charBuffer = charBuffer0;
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.remaining());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.capacity());
      assertFalse(utf8ByteBufCharsetDecoder0.charBuffer.isReadOnly());
      assertTrue(utf8ByteBufCharsetDecoder0.charBuffer.hasArray());
      assertFalse(utf8ByteBufCharsetDecoder0.charBuffer.isDirect());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.position());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.arrayOffset());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.length());
      assertFalse(utf8ByteBufCharsetDecoder0.charBuffer.hasRemaining());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.limit());
      assertEquals("", utf8ByteBufCharsetDecoder0.charBuffer.toString());
      
      ByteBuf[] byteBufArray0 = new ByteBuf[8];
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer(0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertEquals(0, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertFalse(compositeByteBuf0.isReadable());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertNotNull(compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeShort(0);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, compositeByteBuf0.writerIndex());
      assertEquals(2, compositeByteBuf0.readableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(64, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(2, compositeByteBuf1.writerIndex());
      assertEquals(0, compositeByteBuf1.maxNumComponents());
      assertEquals(2, compositeByteBuf1.readableBytes());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(64, compositeByteBuf1.capacity());
      assertNotNull(compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      
      String string0 = pooledByteBufAllocator0.toString();
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals("PooledByteBufAllocator(directByDefault: false)", string0);
      assertNotNull(string0);
      
      byteBufArray0[0] = (ByteBuf) compositeByteBuf0;
      String string1 = Utf8ByteBufCharsetDecoder.decodeUtf8((ByteBuf) compositeByteBuf1);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, compositeByteBuf0.writerIndex());
      assertEquals(2, compositeByteBuf0.readableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(64, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(2, compositeByteBuf1.writerIndex());
      assertEquals(0, compositeByteBuf1.maxNumComponents());
      assertEquals(2, compositeByteBuf1.readableBytes());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(64, compositeByteBuf1.capacity());
      assertNotNull(string1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = utf8ByteBufCharsetDecoder0.decode((ByteBuf) compositeByteBuf1);
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, compositeByteBuf0.writerIndex());
      assertEquals(2, compositeByteBuf0.readableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(64, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(2, compositeByteBuf1.writerIndex());
      assertEquals(0, compositeByteBuf1.maxNumComponents());
      assertEquals(2, compositeByteBuf1.readableBytes());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(64, compositeByteBuf1.capacity());
      assertNotNull(string2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utf8ByteBufCharsetDecoder.decodeUtf8(byteBufArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertNotNull(pooledByteBufAllocator0);
      
      CharBuffer charBuffer0 = utf8ByteBufCharsetDecoder0.allocateCharBuffer(0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      utf8ByteBufCharsetDecoder0.charBuffer = charBuffer0;
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", utf8ByteBufCharsetDecoder0.charBuffer.toString());
      assertFalse(utf8ByteBufCharsetDecoder0.charBuffer.isDirect());
      assertTrue(utf8ByteBufCharsetDecoder0.charBuffer.hasArray());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.length());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.arrayOffset());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.limit());
      assertFalse(utf8ByteBufCharsetDecoder0.charBuffer.hasRemaining());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.remaining());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.capacity());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.position());
      assertFalse(utf8ByteBufCharsetDecoder0.charBuffer.isReadOnly());
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer(12);
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(12, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(0, compositeByteBuf0.numComponents());
      assertFalse(compositeByteBuf0.isReadable());
      assertNotNull(compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeShort(0);
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, compositeByteBuf0.writerIndex());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(12, compositeByteBuf0.maxNumComponents());
      assertEquals(2, compositeByteBuf0.readableBytes());
      assertEquals(64, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(2, compositeByteBuf1.writerIndex());
      assertEquals(64, compositeByteBuf1.capacity());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(12, compositeByteBuf1.maxNumComponents());
      assertEquals(2, compositeByteBuf1.readableBytes());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertNotNull(compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      
      String string0 = utf8ByteBufCharsetDecoder0.decode((ByteBuf) compositeByteBuf1);
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, compositeByteBuf0.writerIndex());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(12, compositeByteBuf0.maxNumComponents());
      assertEquals(2, compositeByteBuf0.readableBytes());
      assertEquals(64, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(2, compositeByteBuf1.writerIndex());
      assertEquals(64, compositeByteBuf1.capacity());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(12, compositeByteBuf1.maxNumComponents());
      assertEquals(2, compositeByteBuf1.readableBytes());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertNotNull(string0);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      
      String string1 = utf8ByteBufCharsetDecoder0.decode((ByteBuf) compositeByteBuf0);
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(2, compositeByteBuf0.writerIndex());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(12, compositeByteBuf0.maxNumComponents());
      assertEquals(2, compositeByteBuf0.readableBytes());
      assertEquals(64, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertNotNull(string1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertNotNull(pooledByteBufAllocator0);
      
      Stack<ByteBuf> stack0 = new Stack<ByteBuf>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, false, 3866, stack0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertEquals(0, compositeByteBuf0.capacity());
      assertFalse(compositeByteBuf0.isReadable());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(0, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(3866, compositeByteBuf0.maxNumComponents());
      assertNotNull(compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeInt(3866);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(4, compositeByteBuf0.readableBytes());
      assertEquals(64, compositeByteBuf0.capacity());
      assertEquals(4, compositeByteBuf0.writerIndex());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(3866, compositeByteBuf0.maxNumComponents());
      assertEquals(4, compositeByteBuf1.writerIndex());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(3866, compositeByteBuf1.maxNumComponents());
      assertEquals(64, compositeByteBuf1.capacity());
      assertEquals(4, compositeByteBuf1.readableBytes());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertNotNull(compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf1.writerIndex(11);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(64, compositeByteBuf0.capacity());
      assertEquals(11, compositeByteBuf0.readableBytes());
      assertEquals(11, compositeByteBuf0.writerIndex());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(3866, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(11, compositeByteBuf1.readableBytes());
      assertEquals(11, compositeByteBuf1.writerIndex());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(3866, compositeByteBuf1.maxNumComponents());
      assertEquals(64, compositeByteBuf1.capacity());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(3866, compositeByteBuf2.maxNumComponents());
      assertEquals(1, compositeByteBuf2.numComponents());
      assertEquals(11, compositeByteBuf2.writerIndex());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(64, compositeByteBuf2.capacity());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(11, compositeByteBuf2.readableBytes());
      assertNotNull(compositeByteBuf2);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf3 = compositeByteBuf2.ensureWritable(3866);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertEquals(11, compositeByteBuf0.readableBytes());
      assertEquals(11, compositeByteBuf0.writerIndex());
      assertEquals(4096, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(3866, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(11, compositeByteBuf1.readableBytes());
      assertEquals(11, compositeByteBuf1.writerIndex());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertEquals(3866, compositeByteBuf1.maxNumComponents());
      assertEquals(4096, compositeByteBuf1.capacity());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(3866, compositeByteBuf2.maxNumComponents());
      assertEquals(11, compositeByteBuf2.writerIndex());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(4096, compositeByteBuf2.capacity());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(11, compositeByteBuf2.readableBytes());
      assertEquals(4096, compositeByteBuf3.capacity());
      assertTrue(compositeByteBuf3.isReadable());
      assertEquals(1, compositeByteBuf3.refCnt());
      assertEquals(11, compositeByteBuf3.writerIndex());
      assertEquals(2, compositeByteBuf3.numComponents());
      assertEquals(3866, compositeByteBuf3.maxNumComponents());
      assertEquals(0, compositeByteBuf3.readerIndex());
      assertEquals(11, compositeByteBuf3.readableBytes());
      assertNotNull(compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf4 = compositeByteBuf3.discardReadBytes();
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertEquals(11, compositeByteBuf0.readableBytes());
      assertEquals(11, compositeByteBuf0.writerIndex());
      assertEquals(4096, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(3866, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(11, compositeByteBuf1.readableBytes());
      assertEquals(11, compositeByteBuf1.writerIndex());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertEquals(3866, compositeByteBuf1.maxNumComponents());
      assertEquals(4096, compositeByteBuf1.capacity());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(3866, compositeByteBuf2.maxNumComponents());
      assertEquals(11, compositeByteBuf2.writerIndex());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(4096, compositeByteBuf2.capacity());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(11, compositeByteBuf2.readableBytes());
      assertEquals(4096, compositeByteBuf3.capacity());
      assertTrue(compositeByteBuf3.isReadable());
      assertEquals(1, compositeByteBuf3.refCnt());
      assertEquals(11, compositeByteBuf3.writerIndex());
      assertEquals(2, compositeByteBuf3.numComponents());
      assertEquals(3866, compositeByteBuf3.maxNumComponents());
      assertEquals(0, compositeByteBuf3.readerIndex());
      assertEquals(11, compositeByteBuf3.readableBytes());
      assertEquals(1, compositeByteBuf4.refCnt());
      assertEquals(2, compositeByteBuf4.numComponents());
      assertEquals(3866, compositeByteBuf4.maxNumComponents());
      assertEquals(4096, compositeByteBuf4.capacity());
      assertTrue(compositeByteBuf4.isReadable());
      assertEquals(11, compositeByteBuf4.readableBytes());
      assertEquals(11, compositeByteBuf4.writerIndex());
      assertEquals(0, compositeByteBuf4.readerIndex());
      assertNotNull(compositeByteBuf4);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf4);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf4);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf4);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf4);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf4, compositeByteBuf1);
      assertSame(compositeByteBuf4, compositeByteBuf2);
      assertSame(compositeByteBuf4, compositeByteBuf0);
      assertSame(compositeByteBuf4, compositeByteBuf3);
      
      String string0 = utf8ByteBufCharsetDecoder0.decode((ByteBuf) compositeByteBuf4);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertEquals(11, compositeByteBuf0.readableBytes());
      assertEquals(11, compositeByteBuf0.writerIndex());
      assertEquals(4096, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(3866, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(11, compositeByteBuf1.readableBytes());
      assertEquals(11, compositeByteBuf1.writerIndex());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertEquals(3866, compositeByteBuf1.maxNumComponents());
      assertEquals(4096, compositeByteBuf1.capacity());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(3866, compositeByteBuf2.maxNumComponents());
      assertEquals(11, compositeByteBuf2.writerIndex());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(4096, compositeByteBuf2.capacity());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(11, compositeByteBuf2.readableBytes());
      assertEquals(4096, compositeByteBuf3.capacity());
      assertTrue(compositeByteBuf3.isReadable());
      assertEquals(1, compositeByteBuf3.refCnt());
      assertEquals(11, compositeByteBuf3.writerIndex());
      assertEquals(2, compositeByteBuf3.numComponents());
      assertEquals(3866, compositeByteBuf3.maxNumComponents());
      assertEquals(0, compositeByteBuf3.readerIndex());
      assertEquals(11, compositeByteBuf3.readableBytes());
      assertEquals(1, compositeByteBuf4.refCnt());
      assertEquals(2, compositeByteBuf4.numComponents());
      assertEquals(3866, compositeByteBuf4.maxNumComponents());
      assertEquals(4096, compositeByteBuf4.capacity());
      assertTrue(compositeByteBuf4.isReadable());
      assertEquals(11, compositeByteBuf4.readableBytes());
      assertEquals(11, compositeByteBuf4.writerIndex());
      assertEquals(0, compositeByteBuf4.readerIndex());
      assertNotNull(string0);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf4);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf4);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf4);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf4);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf4, compositeByteBuf1);
      assertSame(compositeByteBuf4, compositeByteBuf2);
      assertSame(compositeByteBuf4, compositeByteBuf0);
      assertSame(compositeByteBuf4, compositeByteBuf3);
      
      CompositeByteBuf compositeByteBuf5 = compositeByteBuf4.writeShort(0);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertEquals(13, compositeByteBuf0.readableBytes());
      assertEquals(4096, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(3866, compositeByteBuf0.maxNumComponents());
      assertEquals(13, compositeByteBuf0.writerIndex());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(13, compositeByteBuf1.readableBytes());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertEquals(3866, compositeByteBuf1.maxNumComponents());
      assertEquals(4096, compositeByteBuf1.capacity());
      assertEquals(13, compositeByteBuf1.writerIndex());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(3866, compositeByteBuf2.maxNumComponents());
      assertEquals(13, compositeByteBuf2.writerIndex());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(4096, compositeByteBuf2.capacity());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(13, compositeByteBuf2.readableBytes());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(4096, compositeByteBuf3.capacity());
      assertTrue(compositeByteBuf3.isReadable());
      assertEquals(1, compositeByteBuf3.refCnt());
      assertEquals(13, compositeByteBuf3.writerIndex());
      assertEquals(2, compositeByteBuf3.numComponents());
      assertEquals(3866, compositeByteBuf3.maxNumComponents());
      assertEquals(0, compositeByteBuf3.readerIndex());
      assertEquals(13, compositeByteBuf3.readableBytes());
      assertEquals(1, compositeByteBuf4.refCnt());
      assertEquals(2, compositeByteBuf4.numComponents());
      assertEquals(3866, compositeByteBuf4.maxNumComponents());
      assertEquals(13, compositeByteBuf4.writerIndex());
      assertEquals(4096, compositeByteBuf4.capacity());
      assertTrue(compositeByteBuf4.isReadable());
      assertEquals(0, compositeByteBuf4.readerIndex());
      assertEquals(13, compositeByteBuf4.readableBytes());
      assertEquals(1, compositeByteBuf5.refCnt());
      assertEquals(13, compositeByteBuf5.readableBytes());
      assertEquals(3866, compositeByteBuf5.maxNumComponents());
      assertEquals(0, compositeByteBuf5.readerIndex());
      assertEquals(4096, compositeByteBuf5.capacity());
      assertTrue(compositeByteBuf5.isReadable());
      assertEquals(13, compositeByteBuf5.writerIndex());
      assertEquals(2, compositeByteBuf5.numComponents());
      assertNotNull(compositeByteBuf5);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf4);
      assertSame(compositeByteBuf0, compositeByteBuf5);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf5);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf4);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf4);
      assertSame(compositeByteBuf2, compositeByteBuf5);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf4);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf5);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf4, compositeByteBuf1);
      assertSame(compositeByteBuf4, compositeByteBuf2);
      assertSame(compositeByteBuf4, compositeByteBuf0);
      assertSame(compositeByteBuf4, compositeByteBuf3);
      assertSame(compositeByteBuf4, compositeByteBuf5);
      assertSame(compositeByteBuf5, compositeByteBuf2);
      assertSame(compositeByteBuf5, compositeByteBuf0);
      assertSame(compositeByteBuf5, compositeByteBuf3);
      assertSame(compositeByteBuf5, compositeByteBuf4);
      assertSame(compositeByteBuf5, compositeByteBuf1);
      
      String string1 = utf8ByteBufCharsetDecoder0.decode((ByteBuf) compositeByteBuf5);
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(2, compositeByteBuf0.numComponents());
      assertEquals(13, compositeByteBuf0.readableBytes());
      assertEquals(4096, compositeByteBuf0.capacity());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(3866, compositeByteBuf0.maxNumComponents());
      assertEquals(13, compositeByteBuf0.writerIndex());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(13, compositeByteBuf1.readableBytes());
      assertEquals(2, compositeByteBuf1.numComponents());
      assertEquals(3866, compositeByteBuf1.maxNumComponents());
      assertEquals(4096, compositeByteBuf1.capacity());
      assertEquals(13, compositeByteBuf1.writerIndex());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertEquals(2, compositeByteBuf2.numComponents());
      assertEquals(3866, compositeByteBuf2.maxNumComponents());
      assertEquals(13, compositeByteBuf2.writerIndex());
      assertEquals(1, compositeByteBuf2.refCnt());
      assertEquals(4096, compositeByteBuf2.capacity());
      assertTrue(compositeByteBuf2.isReadable());
      assertEquals(13, compositeByteBuf2.readableBytes());
      assertEquals(0, compositeByteBuf2.readerIndex());
      assertEquals(4096, compositeByteBuf3.capacity());
      assertTrue(compositeByteBuf3.isReadable());
      assertEquals(1, compositeByteBuf3.refCnt());
      assertEquals(13, compositeByteBuf3.writerIndex());
      assertEquals(2, compositeByteBuf3.numComponents());
      assertEquals(3866, compositeByteBuf3.maxNumComponents());
      assertEquals(0, compositeByteBuf3.readerIndex());
      assertEquals(13, compositeByteBuf3.readableBytes());
      assertEquals(1, compositeByteBuf4.refCnt());
      assertEquals(2, compositeByteBuf4.numComponents());
      assertEquals(3866, compositeByteBuf4.maxNumComponents());
      assertEquals(13, compositeByteBuf4.writerIndex());
      assertEquals(4096, compositeByteBuf4.capacity());
      assertTrue(compositeByteBuf4.isReadable());
      assertEquals(0, compositeByteBuf4.readerIndex());
      assertEquals(13, compositeByteBuf4.readableBytes());
      assertEquals(1, compositeByteBuf5.refCnt());
      assertEquals(13, compositeByteBuf5.readableBytes());
      assertEquals(3866, compositeByteBuf5.maxNumComponents());
      assertEquals(0, compositeByteBuf5.readerIndex());
      assertEquals(4096, compositeByteBuf5.capacity());
      assertTrue(compositeByteBuf5.isReadable());
      assertEquals(13, compositeByteBuf5.writerIndex());
      assertEquals(2, compositeByteBuf5.numComponents());
      assertNotNull(string1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf4);
      assertSame(compositeByteBuf0, compositeByteBuf5);
      assertSame(compositeByteBuf0, compositeByteBuf3);
      assertSame(compositeByteBuf0, compositeByteBuf2);
      assertSame(compositeByteBuf1, compositeByteBuf5);
      assertSame(compositeByteBuf1, compositeByteBuf3);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      assertSame(compositeByteBuf1, compositeByteBuf4);
      assertSame(compositeByteBuf1, compositeByteBuf2);
      assertSame(compositeByteBuf2, compositeByteBuf1);
      assertSame(compositeByteBuf2, compositeByteBuf3);
      assertSame(compositeByteBuf2, compositeByteBuf4);
      assertSame(compositeByteBuf2, compositeByteBuf5);
      assertSame(compositeByteBuf2, compositeByteBuf0);
      assertSame(compositeByteBuf3, compositeByteBuf2);
      assertSame(compositeByteBuf3, compositeByteBuf4);
      assertSame(compositeByteBuf3, compositeByteBuf1);
      assertSame(compositeByteBuf3, compositeByteBuf5);
      assertSame(compositeByteBuf3, compositeByteBuf0);
      assertSame(compositeByteBuf4, compositeByteBuf1);
      assertSame(compositeByteBuf4, compositeByteBuf2);
      assertSame(compositeByteBuf4, compositeByteBuf0);
      assertSame(compositeByteBuf4, compositeByteBuf3);
      assertSame(compositeByteBuf4, compositeByteBuf5);
      assertSame(compositeByteBuf5, compositeByteBuf2);
      assertSame(compositeByteBuf5, compositeByteBuf0);
      assertSame(compositeByteBuf5, compositeByteBuf3);
      assertSame(compositeByteBuf5, compositeByteBuf4);
      assertSame(compositeByteBuf5, compositeByteBuf1);
      assertTrue(string1.equals((Object)string0));
      
      CharBuffer charBuffer0 = utf8ByteBufCharsetDecoder0.allocateCharBuffer(11);
      assertEquals(0, charBuffer0.position());
      assertEquals(11, charBuffer0.remaining());
      assertEquals(11, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(11, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteBuf[] byteBufArray0 = new ByteBuf[1];
      // Undeclared exception!
      try { 
        Utf8ByteBufCharsetDecoder.decodeUtf8(byteBufArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("D.4GV?x]Q;Ww%Pzh");
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(0, byteBuffer0.position());
      assertEquals(17, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=17 cap=18]", byteBuffer0.toString());
      assertEquals(18, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(17, byteBuffer0.remaining());
      assertNotNull(byteBuffer0);
      
      utf8ByteBufCharsetDecoder0.decodePartial(byteBuffer0, true);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(17, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=17 lim=17 cap=18]", byteBuffer0.toString());
      assertEquals(17, byteBuffer0.limit());
      assertEquals(18, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertNotNull(pooledByteBufAllocator0);
      
      ByteBuf[] byteBufArray0 = new ByteBuf[1];
      ByteBuf byteBuf0 = pooledByteBufAllocator0.buffer(0);
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertNotNull(byteBuf0);
      
      byteBufArray0[0] = byteBuf0;
      String string0 = utf8ByteBufCharsetDecoder0.decode(byteBuf0);
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertNotNull(string0);
      
      String string1 = Utf8ByteBufCharsetDecoder.decodeUtf8(byteBuf0);
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      assertNotNull(utf8ByteBufCharsetDecoder0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertNotNull(pooledByteBufAllocator0);
      
      CharBuffer charBuffer0 = utf8ByteBufCharsetDecoder0.allocateCharBuffer(0);
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      utf8ByteBufCharsetDecoder0.charBuffer = charBuffer0;
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(utf8ByteBufCharsetDecoder0.charBuffer.isReadOnly());
      assertTrue(utf8ByteBufCharsetDecoder0.charBuffer.hasArray());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.remaining());
      assertEquals("", utf8ByteBufCharsetDecoder0.charBuffer.toString());
      assertFalse(utf8ByteBufCharsetDecoder0.charBuffer.isDirect());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.arrayOffset());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.position());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.length());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.capacity());
      assertFalse(utf8ByteBufCharsetDecoder0.charBuffer.hasRemaining());
      assertEquals(0, utf8ByteBufCharsetDecoder0.charBuffer.limit());
      
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer(0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(0, compositeByteBuf0.readableBytes());
      assertFalse(compositeByteBuf0.isReadable());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(0, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf0.writerIndex());
      assertEquals(0, compositeByteBuf0.capacity());
      assertNotNull(compositeByteBuf0);
      
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeShort(0);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, compositeByteBuf0.readableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(2, compositeByteBuf0.writerIndex());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(64, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf1.maxNumComponents());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(64, compositeByteBuf1.capacity());
      assertEquals(2, compositeByteBuf1.writerIndex());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(2, compositeByteBuf1.readableBytes());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertNotNull(compositeByteBuf1);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
      
      String string0 = utf8ByteBufCharsetDecoder0.decode((ByteBuf) compositeByteBuf1);
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(2, compositeByteBuf0.readableBytes());
      assertEquals(1, compositeByteBuf0.refCnt());
      assertEquals(0, compositeByteBuf0.readerIndex());
      assertTrue(compositeByteBuf0.isReadable());
      assertEquals(2, compositeByteBuf0.writerIndex());
      assertEquals(0, compositeByteBuf0.maxNumComponents());
      assertEquals(64, compositeByteBuf0.capacity());
      assertEquals(1, compositeByteBuf0.numComponents());
      assertEquals(0, compositeByteBuf1.maxNumComponents());
      assertTrue(compositeByteBuf1.isReadable());
      assertEquals(64, compositeByteBuf1.capacity());
      assertEquals(2, compositeByteBuf1.writerIndex());
      assertEquals(1, compositeByteBuf1.numComponents());
      assertEquals(0, compositeByteBuf1.readerIndex());
      assertEquals(2, compositeByteBuf1.readableBytes());
      assertEquals(1, compositeByteBuf1.refCnt());
      assertNotNull(string0);
      assertSame(compositeByteBuf0, compositeByteBuf1);
      assertSame(compositeByteBuf1, compositeByteBuf0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Utf8ByteBufCharsetDecoder utf8ByteBufCharsetDecoder0 = new Utf8ByteBufCharsetDecoder();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf[] byteBufArray0 = new ByteBuf[4];
      byteBufArray0[0] = (ByteBuf) emptyByteBuf0;
      byteBufArray0[1] = (ByteBuf) emptyByteBuf0;
      byteBufArray0[2] = (ByteBuf) emptyByteBuf0;
      byteBufArray0[3] = (ByteBuf) emptyByteBuf0;
      Utf8ByteBufCharsetDecoder.decodeUtf8(byteBufArray0);
      utf8ByteBufCharsetDecoder0.decode(byteBufArray0[2]);
      ByteBuf byteBuf0 = emptyByteBuf0.setIndex(0, 0);
      utf8ByteBufCharsetDecoder0.decode(byteBuf0);
      ByteBuf[] byteBufArray1 = new ByteBuf[8];
      byteBufArray1[0] = (ByteBuf) emptyByteBuf0;
      byteBufArray1[1] = (ByteBuf) emptyByteBuf0;
      UnpooledByteBufAllocator unpooledByteBufAllocator1 = new UnpooledByteBufAllocator(false, false);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator1, 0, 0);
      ByteBuf byteBuf1 = unpooledDirectByteBuf0.setZero(0, 0);
      byteBufArray1[2] = byteBuf1;
      byteBufArray1[3] = (ByteBuf) emptyByteBuf0;
      byteBufArray1[4] = (ByteBuf) emptyByteBuf0;
      byteBufArray1[5] = byteBuf0;
      byteBufArray1[6] = byteBuf0;
      byteBufArray1[7] = byteBuf0;
      String string0 = Utf8ByteBufCharsetDecoder.decodeUtf8(byteBufArray1);
      assertEquals("", string0);
  }
}
