/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 23:15:15 GMT 2017
 */

package org.asynchttpclient.netty.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.AbstractReferenceCountedByteBuf;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.CompositeByteBuf;
import io.netty.buffer.EmptyByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.buffer.UnpooledDirectByteBuf;
import io.netty.buffer.UnpooledUnsafeDirectByteBuf;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.apache.tomcat.util.buf.Utf8Encoder;
import org.asynchttpclient.netty.util.ByteBufUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteBufUtils_ESTest extends ByteBufUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer(5);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeBoolean(false);
      compositeByteBuf1.setBytes(1, (ByteBuf) compositeByteBuf1);
      ByteBufUtils.byteBuf2Bytes(compositeByteBuf0);
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf0.discardReadBytes();
      compositeByteBuf2.readRetainedSlice(5);
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2Bytes(compositeByteBuf2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer(20);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeBoolean(false);
      ByteBufUtils.byteBuf2String(charset0, (ByteBuf) compositeByteBuf1);
      compositeByteBuf1.addComponents((Iterable<ByteBuf>) compositeByteBuf0);
      ByteBufUtils.byteBuf2Bytes(compositeByteBuf0);
      ByteBuf[] byteBufArray0 = new ByteBuf[2];
      byteBufArray0[0] = (ByteBuf) compositeByteBuf1;
      byteBufArray0[1] = (ByteBuf) compositeByteBuf0;
      // Undeclared exception!
      ByteBufUtils.byteBuf2String(charset0, byteBufArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer(5);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeBoolean(false);
      compositeByteBuf1.addComponents((Iterable<ByteBuf>) compositeByteBuf0);
      compositeByteBuf1.getUnsignedInt(5);
      // Undeclared exception!
      ByteBufUtils.byteBuf2String(charset0, (ByteBuf) compositeByteBuf1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.skipBytes(0);
      ((AbstractReferenceCountedByteBuf) byteBuf0).release();
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2Bytes(byteBuf0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refCnt: 0
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer(5);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeBoolean(false);
      compositeByteBuf0.readRetainedSlice(5);
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2String(charset0, (ByteBuf) compositeByteBuf1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: 5, length: -4 (expected: range(0, 64))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = Charset.defaultCharset();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer(0);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeBoolean(false);
      String string0 = ByteBufUtils.byteBuf2String(charset0, (ByteBuf) compositeByteBuf1);
      ByteBufUtils.byteBuf2Bytes(compositeByteBuf0);
      ByteBuf[] byteBufArray0 = new ByteBuf[6];
      byteBufArray0[0] = (ByteBuf) compositeByteBuf0;
      byteBufArray0[1] = (ByteBuf) compositeByteBuf0;
      byteBufArray0[2] = (ByteBuf) compositeByteBuf1;
      byteBufArray0[3] = (ByteBuf) compositeByteBuf1;
      byteBufArray0[4] = (ByteBuf) compositeByteBuf1;
      byteBufArray0[5] = (ByteBuf) compositeByteBuf1;
      String string1 = ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = Charset.defaultCharset();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer(0);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeBoolean(false);
      ByteBufUtils.byteBuf2String(charset0, (ByteBuf) compositeByteBuf1);
      ByteBuf[] byteBufArray0 = new ByteBuf[7];
      byteBufArray0[0] = (ByteBuf) compositeByteBuf1;
      PooledByteBufAllocator pooledByteBufAllocator1 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf2 = pooledByteBufAllocator1.compositeBuffer();
      byteBufArray0[1] = (ByteBuf) compositeByteBuf2;
      byteBufArray0[2] = (ByteBuf) compositeByteBuf1;
      byteBufArray0[3] = (ByteBuf) compositeByteBuf0;
      byteBufArray0[4] = (ByteBuf) compositeByteBuf0;
      byteBufArray0[5] = (ByteBuf) compositeByteBuf0;
      byteBufArray0[6] = (ByteBuf) compositeByteBuf0;
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2StringDefault((Charset) null, byteBufArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charset
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBufUtils.isUtf8OrUsAscii(charset0);
      ByteBuf[] byteBufArray0 = new ByteBuf[3];
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer();
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.consolidate();
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf1.markWriterIndex();
      CompositeByteBuf compositeByteBuf3 = compositeByteBuf2.markReaderIndex();
      compositeByteBuf3.addComponents(false, (Iterable<ByteBuf>) compositeByteBuf0);
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2Bytes(compositeByteBuf2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 1812, 1812);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuffer byteBuffer0 = emptyByteBuf0.nioBuffer();
      byteBuffer0.asLongBuffer();
      byteBuffer0.flip();
      charset0.decode(byteBuffer0);
      EmptyByteBuf emptyByteBuf1 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuffer byteBuffer1 = emptyByteBuf1.nioBuffer();
      ByteBuf byteBuf0 = unpooledUnsafeDirectByteBuf0.readBytes(byteBuffer1);
      ByteBufUtils.byteBuf2String(charset0, byteBuf0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset1 = utf8Encoder0.charset();
      ByteBuf[] byteBufArray0 = new ByteBuf[1];
      byteBufArray0[0] = (ByteBuf) unpooledUnsafeDirectByteBuf0;
      ByteBufUtils.byteBuf2StringDefault(charset1, byteBufArray0);
      ByteBufUtils.isUtf8OrUsAscii(charset1);
      ByteBufUtils.byteBuf2String(charset1, (ByteBuf) emptyByteBuf1);
      ByteBuf[] byteBufArray1 = new ByteBuf[1];
      byteBufArray1[0] = (ByteBuf) emptyByteBuf1;
      String string0 = ByteBufUtils.byteBuf2String(charset1, byteBufArray1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      charset0.encode("jdk.internal.misc.Unsafe.allocateUninitializedArray(int): unavailable prior to Java9");
      ByteBufUtils.isUtf8OrUsAscii(charset0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(false);
      pooledByteBufAllocator0.compositeHeapBuffer(0);
      ByteBuf byteBuf0 = pooledByteBufAllocator0.ioBuffer(0, 0);
      byte[] byteArray0 = ByteBufUtils.byteBuf2Bytes(byteBuf0);
      byte[] byteArray1 = ByteBufUtils.byteBuf2Bytes(byteBuf0);
      assertSame(byteArray1, byteArray0);
      
      ByteBufUtils.byteBuf2String(charset0, byteBuf0);
      boolean boolean0 = ByteBufUtils.isUtf8OrUsAscii(charset1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteBufUtils.isUtf8OrUsAscii((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer();
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2String((Charset) null, (ByteBuf) compositeByteBuf0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2String(charset0, (ByteBuf[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2Bytes((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer(5);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeBoolean(false);
      compositeByteBuf1.setBytes(5, (ByteBuf) compositeByteBuf1);
      ByteBufUtils.byteBuf2Bytes(compositeByteBuf0);
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf0.discardReadBytes();
      ByteBufUtils.byteBuf2String(charset0, (ByteBuf) compositeByteBuf2);
      byte[] byteArray0 = ByteBufUtils.byteBuf2Bytes(compositeByteBuf2);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 0);
      byte[] byteArray0 = ByteBufUtils.byteBuf2Bytes(unpooledDirectByteBuf0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeDirectBuffer();
      byte[] byteArray0 = ByteBufUtils.byteBuf2Bytes(compositeByteBuf0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuf[] byteBufArray0 = new ByteBuf[5];
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuf[] byteBufArray0 = new ByteBuf[0];
      String string0 = ByteBufUtils.byteBuf2String(charset0, byteBufArray0);
      ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
      String string1 = ByteBufUtils.byteBuf2String(charset0, byteBufArray0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer(20);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeBoolean(false);
      ByteBufUtils.byteBuf2String(charset0, (ByteBuf) compositeByteBuf1);
      byte[] byteArray0 = ByteBufUtils.byteBuf2Bytes(compositeByteBuf0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean0 = ByteBufUtils.isUtf8OrUsAscii(charset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteBuf[] byteBufArray0 = new ByteBuf[1];
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2StringDefault((Charset) null, byteBufArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }
}
