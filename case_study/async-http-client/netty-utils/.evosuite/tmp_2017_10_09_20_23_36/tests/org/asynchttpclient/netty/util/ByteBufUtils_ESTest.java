/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 03:27:08 GMT 2017
 */

package org.asynchttpclient.netty.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import org.asynchttpclient.netty.util.ByteBufUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteBufUtils_ESTest extends ByteBufUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuf) null).when(byteBuf0).getBytes(anyInt() , any(byte[].class));
      doReturn(false).when(byteBuf0).hasArray();
      doReturn(0).when(byteBuf0).readableBytes();
      doReturn(0).when(byteBuf0).readerIndex();
      ByteBufUtils.byteBuf2Bytes(byteBuf0);
      ByteBuf byteBuf1 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuf1).isDirect();
      doReturn(522133279).when(byteBuf1).readableBytes();
      // Undeclared exception!
      ByteBufUtils.byteBuf2String(charset0, byteBuf1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      ByteBuf byteBuf1 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      ByteBuf byteBuf2 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((byte[]) null).when(byteBuf2).array();
      doReturn(0).when(byteBuf2).arrayOffset();
      doReturn(true).when(byteBuf2).hasArray();
      doReturn((-2574)).when(byteBuf2).readableBytes();
      doReturn((-2574)).when(byteBuf2).readerIndex();
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2Bytes(byteBuf2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("sparc_32");
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[6];
      byteBufferArray0[0] = byteBuffer0;
      byteBufferArray0[1] = byteBuffer0;
      byteBufferArray0[2] = byteBuffer0;
      byteBufferArray0[3] = byteBuffer0;
      byteBufferArray0[4] = byteBuffer0;
      byteBufferArray0[5] = byteBuffer0;
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(byteBuf0).isDirect();
      doReturn("sparc_32").when(byteBuf0).toString(any(java.nio.charset.Charset.class));
      ByteBufUtils.byteBuf2String(charset0, byteBuf0);
      ByteBuf byteBuf1 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuf1).isDirect();
      doReturn((-1713)).when(byteBuf1).nioBufferCount();
      doReturn(byteBufferArray0).when(byteBuf1).nioBuffers();
      doReturn(688, 688).when(byteBuf1).readableBytes();
      ByteBufUtils.byteBuf2String(charset0, byteBuf1);
      ByteBuf[] byteBufArray0 = new ByteBuf[0];
      ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
      ByteBuf byteBuf2 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuf) null).when(byteBuf2).getBytes(anyInt() , any(byte[].class));
      doReturn(false).when(byteBuf2).hasArray();
      doReturn(0).when(byteBuf2).readableBytes();
      doReturn(0).when(byteBuf2).readerIndex();
      ByteBufUtils.byteBuf2Bytes(byteBuf2);
      ByteBuf byteBuf3 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuf3).isDirect();
      doReturn(0).when(byteBuf3).nioBufferCount();
      doReturn((ByteBuffer[]) null).when(byteBuf3).nioBuffers();
      doReturn(0, 0).when(byteBuf3).readableBytes();
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2String(charset0, byteBuf3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("sparc_32");
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[6];
      byteBufferArray0[0] = byteBuffer0;
      byteBufferArray0[1] = byteBuffer0;
      byteBufferArray0[2] = byteBuffer0;
      byteBufferArray0[3] = byteBuffer0;
      byteBufferArray0[4] = byteBuffer0;
      byteBufferArray0[5] = byteBuffer0;
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(byteBuf0).isDirect();
      doReturn((String) null).when(byteBuf0).toString(any(java.nio.charset.Charset.class));
      ByteBufUtils.byteBuf2String(charset0, byteBuf0);
      ByteBuf byteBuf1 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuf1).isDirect();
      doReturn(0).when(byteBuf1).nioBufferCount();
      doReturn((ByteBuffer[]) null).when(byteBuf1).nioBuffers();
      doReturn(0, 0).when(byteBuf1).readableBytes();
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2String(charset0, byteBuf1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuf) null).when(byteBuf0).getBytes(anyInt() , any(byte[].class));
      doReturn(false).when(byteBuf0).hasArray();
      doReturn(1417).when(byteBuf0).readableBytes();
      doReturn((-4374)).when(byteBuf0).readerIndex();
      doReturn((ByteBuf) null, (ByteBuf) null, (ByteBuf) null).when(byteBuf0).retain();
      doReturn(true, true, true).when(byteBuf0).release();
      byte[] byteArray0 = ByteBufUtils.byteBuf2Bytes(byteBuf0);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      ByteBufUtils.isUtf8OrUsAscii(charset0);
      Charset.defaultCharset();
      ByteBuf byteBuf1 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(byteBuf1).array();
      doReturn((-256)).when(byteBuf1).arrayOffset();
      doReturn((ByteBuf) null).when(byteBuf1).getBytes(anyInt() , any(byte[].class));
      doReturn(true).when(byteBuf1).hasArray();
      doReturn(true).when(byteBuf1).isReadable();
      doReturn((ByteBuf) null).when(byteBuf1).order(any(java.nio.ByteOrder.class));
      doReturn(1417, (-4374)).when(byteBuf1).readableBytes();
      doReturn(2).when(byteBuf1).readerIndex();
      doReturn((ByteBuf) null, (ByteBuf) null).when(byteBuf1).retain();
      doReturn(true, true).when(byteBuf1).release();
      ByteBufUtils.byteBuf2Bytes(byteBuf1);
      ByteBufUtils.isUtf8OrUsAscii(charset0);
      ByteBufUtils.isUtf8OrUsAscii(charset0);
      ByteBuf[] byteBufArray0 = new ByteBuf[6];
      ByteBuf byteBuf2 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuf2).hasArray();
      doReturn(false).when(byteBuf2).isReadable();
      doReturn((ByteBuf) null).when(byteBuf2).retain();
      doReturn(true).when(byteBuf2).release();
      byteBufArray0[0] = byteBuf2;
      byteBufArray0[1] = byteBuf1;
      byteBufArray0[2] = byteBuf0;
      charset0.encode("$6DcSJZp.~wG?sp%Md");
      byteBufArray0[3] = byteBuf1;
      byteBufArray0[4] = byteBuf0;
      byteBufArray0[5] = byteBuf0;
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2String(charset0, byteBufArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.CompositeByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      ByteBuf byteBuf1 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(byteBuf1).array();
      doReturn(5).when(byteBuf1).arrayOffset();
      doReturn((ByteBuf) null).when(byteBuf1).getBytes(anyInt() , any(byte[].class));
      doReturn(true).when(byteBuf1).hasArray();
      doReturn(false, false, false).when(byteBuf1).isReadable();
      doReturn(2183).when(byteBuf1).readableBytes();
      doReturn(0).when(byteBuf1).readerIndex();
      doReturn((ByteBuf) null, (ByteBuf) null, (ByteBuf) null).when(byteBuf1).retain();
      doReturn(false, false, false).when(byteBuf1).release();
      ByteBufUtils.byteBuf2Bytes(byteBuf1);
      Charset charset0 = Charset.defaultCharset();
      ByteBuf[] byteBufArray0 = new ByteBuf[3];
      byteBufArray0[0] = byteBuf1;
      byteBufArray0[1] = byteBuf1;
      byteBufArray0[2] = byteBuf1;
      String string0 = ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuf[] byteBufArray0 = new ByteBuf[1];
      Charset.defaultCharset();
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(byteBuf0).toString(any(java.nio.charset.Charset.class));
      Charset charset1 = Charset.defaultCharset();
      Charset.defaultCharset();
      Charset.defaultCharset();
      charset0.encode("");
      byteBufArray0[0] = byteBuf0;
      CharBuffer charBuffer0 = CharBuffer.allocate(65);
      CharBuffer charBuffer1 = charBuffer0.put('>');
      CharBuffer charBuffer2 = charBuffer1.put("");
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = 'z';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      charArray0[7] = '>';
      CharBuffer charBuffer3 = charBuffer2.get(charArray0);
      CharBuffer charBuffer4 = charBuffer3.duplicate();
      charset1.encode(charBuffer4);
      ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      ByteBufUtils.isUtf8OrUsAscii(charset0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1541);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)1;
      byteBuffer0.put(byteArray0);
      charset0.decode(byteBuffer0);
      ByteBuf[] byteBufArray0 = new ByteBuf[8];
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(byteBuf0).isReadable();
      doReturn((ByteBuf) null).when(byteBuf0).order(any(java.nio.ByteOrder.class));
      doReturn(0).when(byteBuf0).readableBytes();
      doReturn((ByteBuf) null, (ByteBuf) null, (ByteBuf) null, (ByteBuf) null, (ByteBuf) null).when(byteBuf0).retain();
      doReturn(true, true, false, false, true).when(byteBuf0).release();
      byteBufArray0[0] = byteBuf0;
      byteBufArray0[1] = byteBuf0;
      byteBufArray0[2] = byteBuf0;
      byteBufArray0[3] = byteBuf0;
      byteBufArray0[4] = byteBuf0;
      byteBufArray0[5] = byteBuf0;
      byteBufArray0[6] = byteBuf0;
      byteBufArray0[7] = byteBuf0;
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.CompositeByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      ByteBuf byteBuf1 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuf1).hasArray();
      doReturn((-1256)).when(byteBuf1).readableBytes();
      doReturn((-1256)).when(byteBuf1).readerIndex();
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2Bytes(byteBuf1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      Charset.isSupported("rY");
      charset0.encode("rY");
      ByteBuf[] byteBufArray0 = new ByteBuf[0];
      Charset charset1 = Charset.defaultCharset();
      String string0 = ByteBufUtils.byteBuf2String(charset0, byteBufArray0);
      ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
      ByteBufUtils.byteBuf2String(charset0, byteBufArray0);
      String string1 = ByteBufUtils.byteBuf2StringDefault(charset1, byteBufArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2Bytes((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuf[] byteBufArray0 = new ByteBuf[4];
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuf0).hasArray();
      doReturn(false, false, false, false).when(byteBuf0).isReadable();
      doReturn((ByteBuf) null, (ByteBuf) null, (ByteBuf) null, (ByteBuf) null).when(byteBuf0).retain();
      doReturn(false, false, false, false).when(byteBuf0).release();
      byteBufArray0[0] = byteBuf0;
      byteBufArray0[1] = byteBuf0;
      byteBufArray0[2] = byteBuf0;
      byteBufArray0[3] = byteBuf0;
      String string0 = ByteBufUtils.byteBuf2String(charset0, byteBufArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuf[] byteBufArray0 = new ByteBuf[5];
      byteBufArray0[1] = byteBufArray0[0];
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset.defaultCharset();
      Charset.isSupported("rY");
      ByteBuf[] byteBufArray0 = new ByteBuf[0];
      Charset charset0 = Charset.defaultCharset();
      String string0 = ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteBufUtils.isUtf8OrUsAscii((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      ByteBuf byteBuf1 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(byteBuf1).array();
      doReturn(0).when(byteBuf1).arrayOffset();
      doReturn(true).when(byteBuf1).hasArray();
      doReturn(0).when(byteBuf1).readableBytes();
      doReturn(0).when(byteBuf1).readerIndex();
      ByteBufUtils.byteBuf2Bytes(byteBuf1);
      Charset charset0 = null;
      ByteBuf byteBuf2 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2String((Charset) null, byteBuf2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuf) null).when(byteBuf0).getBytes(anyInt() , any(byte[].class));
      doReturn(false).when(byteBuf0).hasArray();
      doReturn(1417).when(byteBuf0).readableBytes();
      doReturn((-4374)).when(byteBuf0).readerIndex();
      doReturn((ByteBuf) null, (ByteBuf) null, (ByteBuf) null).when(byteBuf0).retain();
      doReturn(true, true, true).when(byteBuf0).release();
      ByteBufUtils.byteBuf2Bytes(byteBuf0);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      ByteBufUtils.isUtf8OrUsAscii(charset0);
      Charset.defaultCharset();
      ByteBuf byteBuf1 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((byte[]) null).when(byteBuf1).array();
      doReturn(0).when(byteBuf1).arrayOffset();
      doReturn((ByteBuf) null).when(byteBuf1).getBytes(anyInt() , any(byte[].class));
      doReturn(true).when(byteBuf1).hasArray();
      doReturn(true).when(byteBuf1).isReadable();
      doReturn((ByteBuf) null).when(byteBuf1).order(any(java.nio.ByteOrder.class));
      doReturn(1417, 0).when(byteBuf1).readableBytes();
      doReturn(2).when(byteBuf1).readerIndex();
      doReturn((ByteBuf) null, (ByteBuf) null).when(byteBuf1).retain();
      doReturn(true, true).when(byteBuf1).release();
      ByteBufUtils.byteBuf2Bytes(byteBuf1);
      ByteBufUtils.isUtf8OrUsAscii(charset0);
      ByteBufUtils.isUtf8OrUsAscii(charset0);
      ByteBuf[] byteBufArray0 = new ByteBuf[6];
      ByteBuf byteBuf2 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuf2).hasArray();
      doReturn(false).when(byteBuf2).isReadable();
      doReturn((ByteBuf) null).when(byteBuf2).retain();
      doReturn(true).when(byteBuf2).release();
      byteBufArray0[0] = byteBuf2;
      byteBufArray0[1] = byteBuf1;
      byteBufArray0[2] = byteBuf0;
      charset0.encode("$6DcSJZp.~wG?sp%Md");
      byteBufArray0[3] = byteBuf1;
      byteBufArray0[4] = byteBuf0;
      byteBufArray0[5] = byteBuf0;
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2String(charset0, byteBufArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.CompositeByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuf0).isDirect();
      doReturn(0).when(byteBuf0).nioBufferCount();
      doReturn((ByteBuffer[]) null).when(byteBuf0).nioBuffers();
      doReturn(0, 0).when(byteBuf0).readableBytes();
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2String(charset0, byteBuf0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("sparc_32");
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuf0).isDirect();
      doReturn(0).when(byteBuf0).nioBufferCount();
      doReturn((ByteBuffer[]) null).when(byteBuf0).nioBuffers();
      doReturn(0, 0).when(byteBuf0).readableBytes();
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2String(charset0, byteBuf0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      ByteBuf[] byteBufArray0 = null;
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2String(charset0, (ByteBuf[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuf[] byteBufArray0 = new ByteBuf[1];
      Charset.defaultCharset();
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(byteBuf0).toString(any(java.nio.charset.Charset.class));
      Charset charset1 = Charset.defaultCharset();
      Charset.defaultCharset();
      Charset.defaultCharset();
      charset0.encode("");
      byteBufArray0[0] = byteBuf0;
      CharBuffer charBuffer0 = CharBuffer.allocate(65);
      CharBuffer charBuffer1 = charBuffer0.put('>');
      CharBuffer charBuffer2 = charBuffer1.put("");
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = 'z';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      charArray0[7] = '>';
      CharBuffer charBuffer3 = charBuffer2.get(charArray0);
      CharBuffer charBuffer4 = charBuffer3.duplicate();
      charset1.encode(charBuffer4);
      ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
