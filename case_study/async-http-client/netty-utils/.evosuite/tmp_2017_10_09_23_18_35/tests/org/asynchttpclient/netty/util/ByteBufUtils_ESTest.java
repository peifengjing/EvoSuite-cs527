/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 10 06:21:59 GMT 2017
 */

package org.asynchttpclient.netty.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.CompositeByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.buffer.UnpooledDirectByteBuf;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Set;
import org.apache.tomcat.util.buf.Utf8Encoder;
import org.asynchttpclient.netty.util.ByteBufUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteBufUtils_ESTest extends ByteBufUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteBuf[] byteBufArray0 = new ByteBuf[1];
      Charset charset1 = Charset.defaultCharset();
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.canEncode());
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(byteBuf0).toString(any(java.nio.charset.Charset.class));
      Charset charset2 = Charset.defaultCharset();
      assertEquals("UTF-8", charset2.displayName());
      assertTrue(charset2.canEncode());
      assertEquals("UTF-8", charset2.toString());
      assertTrue(charset2.isRegistered());
      assertEquals("UTF-8", charset2.name());
      assertNotNull(charset2);
      assertSame(charset2, charset0);
      assertSame(charset2, charset1);
      
      Charset charset3 = Charset.defaultCharset();
      assertEquals("UTF-8", charset3.displayName());
      assertTrue(charset3.canEncode());
      assertEquals("UTF-8", charset3.name());
      assertEquals("UTF-8", charset3.toString());
      assertTrue(charset3.isRegistered());
      assertNotNull(charset3);
      assertSame(charset3, charset1);
      assertSame(charset3, charset2);
      assertSame(charset3, charset0);
      
      Charset charset4 = Charset.defaultCharset();
      assertEquals("UTF-8", charset4.toString());
      assertTrue(charset4.canEncode());
      assertEquals("UTF-8", charset4.name());
      assertEquals("UTF-8", charset4.displayName());
      assertTrue(charset4.isRegistered());
      assertNotNull(charset4);
      assertSame(charset4, charset2);
      assertSame(charset4, charset3);
      assertSame(charset4, charset1);
      assertSame(charset4, charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      assertSame(charset0, charset3);
      assertSame(charset0, charset4);
      assertSame(charset0, charset2);
      assertSame(charset0, charset1);
      
      byteBufArray0[0] = byteBuf0;
      CharBuffer charBuffer0 = CharBuffer.allocate(65);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(65, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(65, charBuffer0.limit());
      assertEquals(65, charBuffer0.capacity());
      assertEquals(65, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.put('>');
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.position());
      assertEquals(64, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(65, charBuffer0.limit());
      assertEquals(65, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(64, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(64, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(65, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.position());
      assertEquals(65, charBuffer1.limit());
      assertEquals(64, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      
      CharBuffer charBuffer2 = charBuffer1.put("");
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.position());
      assertEquals(64, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(65, charBuffer0.limit());
      assertEquals(65, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(64, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(64, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(65, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.position());
      assertEquals(65, charBuffer1.limit());
      assertEquals(64, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer2.hasRemaining());
      assertTrue(charBuffer2.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer2.toString());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(64, charBuffer2.remaining());
      assertEquals(65, charBuffer2.capacity());
      assertEquals(65, charBuffer2.limit());
      assertEquals(1, charBuffer2.position());
      assertEquals(64, charBuffer2.length());
      assertFalse(charBuffer2.isReadOnly());
      assertFalse(charBuffer2.isDirect());
      assertNotNull(charBuffer2);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer0, charBuffer2);
      assertSame(charBuffer1, charBuffer2);
      assertSame(charBuffer1, charBuffer0);
      assertSame(charBuffer2, charBuffer0);
      assertSame(charBuffer2, charBuffer1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = 'z';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      charArray0[7] = '>';
      CharBuffer charBuffer3 = charBuffer2.get(charArray0);
      assertTrue(charBuffer3.hasRemaining());
      assertEquals(56, charBuffer3.remaining());
      assertTrue(charBuffer3.hasArray());
      assertFalse(charBuffer3.isDirect());
      assertEquals(9, charBuffer3.position());
      assertEquals(56, charBuffer3.length());
      assertFalse(charBuffer3.isReadOnly());
      assertEquals(0, charBuffer3.arrayOffset());
      assertEquals(65, charBuffer3.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer3.toString());
      assertEquals(65, charBuffer3.limit());
      assertEquals(56, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(65, charBuffer0.limit());
      assertEquals(65, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.position());
      assertEquals(56, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer1.position());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(56, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(65, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertEquals(56, charBuffer1.length());
      assertEquals(65, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer2.hasRemaining());
      assertTrue(charBuffer2.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer2.toString());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(9, charBuffer2.position());
      assertEquals(56, charBuffer2.length());
      assertEquals(65, charBuffer2.capacity());
      assertEquals(65, charBuffer2.limit());
      assertEquals(56, charBuffer2.remaining());
      assertFalse(charBuffer2.isReadOnly());
      assertFalse(charBuffer2.isDirect());
      assertNotNull(charBuffer3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(charBuffer3, charBuffer0);
      assertSame(charBuffer3, charBuffer1);
      assertSame(charBuffer3, charBuffer2);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer0, charBuffer2);
      assertSame(charBuffer0, charBuffer3);
      assertSame(charBuffer1, charBuffer2);
      assertSame(charBuffer1, charBuffer0);
      assertSame(charBuffer1, charBuffer3);
      assertSame(charBuffer2, charBuffer0);
      assertSame(charBuffer2, charBuffer3);
      assertSame(charBuffer2, charBuffer1);
      
      CharBuffer charBuffer4 = charBuffer3.duplicate();
      assertTrue(charBuffer3.hasRemaining());
      assertEquals(56, charBuffer3.remaining());
      assertTrue(charBuffer3.hasArray());
      assertFalse(charBuffer3.isDirect());
      assertEquals(9, charBuffer3.position());
      assertEquals(56, charBuffer3.length());
      assertFalse(charBuffer3.isReadOnly());
      assertEquals(0, charBuffer3.arrayOffset());
      assertEquals(65, charBuffer3.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer3.toString());
      assertEquals(65, charBuffer3.limit());
      assertEquals(56, charBuffer4.length());
      assertEquals(56, charBuffer4.remaining());
      assertEquals(65, charBuffer4.capacity());
      assertEquals(65, charBuffer4.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer4.toString());
      assertEquals(0, charBuffer4.arrayOffset());
      assertEquals(9, charBuffer4.position());
      assertFalse(charBuffer4.isDirect());
      assertFalse(charBuffer4.isReadOnly());
      assertTrue(charBuffer4.hasRemaining());
      assertTrue(charBuffer4.hasArray());
      assertEquals(56, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(65, charBuffer0.limit());
      assertEquals(65, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.position());
      assertEquals(56, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer1.position());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(56, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(65, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertEquals(56, charBuffer1.length());
      assertEquals(65, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer2.hasRemaining());
      assertTrue(charBuffer2.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer2.toString());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(9, charBuffer2.position());
      assertEquals(56, charBuffer2.length());
      assertEquals(65, charBuffer2.capacity());
      assertEquals(65, charBuffer2.limit());
      assertEquals(56, charBuffer2.remaining());
      assertFalse(charBuffer2.isReadOnly());
      assertFalse(charBuffer2.isDirect());
      assertNotNull(charBuffer4);
      assertTrue(charBuffer4.equals((Object)charBuffer1));
      assertTrue(charBuffer4.equals((Object)charBuffer0));
      assertTrue(charBuffer4.equals((Object)charBuffer3));
      assertTrue(charBuffer4.equals((Object)charBuffer2));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(charBuffer3, charBuffer0);
      assertSame(charBuffer3, charBuffer1);
      assertSame(charBuffer3, charBuffer2);
      assertNotSame(charBuffer3, charBuffer4);
      assertNotSame(charBuffer4, charBuffer1);
      assertNotSame(charBuffer4, charBuffer2);
      assertNotSame(charBuffer4, charBuffer0);
      assertNotSame(charBuffer4, charBuffer3);
      assertSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer0, charBuffer4);
      assertSame(charBuffer0, charBuffer2);
      assertSame(charBuffer0, charBuffer3);
      assertNotSame(charBuffer1, charBuffer4);
      assertSame(charBuffer1, charBuffer2);
      assertSame(charBuffer1, charBuffer0);
      assertSame(charBuffer1, charBuffer3);
      assertNotSame(charBuffer2, charBuffer4);
      assertSame(charBuffer2, charBuffer0);
      assertSame(charBuffer2, charBuffer3);
      assertSame(charBuffer2, charBuffer1);
      
      ByteBuffer byteBuffer1 = charset2.encode(charBuffer4);
      assertEquals("UTF-8", charset2.displayName());
      assertTrue(charset2.canEncode());
      assertEquals("UTF-8", charset2.toString());
      assertTrue(charset2.isRegistered());
      assertEquals("UTF-8", charset2.name());
      assertTrue(charBuffer3.hasRemaining());
      assertEquals(56, charBuffer3.remaining());
      assertTrue(charBuffer3.hasArray());
      assertFalse(charBuffer3.isDirect());
      assertEquals(9, charBuffer3.position());
      assertEquals(56, charBuffer3.length());
      assertFalse(charBuffer3.isReadOnly());
      assertEquals(0, charBuffer3.arrayOffset());
      assertEquals(65, charBuffer3.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer3.toString());
      assertEquals(65, charBuffer3.limit());
      assertEquals(65, charBuffer4.position());
      assertFalse(charBuffer4.hasRemaining());
      assertEquals(65, charBuffer4.capacity());
      assertEquals(65, charBuffer4.limit());
      assertEquals("", charBuffer4.toString());
      assertEquals(0, charBuffer4.arrayOffset());
      assertEquals(0, charBuffer4.length());
      assertFalse(charBuffer4.isDirect());
      assertFalse(charBuffer4.isReadOnly());
      assertTrue(charBuffer4.hasArray());
      assertEquals(0, charBuffer4.remaining());
      assertEquals(0, byteBuffer1.position());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertTrue(byteBuffer1.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=56 cap=61]", byteBuffer1.toString());
      assertEquals(56, byteBuffer1.limit());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(56, byteBuffer1.remaining());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(61, byteBuffer1.capacity());
      assertEquals(56, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(65, charBuffer0.limit());
      assertEquals(65, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.position());
      assertEquals(56, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer1.position());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(56, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(65, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertEquals(56, charBuffer1.length());
      assertEquals(65, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer2.hasRemaining());
      assertTrue(charBuffer2.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer2.toString());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(9, charBuffer2.position());
      assertEquals(56, charBuffer2.length());
      assertEquals(65, charBuffer2.capacity());
      assertEquals(65, charBuffer2.limit());
      assertEquals(56, charBuffer2.remaining());
      assertFalse(charBuffer2.isReadOnly());
      assertFalse(charBuffer2.isDirect());
      assertNotNull(byteBuffer1);
      assertFalse(charBuffer3.equals((Object)charBuffer4));
      assertFalse(charBuffer4.equals((Object)charBuffer1));
      assertFalse(charBuffer4.equals((Object)charBuffer2));
      assertFalse(charBuffer4.equals((Object)charBuffer0));
      assertFalse(charBuffer4.equals((Object)charBuffer3));
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(charBuffer0.equals((Object)charBuffer4));
      assertFalse(charBuffer1.equals((Object)charBuffer4));
      assertFalse(charBuffer2.equals((Object)charBuffer4));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(charset2, charset0);
      assertSame(charset2, charset3);
      assertSame(charset2, charset4);
      assertSame(charset2, charset1);
      assertSame(charBuffer3, charBuffer0);
      assertSame(charBuffer3, charBuffer1);
      assertSame(charBuffer3, charBuffer2);
      assertNotSame(charBuffer3, charBuffer4);
      assertNotSame(charBuffer4, charBuffer1);
      assertNotSame(charBuffer4, charBuffer2);
      assertNotSame(charBuffer4, charBuffer0);
      assertNotSame(charBuffer4, charBuffer3);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer0, charBuffer4);
      assertSame(charBuffer0, charBuffer2);
      assertSame(charBuffer0, charBuffer3);
      assertNotSame(charBuffer1, charBuffer4);
      assertSame(charBuffer1, charBuffer2);
      assertSame(charBuffer1, charBuffer0);
      assertSame(charBuffer1, charBuffer3);
      assertNotSame(charBuffer2, charBuffer4);
      assertSame(charBuffer2, charBuffer0);
      assertSame(charBuffer2, charBuffer3);
      assertSame(charBuffer2, charBuffer1);
      
      String string0 = ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNull(string0);
      assertSame(charset0, charset3);
      assertSame(charset0, charset4);
      assertSame(charset0, charset2);
      assertSame(charset0, charset1);
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteBufUtils.isUtf8OrUsAscii((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(utf8Encoder0);
      
      Charset charset0 = utf8Encoder0.charset();
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertNotNull(pooledByteBufAllocator0);
      
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 0, 876);
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, unpooledDirectByteBuf0.readerIndex());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.writerIndex());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.readableBytes());
      assertFalse(unpooledDirectByteBuf0.isReadable());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertNotNull(unpooledDirectByteBuf0);
      
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.writeBytes(byteBuffer0);
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, unpooledDirectByteBuf0.readerIndex());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.writerIndex());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.readableBytes());
      assertFalse(unpooledDirectByteBuf0.isReadable());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals(0, byteBuf0.writerIndex());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.isReadable());
      assertTrue(byteBuf0.isDirect());
      assertNotNull(byteBuf0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      
      String string0 = ByteBufUtils.byteBuf2String(charset0, byteBuf0);
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(16777216, pooledByteBufAllocator0.chunkSize());
      assertEquals(512, pooledByteBufAllocator0.tinyCacheSize());
      assertEquals(256, pooledByteBufAllocator0.defaultSmallCacheSize());
      assertEquals(11, pooledByteBufAllocator0.defaultMaxOrder());
      assertEquals(2, pooledByteBufAllocator0.defaultNumDirectArena());
      assertEquals(64, pooledByteBufAllocator0.normalCacheSize());
      assertEquals(256, pooledByteBufAllocator0.smallCacheSize());
      assertEquals(64, pooledByteBufAllocator0.defaultNormalCacheSize());
      assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(8192, pooledByteBufAllocator0.defaultPageSize());
      assertEquals(512, pooledByteBufAllocator0.defaultTinyCacheSize());
      assertEquals(0, pooledByteBufAllocator0.numHeapArenas());
      assertEquals(0, pooledByteBufAllocator0.defaultNumHeapArena());
      assertTrue(pooledByteBufAllocator0.defaultUseCacheForAllThreads());
      assertTrue(pooledByteBufAllocator0.isDirectBufferPooled());
      assertTrue(pooledByteBufAllocator0.defaultPreferDirect());
      assertEquals(2, pooledByteBufAllocator0.numDirectArenas());
      assertTrue(pooledByteBufAllocator0.isDirectMemoryCacheAlignmentSupported());
      assertEquals(0, unpooledDirectByteBuf0.readerIndex());
      assertFalse(unpooledDirectByteBuf0.hasMemoryAddress());
      assertEquals(1, unpooledDirectByteBuf0.refCnt());
      assertEquals(1, unpooledDirectByteBuf0.nioBufferCount());
      assertEquals(0, unpooledDirectByteBuf0.writerIndex());
      assertTrue(unpooledDirectByteBuf0.isDirect());
      assertEquals(0, unpooledDirectByteBuf0.readableBytes());
      assertFalse(unpooledDirectByteBuf0.isReadable());
      assertEquals(0, unpooledDirectByteBuf0.capacity());
      assertFalse(unpooledDirectByteBuf0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuf0.readerIndex());
      assertEquals(0, byteBuf0.capacity());
      assertFalse(byteBuf0.hasArray());
      assertFalse(byteBuf0.hasMemoryAddress());
      assertEquals(0, byteBuf0.readableBytes());
      assertEquals(0, byteBuf0.writerIndex());
      assertEquals(1, byteBuf0.refCnt());
      assertEquals(1, byteBuf0.nioBufferCount());
      assertFalse(byteBuf0.isReadable());
      assertTrue(byteBuf0.isDirect());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(unpooledDirectByteBuf0, byteBuf0);
      assertSame(byteBuf0, unpooledDirectByteBuf0);
      
      ByteBuf[] byteBufArray0 = new ByteBuf[5];
      byteBufArray0[0] = (ByteBuf) unpooledDirectByteBuf0;
      byteBufArray0[1] = byteBuf0;
      byteBufArray0[2] = (ByteBuf) unpooledDirectByteBuf0;
      byteBufArray0[3] = (ByteBuf) unpooledDirectByteBuf0;
      byteBufArray0[4] = byteBuf0;
      String string1 = ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = ByteBufUtils.byteBuf2String(charset0, byteBufArray0);
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = ByteBufUtils.byteBuf2String(charset0, byteBufArray0);
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = ByteBufUtils.byteBuf2String(charset0, byteBufArray0);
      assertEquals(4.0F, utf8Encoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, utf8Encoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2Bytes((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = ByteBufUtils.isUtf8OrUsAscii(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(boolean0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1541);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1541 cap=1541]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1541, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(1541, byteBuffer0.limit());
      assertEquals(1541, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)1;
      ByteBuffer byteBuffer1 = byteBuffer0.put(byteArray0);
      assertEquals(5, byteBuffer0.position());
      assertEquals(1536, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=5 lim=1541 cap=1541]", byteBuffer0.toString());
      assertEquals(1541, byteBuffer0.limit());
      assertEquals(1541, byteBuffer0.capacity());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(5, byteBuffer1.position());
      assertTrue(byteBuffer1.isDirect());
      assertEquals(1541, byteBuffer1.capacity());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(1541, byteBuffer1.limit());
      assertFalse(byteBuffer1.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=5 lim=1541 cap=1541]", byteBuffer1.toString());
      assertEquals(1536, byteBuffer1.remaining());
      assertNotNull(byteBuffer1);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte) (-109), (byte) (-23), (byte)1}, byteArray0);
      assertSame(byteBuffer0, byteBuffer1);
      assertSame(byteBuffer1, byteBuffer0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(1541, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=1541 lim=1541 cap=1541]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(1541, byteBuffer0.limit());
      assertEquals(1541, byteBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1536, charBuffer0.length());
      assertEquals(1536, charBuffer0.capacity());
      assertEquals(1536, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(1536, charBuffer0.limit());
      assertNotNull(charBuffer0);
      assertSame(byteBuffer0, byteBuffer1);
      
      ByteBuf[] byteBufArray0 = new ByteBuf[8];
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(byteBuf0).isReadable();
      doReturn((ByteBuf) null).when(byteBuf0).order(any(java.nio.ByteOrder.class));
      doReturn(0).when(byteBuf0).readableBytes();
      doReturn((ByteBuf) null, (ByteBuf) null, (ByteBuf) null, (ByteBuf) null, (ByteBuf) null).when(byteBuf0).retain();
      doReturn(true, true, false, false, true).when(byteBuf0).release();
      byteBufArray0[0] = byteBuf0;
      byteBufArray0[1] = byteBuf0;
      byteBufArray0[2] = byteBuf0;
      byteBufArray0[3] = byteBuf0;
      byteBufArray0[4] = byteBuf0;
      byteBufArray0[5] = byteBuf0;
      byteBufArray0[6] = byteBuf0;
      byteBufArray0[7] = byteBuf0;
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.netty.buffer.CompositeByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteBuf[] byteBufArray0 = new ByteBuf[1];
      Charset charset1 = Charset.defaultCharset();
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.name());
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.toString());
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn("dX9aw9(tg27ccp#").when(byteBuf0).toString(any(java.nio.charset.Charset.class));
      Charset charset2 = Charset.defaultCharset();
      assertEquals("UTF-8", charset2.toString());
      assertTrue(charset2.canEncode());
      assertEquals("UTF-8", charset2.name());
      assertTrue(charset2.isRegistered());
      assertEquals("UTF-8", charset2.displayName());
      assertNotNull(charset2);
      assertSame(charset2, charset1);
      assertSame(charset2, charset0);
      
      Charset charset3 = Charset.defaultCharset();
      assertEquals("UTF-8", charset3.name());
      assertEquals("UTF-8", charset3.displayName());
      assertTrue(charset3.canEncode());
      assertTrue(charset3.isRegistered());
      assertEquals("UTF-8", charset3.toString());
      assertNotNull(charset3);
      assertSame(charset3, charset2);
      assertSame(charset3, charset1);
      assertSame(charset3, charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      assertSame(charset0, charset2);
      assertSame(charset0, charset1);
      assertSame(charset0, charset3);
      
      byteBufArray0[0] = byteBuf0;
      CharBuffer charBuffer0 = CharBuffer.allocate(65);
      assertEquals(65, charBuffer0.capacity());
      assertEquals(65, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(65, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(65, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      char[] charArray0 = new char[8];
      charArray0[2] = 'z';
      String string0 = ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(string0);
      assertEquals("dX9aw9(tg27ccp#", string0);
      assertSame(charset0, charset2);
      assertSame(charset0, charset1);
      assertSame(charset0, charset3);
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      ByteBuf byteBuf1 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(byteBuf1).array();
      doReturn(5).when(byteBuf1).arrayOffset();
      doReturn((ByteBuf) null).when(byteBuf1).getBytes(anyInt() , any(byte[].class));
      doReturn(true).when(byteBuf1).hasArray();
      doReturn(false, false, false).when(byteBuf1).isReadable();
      doReturn(2183).when(byteBuf1).readableBytes();
      doReturn(0).when(byteBuf1).readerIndex();
      doReturn((ByteBuf) null, (ByteBuf) null, (ByteBuf) null).when(byteBuf1).retain();
      doReturn(false, false, false).when(byteBuf1).release();
      byte[] byteArray1 = ByteBufUtils.byteBuf2Bytes(byteBuf1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      ByteBuf[] byteBufArray0 = new ByteBuf[3];
      byteBufArray0[0] = byteBuf1;
      byteBufArray0[1] = byteBuf1;
      byteBufArray0[2] = byteBuf1;
      String string0 = ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("sparc_32");
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(8, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(8, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[6];
      byteBufferArray0[0] = byteBuffer0;
      byteBufferArray0[1] = byteBuffer0;
      byteBufferArray0[2] = byteBuffer0;
      byteBufferArray0[3] = byteBuffer0;
      byteBufferArray0[4] = byteBuffer0;
      byteBufferArray0[5] = byteBuffer0;
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(byteBuf0).isDirect();
      doReturn((String) null).when(byteBuf0).toString(any(java.nio.charset.Charset.class));
      String string0 = ByteBufUtils.byteBuf2String(charset0, byteBuf0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNull(string0);
      
      ByteBuf byteBuf1 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuf1).isDirect();
      doReturn(0).when(byteBuf1).nioBufferCount();
      doReturn((ByteBuffer[]) null).when(byteBuf1).nioBuffers();
      doReturn(0, 0).when(byteBuf1).readableBytes();
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2String(charset0, byteBuf1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuf0).isDirect();
      doReturn(0).when(byteBuf0).nioBufferCount();
      doReturn((ByteBuffer[]) null).when(byteBuf0).nioBuffers();
      doReturn(0, 0).when(byteBuf0).readableBytes();
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2String(charset0, byteBuf0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuf) null).when(byteBuf0).getBytes(anyInt() , any(byte[].class));
      doReturn(false).when(byteBuf0).hasArray();
      doReturn(0).when(byteBuf0).readableBytes();
      doReturn(0).when(byteBuf0).readerIndex();
      ByteBufUtils.byteBuf2Bytes(byteBuf0);
      ByteBuf byteBuf1 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuf1).isDirect();
      doReturn(0).when(byteBuf1).nioBufferCount();
      doReturn((ByteBuffer[]) null).when(byteBuf1).nioBuffers();
      doReturn(0, 0).when(byteBuf1).readableBytes();
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2String(charset0, byteBuf1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      ByteBuf byteBuf1 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      ByteBuf byteBuf2 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((byte[]) null).when(byteBuf2).array();
      doReturn(0).when(byteBuf2).arrayOffset();
      doReturn(true).when(byteBuf2).hasArray();
      doReturn((-2574)).when(byteBuf2).readableBytes();
      doReturn((-2574)).when(byteBuf2).readerIndex();
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2Bytes(byteBuf2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuf) null).when(byteBuf0).getBytes(anyInt() , any(byte[].class));
      doReturn(false).when(byteBuf0).hasArray();
      doReturn(1417).when(byteBuf0).readableBytes();
      doReturn((-4374)).when(byteBuf0).readerIndex();
      ByteBufUtils.byteBuf2Bytes(byteBuf0);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      ByteBufUtils.isUtf8OrUsAscii(charset0);
      Charset.defaultCharset();
      ByteBuf byteBuf1 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((byte[]) null).when(byteBuf1).array();
      doReturn(0).when(byteBuf1).arrayOffset();
      doReturn((ByteBuf) null).when(byteBuf1).getBytes(anyInt() , any(byte[].class));
      doReturn(true).when(byteBuf1).hasArray();
      doReturn(1417).when(byteBuf1).readableBytes();
      doReturn(2).when(byteBuf1).readerIndex();
      ByteBufUtils.byteBuf2Bytes(byteBuf1);
      ByteBufUtils.isUtf8OrUsAscii(charset0);
      ByteBufUtils.isUtf8OrUsAscii(charset0);
      ByteBuf[] byteBufArray0 = new ByteBuf[6];
      ByteBuf byteBuf2 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      byteBufArray0[0] = byteBuf2;
      byteBufArray0[1] = byteBuf1;
      byteBufArray0[2] = byteBuf0;
      charset0.encode("$6DcSJZp.~wG?sp%Md");
      byteBufArray0[3] = byteBuf1;
      byteBufArray0[4] = byteBuf0;
      byteBufArray0[5] = byteBuf0;
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Charset.isSupported("rY");
      charset0.encode("rY");
      ByteBuf[] byteBufArray0 = new ByteBuf[0];
      Charset charset1 = Charset.defaultCharset();
      ByteBufUtils.byteBuf2String(charset0, byteBufArray0);
      ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
      String string0 = ByteBufUtils.byteBuf2String(charset0, byteBufArray0);
      ByteBufUtils.byteBuf2StringDefault(charset1, byteBufArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer(160);
      String string1 = ByteBufUtils.byteBuf2String(charset0, byteBuf0);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = ByteBufUtils.byteBuf2Bytes(byteBuf0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(0);
      ByteBufUtils.byteBuf2Bytes(compositeByteBuf0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      String string0 = ByteBufUtils.byteBuf2String(charset0, (ByteBuf) compositeByteBuf0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuf[] byteBufArray0 = new ByteBuf[1];
      Charset charset1 = Charset.defaultCharset();
      Charset.defaultCharset();
      Charset.defaultCharset();
      String string0 = "";
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      charset1.decode(byteBuffer0);
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2StringDefault(charset0, byteBufArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuf) null).when(byteBuf0).getBytes(anyInt() , any(byte[].class));
      doReturn(false).when(byteBuf0).hasArray();
      doReturn(1417).when(byteBuf0).readableBytes();
      doReturn((-4374)).when(byteBuf0).readerIndex();
      doReturn((ByteBuf) null, (ByteBuf) null).when(byteBuf0).retain();
      byte[] byteArray0 = ByteBufUtils.byteBuf2Bytes(byteBuf0);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      ByteBufUtils.isUtf8OrUsAscii(charset0);
      Charset.defaultCharset();
      ByteBuf byteBuf1 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(byteBuf1).array();
      doReturn((-256)).when(byteBuf1).arrayOffset();
      doReturn((ByteBuf) null).when(byteBuf1).getBytes(anyInt() , any(byte[].class));
      doReturn(true, false).when(byteBuf1).hasArray();
      doReturn(1417).when(byteBuf1).readableBytes();
      doReturn(2).when(byteBuf1).readerIndex();
      doReturn((ByteBuf) null, (ByteBuf) null).when(byteBuf1).retain();
      ByteBufUtils.byteBuf2Bytes(byteBuf1);
      ByteBufUtils.isUtf8OrUsAscii(charset0);
      ByteBufUtils.isUtf8OrUsAscii(charset0);
      ByteBuf[] byteBufArray0 = new ByteBuf[6];
      ByteBuf byteBuf2 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(byteBuf2).hasArray();
      doReturn(0).when(byteBuf2).nioBufferCount();
      doReturn(0).when(byteBuf2).readableBytes();
      doReturn((ByteBuf) null).when(byteBuf2).retain();
      byteBufArray0[0] = byteBuf2;
      byteBufArray0[1] = byteBuf1;
      byteBufArray0[2] = byteBuf0;
      charset0.encode("$6DcSJZp.~wG?sp%Md");
      byteBufArray0[3] = byteBuf1;
      byteBufArray0[4] = byteBuf0;
      // Undeclared exception!
      try { 
        ByteBufUtils.byteBuf2String(charset0, byteBufArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.asynchttpclient.netty.util.ByteBufUtils", e);
      }
  }
}
