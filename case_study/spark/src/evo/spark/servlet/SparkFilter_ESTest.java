/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 16:39:06 GMT 2017
 */

package spark.servlet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletResponseWrapper;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.servlet.FilterConfigWrapper;
import spark.servlet.SparkApplication;
import spark.servlet.SparkFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SparkFilter_ESTest extends SparkFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparkFilter sparkFilter0 = new SparkFilter();
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      FilterConfigWrapper filterConfigWrapper0 = new FilterConfigWrapper(filterConfig0);
      SparkApplication[] sparkApplicationArray0 = sparkFilter0.getApplications(filterConfigWrapper0);
      assertNotNull(sparkApplicationArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparkFilter sparkFilter0 = new SparkFilter();
      SparkApplication sparkApplication0 = sparkFilter0.getApplication("spark.servlet.MyApp");
      assertNotNull(sparkApplication0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparkFilter sparkFilter0 = new SparkFilter();
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("applicationClass").when(filterConfig0).getInitParameter(anyString());
      FilterConfigWrapper filterConfigWrapper0 = new FilterConfigWrapper(filterConfig0);
      // Undeclared exception!
      try { 
        sparkFilter0.init(filterConfigWrapper0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The filterMappingUrlPattern must start with \"/\" and end with \"/*\". It's: applicationClass
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparkFilter sparkFilter0 = new SparkFilter();
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("applicationClass").when(filterConfig0).getInitParameter(anyString());
      try { 
        sparkFilter0.getApplications(filterConfig0);
        fail("Expecting exception: ServletException");
      
      } catch(ServletException e) {
         //
         // java.lang.ClassNotFoundException: Class 'applicationClass.class' should be in target project, but could not be found!
         //
         verifyException("spark.servlet.SparkFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SparkFilter sparkFilter0 = new SparkFilter();
      // Undeclared exception!
      try { 
        sparkFilter0.getApplications((FilterConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.servlet.SparkFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparkFilter sparkFilter0 = new SparkFilter();
      // Undeclared exception!
      try { 
        sparkFilter0.getApplication((FilterConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.servlet.SparkFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SparkFilter sparkFilter0 = new SparkFilter();
      try { 
        sparkFilter0.getApplication("'folder' must not be null");
        fail("Expecting exception: ServletException");
      
      } catch(ServletException e) {
         //
         // java.lang.ClassNotFoundException: Class ''folder' must not be null.class' should be in target project, but could not be found!
         //
         verifyException("spark.servlet.SparkFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparkFilter sparkFilter0 = new SparkFilter();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("applicationClass").when(httpServletRequest0).getContextPath();
      doReturn("JbRK3jW").when(httpServletRequest0).getRequestURI();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparkFilter0.doFilter(httpServletRequestWrapper0, httpServletResponseWrapper0, filterChain0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparkFilter sparkFilter0 = new SparkFilter();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(httpServletResponseWrapper0);
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparkFilter0.doFilter(httpServletRequestWrapper0, servletResponseWrapper0, filterChain0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.servlet.ServletResponseWrapper cannot be cast to javax.servlet.http.HttpServletResponse
         //
         verifyException("spark.servlet.SparkFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SparkFilter sparkFilter0 = new SparkFilter();
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig0).getInitParameter(anyString());
      FilterConfigWrapper filterConfigWrapper0 = new FilterConfigWrapper(filterConfig0);
      sparkFilter0.init(filterConfigWrapper0);
      sparkFilter0.destroy();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SparkFilter sparkFilter0 = new SparkFilter();
      sparkFilter0.destroy();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SparkFilter sparkFilter0 = new SparkFilter();
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig0).getInitParameter(anyString());
      // Undeclared exception!
      try { 
        sparkFilter0.init(filterConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.servlet.SparkFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SparkFilter sparkFilter0 = new SparkFilter();
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      FilterConfigWrapper filterConfigWrapper0 = new FilterConfigWrapper(filterConfig0);
      SparkApplication sparkApplication0 = sparkFilter0.getApplication(filterConfigWrapper0);
      assertNotNull(sparkApplication0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SparkFilter sparkFilter0 = new SparkFilter();
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig0).getInitParameter(anyString());
      FilterConfigWrapper filterConfigWrapper0 = new FilterConfigWrapper(filterConfig0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getContextPath();
      doReturn((String) null).when(httpServletRequest0).getRequestURI();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      sparkFilter0.init(filterConfigWrapper0);
      // Undeclared exception!
      try { 
        sparkFilter0.doFilter(httpServletRequestWrapper0, httpServletResponseWrapper0, filterChain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }
}
