/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Oct 13 16:39:06 GMT 2017
 */

package spark.servlet;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class SparkFilter_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "spark.servlet.SparkFilter"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("user.country", "US"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.timezone", ""); 
    java.lang.System.setProperty("sun.jnu.encoding", "UTF-8"); 
    java.lang.System.setProperty("org.evosuite.shaded.org.dom4j.dom.DOMDocumentFactory.singleton.strategy", "org.evosuite.shaded.org.dom4j.util.SimpleSingleton"); 
    java.lang.System.setProperty("strategy", "EvoSuite"); 
    java.lang.System.setProperty("sun.java.launcher", "SUN_STANDARD"); 
    java.lang.System.setProperty("sun.management.compiler", "HotSpot 64-Bit Tiered Compilers"); 
    java.lang.System.setProperty("sun.boot.class.path", "/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre/classes"); 
    java.lang.System.setProperty("show_progress", "false"); 
    java.lang.System.setProperty("extra_timeout", "24"); 
    java.lang.System.setProperty("process_communication_port", "3564"); 
    java.lang.System.setProperty("initialization_timeout", "24"); 
    java.lang.System.setProperty("org.evosuite.shaded.org.dom4j.factory", "org.evosuite.shaded.org.dom4j.DocumentFactory"); 
    java.lang.System.setProperty("assertion_timeout", "24"); 
    java.lang.System.setProperty("junit_tests", "true"); 
    java.lang.System.setProperty("log4j.configuration", "SUT.log4j.properties"); 
    java.lang.System.setProperty("analysis_criteria", ""); 
    java.lang.System.setProperty("sun.boot.library.path", "/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre/lib"); 
    java.lang.System.setProperty("enable_asserts_for_evosuite", "false"); 
    java.lang.System.setProperty("sun.arch.data.model", "64"); 
    java.lang.System.setProperty("sun.cpu.isalist", ""); 
    java.lang.System.setProperty("file.encoding.pkg", "sun.io"); 
    java.lang.System.setProperty("configuration_id", "default"); 
    java.lang.System.setProperty("PROJECT_PREFIX", ""); 
    java.lang.System.setProperty("ctg_time_per_class", "3"); 
    java.lang.System.setProperty("write_pool", "/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/.evosuite/tmp_2017_10_13_08_08_32/pools/spark.servlet.SparkFilter.pool"); 
    java.lang.System.setProperty("save_all_data", "false"); 
    java.lang.System.setProperty("logback.configurationFile", "logback-ctg.xml"); 
    java.lang.System.setProperty("junit_check_timeout", "24"); 
    java.lang.System.setProperty("replace_calls", "true"); 
    java.lang.System.setProperty("coverage", "true"); 
    java.lang.System.setProperty("org.evosuite.shaded.org.dom4j.DocumentFactory.singleton.strategy", "org.evosuite.shaded.org.dom4j.util.SimpleSingleton"); 
    java.lang.System.setProperty("ctg_schedule", "BUDGET"); 
    java.lang.System.setProperty("sun.io.unicode.encoding", "UnicodeBig"); 
    java.lang.System.setProperty("stopping_condition", "MAXTIME"); 
    java.lang.System.setProperty("print_to_system", "false"); 
    java.lang.System.setProperty("ctg_seeds_file_in", "/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/.evosuite/evosuite-seeds/spark.servlet.SparkFilter.seed"); 
    java.lang.System.setProperty("output_variables", "TARGET_CLASS,configuration_id,criterion,ctg_min_time_per_job,ctg_schedule,search_budget,p_object_pool,ctg_time_per_class,Size,Length,Total_Time,Random_Seed,LineCoverage,LineCoverageBitString,BranchCoverage,BranchCoverageBitString,ExceptionCoverage,ExceptionCoverageBitString,Explicit_MethodExceptions,Explicit_TypeExceptions,Implicit_MethodExceptions,Implicit_TypeExceptions,WeakMutationScore,WeakMutationCoverageBitString,OutputCoverage,OutputCoverageBitString,MethodCoverage,MethodCoverageBitString,MethodNoExceptionCoverage,MethodNoExceptionCoverageBitString,CBranchCoverage,CBranchCoverageBitString"); 
    java.lang.System.setProperty("global_timeout", "150"); 
    java.lang.System.setProperty("assertions", "true"); 
    java.lang.System.setProperty("log_timeout", "false"); 
    java.lang.System.setProperty("gopherProxySet", "false"); 
    java.lang.System.setProperty("master_log_port", "65158"); 
    java.lang.System.setProperty("reset_static_fields", "true"); 
    java.lang.System.setProperty("sun.java.command", "org.evosuite.ClientProcess"); 
    java.lang.System.setProperty("junit_check", "true"); 
    java.lang.System.setProperty("evosuite.log.folder", "/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/.evosuite/tmp_2017_10_13_08_08_32/logs/spark.servlet.SparkFilter"); 
    java.lang.System.setProperty("minimize", "true"); 
    java.lang.System.setProperty("max_size", "100"); 
    java.lang.System.setProperty("sun.os.patch.level", "unknown"); 
    java.lang.System.setProperty("sun.cpu.endian", "little"); 
    java.lang.System.setProperty("ctg_min_time_per_job", "1"); 
    java.lang.System.setProperty("junit_suffix", "_ESTest"); 
    java.lang.System.setProperty("java.vendor.url.bug", "http://bugreport.sun.com/bugreport/"); 
    java.lang.System.setProperty("report_dir", "/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/.evosuite/tmp_2017_10_13_08_08_32/reports/spark.servlet.SparkFilter"); 
    java.lang.System.setProperty("minimization_timeout", "24"); 
    java.lang.System.setProperty("CP_file_path", "/var/folders/v8/rj6w407j3xx_dly8hk6y81w40000gn/T/EvoSuite_classpathFile8103175172960223878.txt"); 
    java.lang.System.setProperty("java.rmi.server.hostname", "127.0.0.1"); 
    java.lang.System.setProperty("inline", "true"); 
    java.lang.System.setProperty("ctg_seeds_file_out", "/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/.evosuite/tmp_2017_10_13_08_08_32/seeds/spark.servlet.SparkFilter.seed"); 
    java.lang.System.setProperty("TARGET_CLASS", "spark.servlet.SparkFilter"); 
    java.lang.System.setProperty("spawn_process_manager_port", "62907"); 
    java.lang.System.setProperty("evosuite.log.appender", "CLIENT"); 
    java.lang.System.setProperty("write_junit_timeout", "24"); 
    java.lang.System.setProperty("test_dir", "/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/.evosuite/tmp_2017_10_13_08_08_32/tests"); 
    java.lang.System.setProperty("search_budget", "150"); 
    java.lang.System.setProperty("plot", "false"); 
    java.lang.System.setProperty("p_object_pool", "0.3"); 
    java.lang.System.setProperty("criterion", "LINE:BRANCH:EXCEPTION:WEAKMUTATION:OUTPUT:METHOD:METHODNOEXCEPTION:CBRANCH"); 
    java.lang.System.setProperty("test_comments", "false"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SparkFilter_ESTest_scaffolding.class.getClassLoader() ,
      "org.eclipse.jetty.server.Request",
      "spark.route.RouteEntry",
      "spark.resource.AbstractResource",
      "org.eclipse.jetty.server.handler.AbstractHandlerContainer",
      "spark.utils.Wrapper",
      "spark.servlet.SparkApplication",
      "org.eclipse.jetty.io.EofException",
      "org.eclipse.jetty.util.component.ContainerLifeCycle",
      "spark.Service$1",
      "org.eclipse.jetty.util.MultiMap$1",
      "spark.globalstate.ServletFlag",
      "spark.utils.GzipUtils",
      "spark.route.HttpMethod",
      "org.eclipse.jetty.util.AbstractTrie",
      "org.eclipse.jetty.util.annotation.ManagedObject",
      "org.eclipse.jetty.server.HttpInput",
      "org.eclipse.jetty.server.Server",
      "org.eclipse.jetty.util.log.Slf4jLog",
      "org.eclipse.jetty.util.Callback",
      "spark.RouteImpl$1",
      "org.eclipse.jetty.server.HandlerContainer",
      "org.eclipse.jetty.util.thread.Invocable$1",
      "spark.CustomErrorPages$SingletonHolder",
      "org.eclipse.jetty.util.component.AbstractLifeCycle",
      "org.eclipse.jetty.server.PushBuilder",
      "org.eclipse.jetty.server.HttpInput$Content",
      "org.eclipse.jetty.util.thread.ThreadPool",
      "org.eclipse.jetty.util.thread.Invocable",
      "spark.ExceptionHandlerImpl",
      "org.eclipse.jetty.http.PreEncodedHttpField",
      "spark.TemplateViewRouteImpl",
      "spark.serialization.BytesSerializer",
      "spark.ExceptionMapper",
      "spark.staticfiles.DirectoryTraversal$DirectoryTraversalDetection",
      "spark.route.Routes",
      "spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper",
      "org.eclipse.jetty.server.Handler",
      "spark.Routable",
      "spark.FilterImpl$1",
      "org.eclipse.jetty.util.component.Destroyable",
      "spark.resource.AbstractFileResolvingResource",
      "org.eclipse.jetty.util.ArrayTrie",
      "org.eclipse.jetty.util.StringUtil",
      "org.eclipse.jetty.http.PreEncodedHttpField$1",
      "spark.utils.StringUtils",
      "spark.resource.Resource",
      "org.eclipse.jetty.util.component.LifeCycle$Listener",
      "spark.Route",
      "org.eclipse.jetty.util.log.Log$1",
      "spark.Redirect",
      "org.eclipse.jetty.server.Authentication$Failed",
      "spark.resource.ClassPathResourceHandler",
      "spark.QueryParamsMap",
      "org.eclipse.jetty.util.MultiMap",
      "spark.utils.Assert",
      "spark.ModelAndView",
      "org.eclipse.jetty.util.component.Dumpable",
      "org.eclipse.jetty.server.QuietServletException",
      "org.eclipse.jetty.http.HttpFieldPreEncoder",
      "spark.HaltException",
      "org.eclipse.jetty.util.Callback$1",
      "org.eclipse.jetty.server.HttpInput$1",
      "org.eclipse.jetty.server.HttpInput$2",
      "org.eclipse.jetty.server.HttpInput$3",
      "org.eclipse.jetty.server.HttpInput$4",
      "org.eclipse.jetty.server.HttpInput$5",
      "spark.staticfiles.StaticFilesConfiguration",
      "spark.TemplateViewRoute",
      "spark.http.matching.RequestWrapper",
      "org.eclipse.jetty.util.Attributes",
      "org.eclipse.jetty.util.component.LifeCycle",
      "spark.ResponseTransformerRouteImpl",
      "org.eclipse.jetty.util.component.ContainerLifeCycle$Bean",
      "spark.TemplateViewRouteImpl$1",
      "org.eclipse.jetty.server.HttpInput$EOFState",
      "org.eclipse.jetty.util.Uptime$Impl",
      "org.eclipse.jetty.util.component.Container",
      "org.eclipse.jetty.util.Uptime$DefaultImpl",
      "spark.serialization.Serializer",
      "spark.RouteImpl",
      "spark.resource.ExternalResource",
      "org.eclipse.jetty.io.RuntimeIOException",
      "org.eclipse.jetty.server.HttpInput$EofContent",
      "spark.servlet.FilterConfigWrapper",
      "spark.serialization.DefaultSerializer",
      "org.eclipse.jetty.util.component.AbstractLifeCycle$1",
      "org.eclipse.jetty.util.Loader",
      "spark.serialization.InputStreamSerializer",
      "spark.RouteGroup",
      "spark.http.matching.MatcherFilter",
      "spark.servlet.MyApp",
      "org.eclipse.jetty.util.component.ContainerLifeCycle$Managed",
      "spark.utils.CollectionUtils",
      "org.eclipse.jetty.util.component.AbstractLifeCycle$AbstractLifeCycleListener",
      "spark.staticfiles.StaticFilesFolder",
      "org.eclipse.jetty.server.HttpInput$Interceptor",
      "org.eclipse.jetty.util.component.Container$Listener",
      "spark.QueryParamsMap$NullQueryParamsMap",
      "spark.ExceptionHandler",
      "spark.resource.ClassPathResource",
      "spark.routematch.RouteMatch",
      "spark.servlet.FilterTools",
      "org.eclipse.jetty.util.Trie",
      "org.eclipse.jetty.http.BadMessageException",
      "org.eclipse.jetty.util.Uptime",
      "org.eclipse.jetty.server.handler.AbstractHandler",
      "org.eclipse.jetty.http.HttpVersion",
      "org.eclipse.jetty.server.HttpInput$State",
      "spark.Service$StaticFiles",
      "spark.serialization.SerializerChain",
      "spark.TemplateEngine",
      "spark.Request",
      "spark.route.ServletRoutes",
      "org.eclipse.jetty.util.log.AbstractLogger",
      "spark.ResponseTransformerRouteImpl$1",
      "org.eclipse.jetty.http.Http1FieldPreEncoder",
      "spark.utils.ResourceUtils",
      "spark.servlet.SparkFilter$1",
      "org.eclipse.jetty.server.HttpInput$SentinelContent",
      "spark.Filter",
      "spark.utils.GzipUtils$StringMatch",
      "spark.resource.AbstractResourceHandler",
      "spark.http.matching.ResponseWrapper",
      "org.eclipse.jetty.io.QuietException",
      "org.eclipse.jetty.server.handler.HandlerWrapper",
      "spark.Session",
      "spark.servlet.SparkFilter",
      "org.eclipse.jetty.http.HostPortHttpField",
      "org.eclipse.jetty.server.HttpInput$ErrorState",
      "spark.resource.InputStreamResource",
      "spark.FilterImpl",
      "org.eclipse.jetty.server.Request$1",
      "org.eclipse.jetty.util.log.Log",
      "org.eclipse.jetty.http.HttpField",
      "spark.Service",
      "spark.resource.ExternalResourceHandler",
      "spark.Response",
      "spark.CustomErrorPages",
      "org.eclipse.jetty.util.log.Logger",
      "spark.Spark",
      "spark.Spark$SingletonHolder",
      "spark.ResponseTransformer"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("javax.servlet.FilterChain", false, SparkFilter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.servlet.FilterConfig", false, SparkFilter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.servlet.http.HttpServletRequest", false, SparkFilter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.servlet.http.HttpServletResponse", false, SparkFilter_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SparkFilter_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "spark.servlet.SparkFilter",
      "spark.globalstate.ServletFlag",
      "spark.route.ServletRoutes",
      "spark.staticfiles.StaticFilesConfiguration",
      "spark.route.Routes",
      "spark.servlet.MyApp",
      "spark.utils.StringUtils",
      "spark.servlet.FilterTools",
      "spark.Service",
      "spark.ExceptionMapper",
      "spark.Spark$SingletonHolder",
      "spark.Spark",
      "spark.utils.ResourceUtils",
      "spark.resource.AbstractResourceHandler",
      "spark.resource.ExternalResourceHandler",
      "spark.staticfiles.StaticFilesFolder",
      "spark.resource.ClassPathResourceHandler",
      "spark.route.HttpMethod",
      "spark.FilterImpl",
      "spark.RouteImpl",
      "spark.http.matching.MatcherFilter",
      "spark.Request",
      "spark.Response",
      "spark.CustomErrorPages",
      "spark.CustomErrorPages$SingletonHolder",
      "spark.utils.GzipUtils",
      "org.eclipse.jetty.util.log.Log",
      "org.eclipse.jetty.util.log.AbstractLogger",
      "org.eclipse.jetty.util.Uptime",
      "org.eclipse.jetty.util.component.AbstractLifeCycle",
      "org.eclipse.jetty.util.component.ContainerLifeCycle",
      "org.eclipse.jetty.server.handler.AbstractHandler"
    );
  }
}
