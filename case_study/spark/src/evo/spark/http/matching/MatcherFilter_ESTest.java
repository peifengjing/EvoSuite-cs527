/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 16:35:41 GMT 2017
 */

package spark.http.matching;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.util.Enumeration;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletOutputStream;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.embeddedserver.jetty.HttpRequestWrapper;
import spark.http.matching.MatcherFilter;
import spark.servlet.FilterConfigWrapper;
import spark.staticfiles.StaticFilesConfiguration;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MatcherFilter_ESTest extends MatcherFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      spark.route.Routes routes0 = spark.route.Routes.create();
      StaticFilesConfiguration staticFilesConfiguration0 = StaticFilesConfiguration.servletInstance;
      staticFilesConfiguration0.configureExternal("");
      MatcherFilter matcherFilter0 = new MatcherFilter(routes0, staticFilesConfiguration0, false, false);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest0).getPathInfo();
      doReturn((String) null).when(httpServletRequest0).getServletPath();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpRequestWrapper httpRequestWrapper0 = new HttpRequestWrapper(httpServletRequestWrapper0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      try { 
        matcherFilter0.doFilter(httpRequestWrapper0, httpServletResponseWrapper0, filterChain0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.ExternalResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      spark.route.Routes routes0 = spark.route.Routes.create();
      StaticFilesConfiguration staticFilesConfiguration0 = StaticFilesConfiguration.servletInstance;
      MatcherFilter matcherFilter0 = new MatcherFilter(routes0, staticFilesConfiguration0, false, false);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpRequestWrapper httpRequestWrapper0 = new HttpRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      httpRequestWrapper0.setRequest(httpRequestWrapper0);
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matcherFilter0.doFilter(httpRequestWrapper0, httpServletResponseWrapper0, filterChain0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      spark.route.Routes routes0 = spark.route.Routes.create();
      StaticFilesConfiguration staticFilesConfiguration0 = StaticFilesConfiguration.servletInstance;
      MatcherFilter matcherFilter0 = new MatcherFilter(routes0, staticFilesConfiguration0, true, true);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      doReturn((String) null).when(httpServletRequest0).getMethod();
      HttpRequestWrapper httpRequestWrapper0 = new HttpRequestWrapper(httpServletRequest0);
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpRequestWrapper0);
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matcherFilter0.doFilter(httpServletRequestWrapper0, (ServletResponse) null, filterChain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.http.matching.MatcherFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      spark.route.Routes routes0 = spark.route.Routes.create();
      StaticFilesConfiguration staticFilesConfiguration0 = StaticFilesConfiguration.servletInstance;
      staticFilesConfiguration0.clear();
      staticFilesConfiguration0.configureExternal("");
      MatcherFilter matcherFilter0 = new MatcherFilter(routes0, staticFilesConfiguration0, false, false);
      matcherFilter0.destroy();
      matcherFilter0.destroy();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(routes0, (Object) null, (Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest0).getPathInfo();
      doReturn((String) null).when(httpServletRequest0).getServletPath();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpRequestWrapper httpRequestWrapper0 = new HttpRequestWrapper(httpServletRequestWrapper0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      try { 
        matcherFilter0.doFilter(httpRequestWrapper0, httpServletResponseWrapper0, filterChain0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.ExternalResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      spark.route.Routes routes0 = spark.route.Routes.create();
      StaticFilesConfiguration staticFilesConfiguration0 = new StaticFilesConfiguration();
      MatcherFilter matcherFilter0 = new MatcherFilter(routes0, staticFilesConfiguration0, true, true);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("ld=Oc+?LEZ _i^xg|31", "X-HTTP-Method-Override").when(httpServletRequest0).getHeader(anyString());
      doReturn("X-HTTP-Method-Override").when(httpServletRequest0).getRequestURI();
      HttpRequestWrapper httpRequestWrapper0 = new HttpRequestWrapper(httpServletRequest0);
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpRequestWrapper0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(httpServletResponse0).isCommitted();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      matcherFilter0.doFilter(httpServletRequestWrapper0, httpServletResponseWrapper0, filterChain0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      spark.route.Routes routes0 = spark.route.Routes.create();
      StaticFilesConfiguration staticFilesConfiguration0 = new StaticFilesConfiguration();
      MatcherFilter matcherFilter0 = new MatcherFilter(routes0, staticFilesConfiguration0, false, false);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null).when(httpServletRequest0).getHeader(anyString());
      doReturn((Enumeration) null).when(httpServletRequest0).getHeaders(anyString());
      doReturn((String) null).when(httpServletRequest0).getRequestURI();
      HttpRequestWrapper httpRequestWrapper0 = new HttpRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletResponse0).getContentType();
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      doReturn(false).when(httpServletResponse0).isCommitted();
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matcherFilter0.doFilter(httpRequestWrapper0, httpServletResponseWrapper0, filterChain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      spark.route.Routes routes0 = spark.route.Routes.create();
      StaticFilesConfiguration staticFilesConfiguration0 = new StaticFilesConfiguration();
      MatcherFilter matcherFilter0 = new MatcherFilter(routes0, staticFilesConfiguration0, true, true);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("ld=Oc+?LEZ _i^xg|31", "X-HTTP-Method-Override").when(httpServletRequest0).getHeader(anyString());
      doReturn("X-HTTP-Method-Override").when(httpServletRequest0).getRequestURI();
      HttpRequestWrapper httpRequestWrapper0 = new HttpRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      matcherFilter0.doFilter(httpRequestWrapper0, httpServletResponseWrapper0, filterChain0);
      assertTrue(httpRequestWrapper0.notConsumed());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      doReturn((String) null).when(httpServletRequest0).getMethod();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      StaticFilesConfiguration staticFilesConfiguration0 = StaticFilesConfiguration.servletInstance;
      MatcherFilter matcherFilter0 = new MatcherFilter((spark.route.Routes) null, staticFilesConfiguration0, true, true);
      // Undeclared exception!
      try { 
        matcherFilter0.doFilter(httpServletRequest0, httpServletResponse0, filterChain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.http.matching.MatcherFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      spark.route.Routes routes0 = spark.route.Routes.create();
      StaticFilesConfiguration staticFilesConfiguration0 = StaticFilesConfiguration.servletInstance;
      MatcherFilter matcherFilter0 = new MatcherFilter(routes0, staticFilesConfiguration0, false, false);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      doReturn((String) null).when(httpServletRequest0).getMethod();
      HttpRequestWrapper httpRequestWrapper0 = new HttpRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matcherFilter0.doFilter(httpRequestWrapper0, httpServletResponseWrapper0, filterChain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.http.matching.MatcherFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      spark.route.Routes routes0 = spark.route.Routes.create();
      StaticFilesConfiguration staticFilesConfiguration0 = StaticFilesConfiguration.servletInstance;
      MatcherFilter matcherFilter0 = new MatcherFilter(routes0, staticFilesConfiguration0, false, false);
      FilterConfigWrapper filterConfigWrapper0 = new FilterConfigWrapper((FilterConfig) null);
      matcherFilter0.init(filterConfigWrapper0);
  }
}
