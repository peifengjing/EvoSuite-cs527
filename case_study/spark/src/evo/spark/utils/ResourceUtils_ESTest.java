/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 16:27:48 GMT 2017
 */

package spark.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import spark.utils.ResourceUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResourceUtils_ESTest extends ResourceUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      ResourceUtils.useCachesIfNecessary(uRLConnection0);
      assertFalse(uRLConnection0.getUseCaches());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = ResourceUtils.isUrl("file:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.URI("file:", "53zkcrWcZ:W7Z$@:E", "Yq[S?wj.BoX");
      URL uRL0 = MockURI.toURL(uRI0);
      URI uRI1 = ResourceUtils.toURI(uRL0);
      assertNull(uRI1.getRawQuery());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URI uRI0 = ResourceUtils.toURI("classpath:file:");
      assertEquals("classpath", uRI0.getScheme());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      boolean boolean0 = ResourceUtils.isFileURL(uRL0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URL uRL0 = MockURL.URL("file", (String) null, 3, ".`N(kbT");
      File file0 = ResourceUtils.getFile(uRL0, ":`z?43");
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("");
      File file0 = ResourceUtils.getFile(uRL0, "");
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/ cannot be resolved to URL because it does not exist");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      URL uRL0 = ResourceUtils.getURL(" cannot be resolved to URL because it does not exist");
      File file0 = ResourceUtils.getFile(uRL0, " cannot be resolved to URL because it does not exist");
      assertEquals(" cannot be resolved to URL because it does not exist", file0.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("Qd#j\"D)L/.s:]Jtd");
      File file0 = ResourceUtils.getFile(uRL0);
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/Qd#j\"D)L", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("");
      File file0 = ResourceUtils.getFile(uRL0);
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/ cannot be resolved to URL because it does not exist");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      URL uRL0 = ResourceUtils.getURL(" cannot be resolved to URL because it does not exist");
      File file0 = ResourceUtils.getFile(uRL0);
      assertEquals(" cannot be resolved to URL because it does not exist", file0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("");
      URI uRI0 = MockURL.toURI(uRL0);
      File file0 = ResourceUtils.getFile(uRI0, "lQ@qx");
      assertTrue(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("wP3g");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/wP3g");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ")As)ME");
      URI uRI0 = ResourceUtils.toURI(uRL0);
      File file0 = ResourceUtils.getFile(uRI0, "classpath:s");
      assertEquals(7L, file0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL(".|D5WnTQO");
      URI uRI0 = ResourceUtils.toURI(uRL0);
      File file0 = ResourceUtils.getFile(uRI0);
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/.|D5WnTQO", file0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("");
      URI uRI0 = MockURL.toURI(uRL0);
      File file0 = ResourceUtils.getFile(uRI0);
      assertEquals("spark", file0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("wP3g");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/wP3g");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ")As)ME");
      URI uRI0 = ResourceUtils.toURI(uRL0);
      File file0 = ResourceUtils.getFile(uRI0);
      assertEquals(7L, file0.length());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/0Yec}8y2v~(<2/y");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "~6c\"u(%cnw)q+");
      File file0 = ResourceUtils.getFile("0Yec}8y2v~(<2/y");
      assertEquals(14L, file0.length());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = ResourceUtils.getFile("");
      assertTrue(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("uo!*B7OI", "uo!*B7OI", 0, "", uRLStreamHandler0);
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      assertEquals("uo!*b7oi", uRL1.getProtocol());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Resource location must not be null", "El6hWw^HuWnL", 2907, "Resource location must not be null", uRLStreamHandler0);
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      assertEquals("El6hWw^HuWnL", uRL1.getHost());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URL uRL0 = MockURL.URL("file", (String) null, 3, ".`N(kbT");
      try { 
        ResourceUtils.toURI(uRL0);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in opaque part at index 6: file:.`N(kbT
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.toURI((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.toURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.isJarURL((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.isFileURL((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.getURL((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resource location must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.getFile((URL) null, "\"LmP xL:YDdz(B&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resource URL must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.getFile((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resource URL must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        ResourceUtils.getFile(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // URL cannot be resolved to absolute file path because it does not reside in the file system: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.getFile((URI) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resource URI must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.getFile((URI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resource URI must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.getFile((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resource location must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.extractJarFileURL((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URI uRI0 = MockURI.URI("file:", (String) null, "P?wgf?J94o");
      File file0 = ResourceUtils.getFile(uRI0, (String) null);
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URI uRI0 = MockURI.create("");
      try { 
        ResourceUtils.getFile(uRI0, "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         //  cannot be resolved to absolute file path because it does not reside in the file system: 
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      URI uRI0 = ResourceUtils.toURI("P?wgf?J94o");
      assertEquals("wgf?J94o", uRI0.getRawQuery());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL(".|D5WnTQO");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      assertSame(uRL1, uRL0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("wsjar", "wsjar", 3549, "wsjar", uRLStreamHandler0);
      boolean boolean0 = ResourceUtils.isJarURL(uRL0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("zip", "zip", 3549, "zip", uRLStreamHandler0);
      boolean boolean0 = ResourceUtils.isJarURL(uRL0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL(".|D5WnTQO");
      boolean boolean0 = ResourceUtils.isJarURL(uRL0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      URL uRL0 = MockURL.URL("jar", "u[6es~XW", "jar");
      boolean boolean0 = ResourceUtils.isJarURL(uRL0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      URI uRI0 = MockURI.create("");
      try { 
        ResourceUtils.getFile(uRI0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // URI cannot be resolved to absolute file path because it does not reside in the file system: 
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        ResourceUtils.getFile(uRL0, ".");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // . cannot be resolved to absolute file path because it does not reside in the file system: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      try { 
        ResourceUtils.getFile("classpath:2wgQB");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [2wgQB] cannot be resolved to absolute file path because it does not reside in the file system
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      File file0 = ResourceUtils.getFile("classpath:");
      assertEquals("classes", file0.getName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      File file0 = ResourceUtils.getFile(".=7dSVfr6jP,");
      assertTrue(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("classpath:");
      assertEquals("file", uRL0.getProtocol());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = ResourceUtils.isUrl("classpath:jar");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = ResourceUtils.isUrl((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = ResourceUtils.isUrl(".=7dSVfr6jP,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      URI uRI0 = MockURI.URI("file:", "53zkcrWcZ:W7Z$@:E", "Yq[S?wj.BoX");
      File file0 = ResourceUtils.getFile(uRI0);
      assertEquals(0L, file0.length());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      URI uRI0 = MockURI.URI("file:", "53zkcrWcZ:W7Z$@:E", "Yq[S?wj.BoX");
      URL uRL0 = MockURI.toURL(uRI0);
      File file0 = ResourceUtils.getFile(uRL0);
      assertFalse(file0.canExecute());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.useCachesIfNecessary((URLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL(" cannot be resolved to URL because it does not exist");
      boolean boolean0 = ResourceUtils.isFileURL(uRL0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL(".%6>2q9&wiGGmlu");
      URI uRI0 = ResourceUtils.toURI(uRL0);
      ResourceUtils.getFile(uRI0, ".%6>2q9&wiGGmlu");
      assertEquals("file:/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/.%256%3E2q9&wiGGmlu", uRI0.toString());
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/.%256%3E2q9&wiGGmlu", uRI0.getRawPath());
  }
}
