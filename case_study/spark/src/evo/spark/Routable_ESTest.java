/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 17:30:35 GMT 2017
 */

package spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Deque;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import spark.ExceptionHandler;
import spark.Filter;
import spark.FilterImpl;
import spark.ResponseTransformer;
import spark.Route;
import spark.RouteGroup;
import spark.RouteImpl;
import spark.Service;
import spark.TemplateEngine;
import spark.TemplateViewRoute;
import spark.embeddedserver.EmbeddedServer;
import spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper;
import spark.route.HttpMethod;
import spark.route.Routes;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Routable_ESTest extends Routable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      service0.threadIdleTimeoutMillis = 1;
      Service service2 = service1.staticFileLocation("");
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service1.put("", "", route0);
      Route route1 = mock(Route.class, new ViolatedAssumptionAnswer());
      service0.patch("w7UwimJU!b(IX#SxK", route1);
      service0.after((String) null, "w7UwimJU!b(IX#SxK", (Filter) null);
      assertSame(service0, service2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0);
      Service service2 = service1.secure("i5v", "pV<3X-B", "i5v", "#KbFX", false);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      Service service4 = service3.externalStaticFileLocation("pV<3X-B");
      Service service5 = service4.staticFileLocation("i5v");
      Consumer<Exception> consumer0 = (Consumer<Exception>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      service5.initExceptionHandler(consumer0);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service4.options("", "pV<3X-B", templateViewRoute0, templateEngine0);
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      FilterImpl filterImpl0 = FilterImpl.create("pV<3X-B", filter0);
      FilterImpl filterImpl1 = filterImpl0.withPrefix("");
      FilterImpl filterImpl2 = FilterImpl.create("This must be done after route mapping has begun", "This must be done before route mapping has begun", filterImpl1);
      service3.afterAfter("#KbFX", (Filter) filterImpl2);
      assertSame(service3, service0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("8h\"Dr:kt;ZYw", "'vAxP5jc&b{L5FXr%%", "N$Z%1}", "N$Z%1}");
      Service service2 = service1.externalStaticFileLocation("8h\"Dr:kt;ZYw");
      Service service3 = service2.threadPool(4567, 4567, 0);
      Service service4 = service3.staticFileLocation("8h\"Dr:kt;ZYw");
      Service service5 = service4.secure("'vAxP5jc&b{L5FXr%%", "N$Z%1}", "8h\"Dr:kt;ZYw", "'vAxP5jc&b{L5FXr%%", false);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service5.post("spark.FilterImpl", route0, responseTransformer0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("");
      Service service2 = service1.threadPool((-2478));
      Service service3 = service2.secure("", "v", "v", "Redirect failure");
      Service service4 = service3.staticFileLocation("v");
      Service service5 = service4.webSocketIdleTimeoutMillis((-903));
      service5.ipAddress = "v";
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service5.patch("", "v", route0);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        service5.ipAddress("Redirect failure");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool((-2843), (-2843), (-2843));
      Service service2 = service1.port(1366);
      Service service3 = service2.threadPool(0);
      Service service4 = service3.ipAddress("N 7_I*.bzM ");
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service4.trace("&!LSA=E", route0);
      Route route1 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service3.connect("", route1, responseTransformer0);
      Route route2 = mock(Route.class, new ViolatedAssumptionAnswer());
      service1.trace("", route2);
      HttpMethod httpMethod0 = HttpMethod.before;
      FilterImpl filterImpl0 = FilterImpl.create("", "]x[>PWb~OaU", (Filter) null);
      FilterImpl filterImpl1 = filterImpl0.withPrefix("");
      FilterImpl filterImpl2 = FilterImpl.create("&!LSA=E", filterImpl1);
      service1.addFilter(httpMethod0, filterImpl2);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.head((String) null, "Include Set", templateViewRoute0, templateEngine0);
      assertSame(service0, service2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 1);
      Service service2 = service1.threadPool((-1));
      Service service3 = service2.ipAddress("0v;ykRto\"k6uCBlMJ");
      Service service4 = service3.staticFileLocation("0v;ykRto\"k6uCBlMJ");
      service2.activeThreadCount();
      Service service5 = service4.port(4567);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service4.threadPool(4567);
      service5.delete("0v;ykRto\"k6uCBlMJ", "", route0);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service5.path("O", routeGroup0);
      Route route1 = mock(Route.class, new ViolatedAssumptionAnswer());
      service5.notFound(route1);
      Route route2 = mock(Route.class, new ViolatedAssumptionAnswer());
      service3.post("O", "+/*paths", route2);
      assertSame(service3, service4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.externalStaticFileLocation("");
      Service service3 = service2.staticFileLocation("");
      Service service4 = service3.secure("", "", "", "");
      Service service5 = service4.webSocketIdleTimeoutMillis(0);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service5.get("t8Q", "+/*paths", route0);
      assertSame(service5, service4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("", "", "", "", true);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service1.get("", "", route0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis((-148));
      Service service2 = service1.externalStaticFileLocation("s&cobm_TJEB");
      Service service3 = service2.threadPool((-1), (-1696), 4567);
      Service service4 = service3.secure("+/*paths", "s&cobm_TJEB", "7=\fVlYiqC@g", "7=\fVlYiqC@g", false);
      Service service5 = service4.port(4567);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service5.connect("", route0, (ResponseTransformer) null);
      assertSame(service5, service4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("+/*paths");
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service1.init();
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service1.trace("Q)8<U:[ #IqcW!eJ!Fw", "+/*paths", route0, responseTransformer0);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      FilterImpl filterImpl0 = FilterImpl.create("+/*paths", "Q)8<U:[ #IqcW!eJ!Fw", (Filter) null);
      FilterImpl filterImpl1 = filterImpl0.withPrefix("+/*paths");
      FilterImpl.create("|", filterImpl1);
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.trace("Q)8<U:[ #IqcW!eJ!Fw", "+/*paths", templateViewRoute0, templateEngine0);
      int int0 = service1.port();
      assertEquals(4567, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Service service0 = Service.ignite();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Service service1 = service0.port(1168);
      service1.maxThreads = 4567;
      Service service2 = service1.ipAddress("bV@S@)IbmvcPMCs6z`/");
      Service service3 = Service.ignite();
      Service service4 = service2.externalStaticFileLocation("");
      Service.ignite();
      service4.staticFileLocation("X'!_f+5)(=\"ngd ");
      service4.internalServerError("5AvDoRzI");
      service4.after("", "", (Filter) null);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service1.put("9/C|vq0wEy(", "{K", route0, responseTransformer0);
      Route route1 = mock(Route.class, new ViolatedAssumptionAnswer());
      service4.connect(",=", "{K", route1);
      Route route2 = mock(Route.class, new ViolatedAssumptionAnswer());
      service2.options("5AvDoRzI", route2);
      service3.before("", "9/C|vq0wEy(", (Filter) null);
      assertFalse(service3.equals((Object)service4));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("(Hxne^>eNd;.B\n/7");
      Service service2 = service1.port((-900));
      Service service3 = service2.staticFileLocation("(Hxne^>eNd;.B\n/7");
      Service service4 = service3.threadPool(4567);
      Service service5 = service4.secure("(Hxne^>eNd;.B\n/7", "l!g8&Hujsk+e0w8h", "C-A~3ps?4~uNpX|DV", "]|d6YAam %a>Mrcx/4", false);
      service4.init();
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service5.delete("+/*paths", route0, responseTransformer0);
      Map<String, WebSocketHandlerWrapper> map0 = service0.webSocketHandlers;
      service1.webSocketHandlers = null;
      Route route1 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer1 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service3.head("I-H(p{V0'l/)0yG", "-GKi[: :v4xfk[", route1, responseTransformer1);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service4.delete("]|d6YAam %a>Mrcx/4", ".3>E.<e+|[9*j8", templateViewRoute0, templateEngine0);
      TemplateViewRoute templateViewRoute1 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service2.head("(Hxne^>eNd;.B\n/7", "9Zdz7?|@R`#h#|", templateViewRoute1, templateEngine1);
      assertSame(service1, service2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1536, (-2731), 1536);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service1.delete("+/*paths", route0, responseTransformer0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(1739);
      Service service2 = service1.externalStaticFileLocation("t39t%PT7ec#Xy");
      Service service3 = service2.secure("'folder' must not be null", "", "t39t%PT7ec#Xy", "bev([SOeMSFy", false);
      Service service4 = service3.webSocketIdleTimeoutMillis((-3118));
      Service service5 = service4.ipAddress("+/*paths");
      service5.delete("96`+ek$>zX\"pghGu*", (TemplateViewRoute) null, (TemplateEngine) null);
      assertSame(service5, service4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.connect("8(g", templateViewRoute0, templateEngine0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 3357);
      Service service2 = service1.port(4567);
      Service service3 = service2.ipAddress("kya*k9r7\"Z],8lI`)W@");
      Optional<Integer> optional0 = service2.webSocketIdleTimeoutMillis;
      service1.webSocketIdleTimeoutMillis = optional0;
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service3.patch("lAEl<o", "lAEl<o", route0);
      HttpMethod httpMethod0 = HttpMethod.after;
      RouteImpl routeImpl0 = mock(RouteImpl.class, new ViolatedAssumptionAnswer());
      doReturn((RouteImpl) null).when(routeImpl0).withPrefix(anyString());
      // Undeclared exception!
      try { 
        service2.addRoute(httpMethod0, routeImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.route.Routes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(0);
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.ipAddress("+/*paths");
      Service service4 = service3.port(4567);
      Service service5 = service4.threadPool(4567);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service5.put("", templateViewRoute0, templateEngine0);
      assertSame(service5, service0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.delete("", "", templateViewRoute0, templateEngine0);
      Map<String, WebSocketHandlerWrapper> map0 = service0.webSocketHandlers;
      service0.webSocketHandlers = null;
      TemplateViewRoute templateViewRoute1 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.options("?(G-7U[)kX#:wqG<", templateViewRoute1, templateEngine1);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service0.delete("", route0);
      Route route1 = mock(Route.class, new ViolatedAssumptionAnswer());
      service0.put((String) null, route1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Service service0 = Service.ignite();
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service0.head("FXg:", route0, responseTransformer0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(0);
      Service service2 = service1.ipAddress("_,)(^-.rrUYS,0Be");
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      Service service4 = service3.threadPool(0);
      Service service5 = service4.externalStaticFileLocation("}q(;Ay}&`9s>p`g(");
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service5.get("", route0, responseTransformer0);
      Route route1 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer1 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service3.post("", ">{N%Er%xtr-t", route1, responseTransformer1);
      // Undeclared exception!
      try { 
        service0.secure("", "bW", "", "bW", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(4567, 4567, 4567);
      HttpMethod httpMethod0 = HttpMethod.put;
      service1.activeThreadCount();
      RouteImpl routeImpl0 = mock(RouteImpl.class, new ViolatedAssumptionAnswer());
      doReturn("close").when(routeImpl0).toString();
      doReturn((String) null).when(routeImpl0).getAcceptType();
      doReturn((String) null).when(routeImpl0).getPath();
      service1.initialized = false;
      RouteImpl routeImpl1 = mock(RouteImpl.class, new ViolatedAssumptionAnswer());
      doReturn(routeImpl0).when(routeImpl1).withPrefix(anyString());
      service1.addRoute(httpMethod0, routeImpl1);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service0.post(" /Cf}", " /Cf}", route0, responseTransformer0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 0);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service1.get(" TzU2'g8=UZKK^g4!c", route0, responseTransformer0);
      Route route1 = mock(Route.class, new ViolatedAssumptionAnswer());
      service0.post(" TzU2'g8=UZKK^g4!c", " TzU2'g8=UZKK^g4!c", route1);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Service service0 = Service.ignite();
      Consumer<Exception> consumer0 = (Consumer<Exception>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Service service1 = service0.threadPool(0);
      service0.initExceptionHandler(consumer0);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.trace("m*:\"]Y_o", templateViewRoute0, templateEngine0);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service0.internalServerError(route0);
      assertSame(service0, service1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("~>ZHM230");
      Service service2 = service1.ipAddress("~>ZHM230");
      Service service3 = service2.staticFileLocation("");
      Service service4 = service3.threadPool(4567, 1, 4567);
      Service service5 = service4.secure("", "~>ZHM230", "stop failed", "");
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service5.patch("+/*paths", "je^&(5b[l4*o^|RhGv", route0, responseTransformer0);
      assertSame(service2, service5);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(2335);
      Service service2 = service1.threadPool(2335, 2335, 1373);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      service2.options("", "+/*paths", templateViewRoute0, (TemplateEngine) null);
      assertSame(service2, service1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.post("UA?SCU'Tv1n:", "72Zb(w;z/='eC2a4/)`", templateViewRoute0, templateEngine0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("_");
      Service service2 = service1.secure("", "spark.Spark", "wwXWT,WTl(gjnki", "wwXWT,WTl(gjnki", false);
      Service service3 = service2.ipAddress("wwXWT,WTl(gjnki");
      Service service4 = service3.secure("spark.Spark", "TWM7}?PE$gQ!A[&k_}", "_", "spark.Spark");
      Service service5 = service4.port(4567);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service5.delete("", "wwXWT,WTl(gjnki", route0, (ResponseTransformer) null);
      assertSame(service5, service3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(2, 961, 709);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service1.patch("", "", templateViewRoute0, templateEngine0);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service0.delete("", "", route0, responseTransformer0);
      assertSame(service0, service1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("z\"3");
      Service service2 = service1.threadPool(4567);
      Service service3 = service2.secure("z\"3", "~\"gNF6+", "", "~\"gNF6+", true);
      Service service4 = service3.threadPool(0, 0, (-1715));
      Service service5 = service4.secure(" ", "~\"gNF6+", "9`+Qk0L;mnR", "");
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service5.trace("", route0, responseTransformer0);
      assertSame(service5, service3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("r':", "", (String) null, "r':");
      Service service2 = service1.port(4567);
      service0.internalServerError("r(X");
      Service service3 = Service.ignite();
      Deque<String> deque0 = service1.pathDeque;
      service1.pathDeque = deque0;
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service2.put((String) null, "+/*paths", route0);
      Route route1 = mock(Route.class, new ViolatedAssumptionAnswer());
      service0.put("r':", route1);
      Route route2 = mock(Route.class, new ViolatedAssumptionAnswer());
      service0.put("+/*paths", route2);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      service3.patch((String) null, templateViewRoute0, (TemplateEngine) null);
      assertFalse(service3.equals((Object)service1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.connect("t#<*9Lu)c=o2b0<(b|l", "", templateViewRoute0, templateEngine0);
      TemplateViewRoute templateViewRoute1 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.get("t#<*9Lu)c=o2b0<(b|l", templateViewRoute1, templateEngine1);
      TemplateViewRoute templateViewRoute2 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      service0.patch("t#<*9Lu)c=o2b0<(b|l", templateViewRoute2, (TemplateEngine) null);
      TemplateViewRoute templateViewRoute3 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      service0.put("", "E.._>aCN", templateViewRoute3, (TemplateEngine) null);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      Service service2 = service1.staticFileLocation("");
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service1.put("", "", route0);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        service2.path((String) null, routeGroup0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(0, 0, 882);
      Service service2 = service1.externalStaticFileLocation("]zPv");
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service2.put("m/", route0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("spark.Spark");
      Service service2 = service1.threadPool(6);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service2.connect("spark.Spark", "}/n0.\"QI\"4CK4\"3Bs", route0);
      Route route1 = mock(Route.class, new ViolatedAssumptionAnswer());
      service1.get("}/n0.\"QI\"4CK4\"3Bs", route1);
      Route route2 = mock(Route.class, new ViolatedAssumptionAnswer());
      service0.connect("spark.Spark", route2);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("");
      Service service2 = service1.ipAddress("");
      Service service3 = service2.port(4567);
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service3.options("L(BHLR", route0, responseTransformer0);
      assertSame(service3, service0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("hr >TNS4#C#(o-Qe", "", "hr >TNS4#C#(o-Qe", "+/*paths");
      Service service2 = service1.staticFileLocation("");
      Service service3 = service2.threadPool(4567);
      Service service4 = service3.ipAddress("");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service4.connect((String) null, "connect", templateViewRoute0, templateEngine0);
      assertSame(service4, service1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.threadPool(124);
      Optional<Integer> optional0 = service1.webSocketIdleTimeoutMillis;
      service1.notFound((String) null);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service1.connect("+/*paths", (String) null, route0, (ResponseTransformer) null);
      // Undeclared exception!
      try { 
        service1.webSocket("7N|[", (Object) "7N|[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'
         //
         verifyException("spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(44);
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.internalServerError("+/*paths");
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service0.get(")j", "", route0, responseTransformer0);
      assertSame(service0, service1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.staticFileLocation("Removing path {}");
      Service service2 = service1.secure("Removing path {}", "Removing path {}", (String) null, "wqS637oo[C~G<K1N(");
      service0.notFound("The @Route value: ");
      EmbeddedServer embeddedServer0 = service2.server;
      service1.server = null;
      Service service3 = service2.port(4567);
      FilterImpl filterImpl0 = FilterImpl.create("", "", (Filter) null);
      FilterImpl.create("Server has not been properly initialized", (Filter) null);
      FilterImpl filterImpl1 = filterImpl0.withPrefix("wqS637oo[C~G<K1N(");
      service3.after((String) null, (Filter) filterImpl1);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      service2.port();
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service2.post("", templateViewRoute0, templateEngine0);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service0.head("{", route0);
      // Undeclared exception!
      try { 
        service2.halt(4567);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis((-2379));
      Service service2 = service1.threadPool(4567, 4567, 207);
      Service service3 = service2.secure("close", (String) null, "close", "Nb", false);
      service1.port(4567);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service3.post((String) null, route0);
      assertSame(service3, service2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(2054);
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      service1.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      // Undeclared exception!
      try { 
        service1.addFilter("cFE-0u@oQEz", (FilterImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("Vto", "", "", ";wz]Cfc|T1y,J)");
      Service service2 = service1.ipAddress("");
      Service service3 = service2.staticFileLocation("Vto");
      Service service4 = service3.webSocketIdleTimeoutMillis(553);
      Service service5 = service4.port(4567);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service5.trace(";wz]Cfc|T1y,J)", route0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.webSocketIdleTimeoutMillis(1817);
      Service service2 = service1.staticFileLocation("$ }7W1-OJ-'#&`SFWB");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+/*paths");
      Service service3 = service2.threadPool(684, 1817, 9);
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      FilterImpl filterImpl0 = FilterImpl.create("$ }7W1-OJ-'#&`SFWB", "JQ4e-g;YW47z<u)", filter0);
      FilterImpl filterImpl1 = filterImpl0.withPrefix("$ }7W1-OJ-'#&`SFWB");
      FilterImpl filterImpl2 = FilterImpl.create((String) null, filterImpl1);
      service3.before("", (Filter) filterImpl2);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service2.options((String) null, "", route0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(1168);
      service1.maxThreads = 4567;
      Service service2 = service1.ipAddress("bV@S@)IbmvcPMCs6z`/");
      Service.ignite();
      Service service3 = service2.externalStaticFileLocation("");
      Service.ignite();
      service3.staticFileLocation("X'!_f+5)(=\"ngd ");
      service3.internalServerError("5AvDoRzI");
      service3.after("", "", (Filter) null);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service1.put("9/C|vq0wEy(", "{K", route0, responseTransformer0);
      Route route1 = mock(Route.class, new ViolatedAssumptionAnswer());
      service3.connect(",=", "{K", route1);
      Route route2 = mock(Route.class, new ViolatedAssumptionAnswer());
      service2.options("5AvDoRzI", route2);
      assertSame(service2, service1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Service service0 = Service.ignite();
      // Undeclared exception!
      try { 
        service0.port();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done after route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("\"Og:r-pxq[fHrWPOBP", "jV~7@.{w>0x~)o\tO", "", "\"Og:r-pxq[fHrWPOBP");
      Service service2 = service1.threadPool(4567);
      service2.webSocketIdleTimeoutMillis(4567);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      Service service4 = service3.ipAddress("DRO@vZc?");
      Service service5 = service4.staticFileLocation("DRO@vZc?");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      service4.threadIdleTimeoutMillis = 4567;
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service5.patch("DRO@vZc?", "Cannot mix IPv4 and IPv6: ", templateViewRoute0, templateEngine0);
      TemplateViewRoute templateViewRoute1 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service1.get("`,N", "jV~7@.{w>0x~)o\tO", templateViewRoute1, templateEngine1);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service5.notFound(route0);
      Route route1 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service5.connect("rdTn9 T,4", "rdTn9 T,4", route1, responseTransformer0);
      service5.afterAfter((Filter) null);
      TemplateViewRoute templateViewRoute2 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine2 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.patch("", "E", templateViewRoute2, templateEngine2);
      TemplateViewRoute templateViewRoute3 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine3 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service4.head("", "E", templateViewRoute3, templateEngine3);
      TemplateEngine templateEngine4 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service1.head("DRO@vZc?", (TemplateViewRoute) null, templateEngine4);
      TemplateEngine templateEngine5 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.options("`,N", "`,N", (TemplateViewRoute) null, templateEngine5);
      assertSame(service0, service1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.secure("++_J?`1?&O pz&-jUL", "Z_p@MsIu8jGDO&v8J&", "M_)= YQ7\"5Jva,~", "U@");
      Service service2 = service1.staticFileLocation("U@");
      Service service3 = service2.threadPool(0, 0, 46);
      Service service4 = service3.port(4567);
      Service service5 = service4.threadPool(4567);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service3.activeThreadCount();
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service3.webSocketIdleTimeoutMillis(4567);
      service5.get("+/*paths", route0, responseTransformer0);
      Route route1 = mock(Route.class, new ViolatedAssumptionAnswer());
      service4.internalServerError(route1);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service2.delete("++_J?`1?&O pz&-jUL", "Z_p@MsIu8jGDO&v8J&", templateViewRoute0, templateEngine0);
      Route route2 = mock(Route.class, new ViolatedAssumptionAnswer());
      service2.head("-x%qna*;", "wm", route2);
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      FilterImpl filterImpl0 = FilterImpl.create("Z_p@MsIu8jGDO&v8J&", "_PWYBjX<=Nx`B\r", filter0);
      FilterImpl filterImpl1 = filterImpl0.withPrefix("-x%qna*;");
      FilterImpl filterImpl2 = FilterImpl.create("$", filterImpl1);
      service1.addFilter("++_J?`1?&O pz&-jUL", filterImpl2);
      assertSame(service1, service3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.ipAddress("");
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      service1.path("spark.HaltException", routeGroup0);
      Service service2 = service1.externalStaticFileLocation("S*G=]bpR7S");
      Service service3 = service2.secure("", "T;!AW>2dJo:>q^", "S*G=]bpR7S", "");
      service3.initialized = false;
      service3.init();
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service0.patch("T;!AW>2dJo:>q^", route0, responseTransformer0);
      FilterImpl filterImpl0 = FilterImpl.create("Qtq@MY;4", (Filter) null);
      FilterImpl filterImpl1 = filterImpl0.withPrefix((String) null);
      service1.stop();
      FilterImpl filterImpl2 = FilterImpl.create("Redirecting ({} {} to {}", "Redirecting ({} {} to {}", filterImpl1);
      filterImpl2.withPrefix(">w,x");
      service2.after((Filter) filterImpl2);
      service2.trace("org.eclipse.jetty.webapp.ClasspathPattern", ";it-4SMaT7#H>Nof\"", (Route) null);
      assertSame(service2, service1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Service service0 = Service.ignite();
      Routes routes0 = service0.routes;
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.trace("CoQHii>nO@zh", "CoQHii>nO@zh", (TemplateViewRoute) null, templateEngine0);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service0.put(".N@m#'b1", route0, responseTransformer0);
      service0.routes = null;
      Consumer<Exception> consumer0 = (Consumer<Exception>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        service0.initExceptionHandler(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Service service0 = Service.ignite();
      String string0 = "}?!Dcn<R4G";
      Service service1 = service0.externalStaticFileLocation("}?!Dcn<R4G");
      Service service2 = service1.ipAddress("}?!Dcn<R4G");
      Service service3 = service2.threadPool((-1160));
      EmbeddedServer embeddedServer0 = service2.server;
      service0.server = null;
      Service service4 = service3.webSocketIdleTimeoutMillis((-1160));
      String string1 = "stop failed";
      String string2 = "";
      Service service5 = service4.secure("}?!Dcn<R4G", "stop failed", "}?!Dcn<R4G", "");
      service5.stop();
      Route route0 = null;
      service3.patch("}?!Dcn<R4G", (Route) null);
      service5.init();
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service3.head("stop failed", "stop failed", (Route) null, responseTransformer0);
      String string3 = "";
      RouteImpl routeImpl0 = mock(RouteImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(routeImpl0).getAcceptType();
      doReturn((String) null).when(routeImpl0).getPath();
      service0.addRoute("", routeImpl0);
      service0.patch("}?!Dcn<R4G", "}?!Dcn<R4G", (Route) null);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      Consumer<Exception> consumer0 = (Consumer<Exception>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        service2.initExceptionHandler(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.port(44);
      Service service2 = service1.ipAddress("Rpxt<1%'}u$p+pwfJmY");
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service2.get(")j", templateViewRoute0, templateEngine0);
      assertSame(service2, service1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Service service0 = Service.ignite();
      Service service1 = service0.externalStaticFileLocation("?{n.:eK0~82/hx!");
      Service service2 = service1.secure("", "", "?{n.:eK0~82/hx!", "");
      service2.minThreads = (-15);
      Service service3 = service2.webSocketIdleTimeoutMillis(4567);
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      service3.maxThreads = 0;
      RouteImpl routeImpl0 = mock(RouteImpl.class, new ViolatedAssumptionAnswer());
      doReturn("LDCg%]PFUjh;z2").when(routeImpl0).toString();
      doReturn("+;MdIhq7\"rT{XJPv:s").when(routeImpl0).getAcceptType();
      doReturn("").when(routeImpl0).getPath();
      RouteImpl routeImpl1 = mock(RouteImpl.class, new ViolatedAssumptionAnswer());
      doReturn(routeImpl0).when(routeImpl1).withPrefix(anyString());
      service3.addRoute(httpMethod0, routeImpl1);
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service0.delete(".", "?{n.:eK0~82/hx!", route0);
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      FilterImpl filterImpl0 = FilterImpl.create("", "", filter0);
      FilterImpl filterImpl1 = filterImpl0.withPrefix("");
      FilterImpl filterImpl2 = FilterImpl.create(".", filterImpl1);
      service1.before((Filter) filterImpl2);
      service3.port();
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service1.options("", "Q", (Route) null, responseTransformer0);
      assertEquals(4567, Service.SPARK_DEFAULT_PORT);
  }
}
