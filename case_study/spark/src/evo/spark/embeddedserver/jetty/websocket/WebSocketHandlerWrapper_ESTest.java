/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 17:09:36 GMT 2017
 */

package spark.embeddedserver.jetty.websocket;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import org.eclipse.jetty.websocket.api.WebSocketAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.embeddedserver.jetty.websocket.WebSocketHandlerInstanceWrapper;
import spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebSocketHandlerWrapper_ESTest extends WebSocketHandlerWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        WebSocketHandlerWrapper.validateHandlerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<WebSocketAdapter> class0 = WebSocketAdapter.class;
      WebSocketHandlerWrapper.validateHandlerClass(class0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        WebSocketHandlerWrapper.validateHandlerClass(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'
         //
         verifyException("spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      WebSocketAdapter webSocketAdapter0 = new WebSocketAdapter();
      WebSocketHandlerInstanceWrapper webSocketHandlerInstanceWrapper0 = new WebSocketHandlerInstanceWrapper(webSocketAdapter0);
      Object object0 = webSocketHandlerInstanceWrapper0.getHandler();
      assertSame(object0, webSocketAdapter0);
  }
}
