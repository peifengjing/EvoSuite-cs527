/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 17:29:40 GMT 2017
 */

package spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.ModelAndView;
import spark.Request;
import spark.Response;
import spark.TemplateEngine;
import spark.TemplateViewRoute;
import spark.TemplateViewRouteImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TemplateViewRouteImpl_ESTest extends TemplateViewRouteImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(templateEngine0).render(any(spark.ModelAndView.class));
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, templateEngine0);
      ModelAndView modelAndView0 = templateViewRouteImpl0.modelAndView((Object) null, "*/*");
      Object object0 = templateViewRouteImpl0.render(modelAndView0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      doReturn("*/*").when(templateEngine0).render(any(spark.ModelAndView.class));
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      ModelAndView modelAndView0 = templateViewRouteImpl0.modelAndView("", "");
      templateViewRouteImpl0.render(modelAndView0);
      assertEquals("", modelAndView0.getViewName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(templateEngine0).render(any(spark.ModelAndView.class));
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, templateViewRoute0, templateEngine0);
      Object object0 = templateViewRouteImpl0.render((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (TemplateViewRoute) null, (TemplateEngine) null);
      // Undeclared exception!
      try { 
        templateViewRouteImpl0.render((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.TemplateViewRouteImpl$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("U*;Ri;)8{0}sF`", "U*;Ri;)8{0}sF`", templateViewRoute0, templateEngine0);
      // Undeclared exception!
      try { 
        templateViewRouteImpl0.render((Object) "U*;Ri;)8{0}sF`");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to spark.ModelAndView
         //
         verifyException("spark.TemplateViewRouteImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      doReturn((ModelAndView) null).when(templateViewRoute0).handle(any(spark.Request.class) , any(spark.Response.class));
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("U*;Ri;)8{0}sF`", "U*;Ri;)8{0}sF`", templateViewRoute0, templateEngine0);
      Request request0 = new Request();
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      Object object0 = templateViewRouteImpl0.handle(request0, response0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      doReturn("").when(templateEngine0).render(any(spark.ModelAndView.class));
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      ModelAndView modelAndView0 = templateViewRouteImpl0.modelAndView("", ")1c>sdA");
      templateViewRouteImpl0.render((Object) modelAndView0);
      assertEquals(")1c>sdA", modelAndView0.getViewName());
  }
}
