/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 16:46:35 GMT 2017
 */

package spark.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.URI;
import java.net.URL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import spark.resource.ClassPathResource;
import spark.resource.ExternalResource;
import spark.resource.Resource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractResource_ESTest extends AbstractResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("%JuHfvW");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/%JuHfvW");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "v[%mRvc{9EH5)/`s|r9");
      boolean boolean1 = externalResource0.isReadable();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<ClassPathResource> class0 = ClassPathResource.class;
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0, class0);
      boolean boolean0 = classPathResource0.isReadable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("GEb.Nb=`/?&");
      URL uRL0 = externalResource0.getURL();
      assertNull(uRL0.getQuery());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("W0ZF*s[$I J+|!Q+");
      String string0 = classPathResource0.getFilename();
      assertEquals("W0ZF*s[$I J+|!Q+", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("/", classLoader0);
      String string0 = classPathResource0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("GEb.Nb=`/?&");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/GEb.Nb=`/?&");
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      File file0 = externalResource0.getFileForLastModifiedCheck();
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      File file0 = externalResource0.getFileForLastModifiedCheck();
      assertEquals("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("GEb.Nb=`/?&");
      File file0 = externalResource0.getFileForLastModifiedCheck();
      assertFalse(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("%JuHfvW");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/%JuHfvW");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "v[%mRvc{9EH5)/`s|r9");
      File file0 = externalResource0.getFile();
      assertEquals("%JuHfvW", file0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      File file0 = externalResource0.getFile();
      assertFalse(file0.isFile());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource(".nK{FCxKP7Q.:D|v");
      File file0 = externalResource0.getFile();
      assertFalse(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      boolean boolean0 = externalResource0.exists();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("GEb.Nb=`/?&");
      boolean boolean0 = externalResource0.exists();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource(".nK{FCxKP7Q.:D|v");
      long long0 = externalResource0.contentLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.lastModified();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.isReadable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.getURL();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("]", classLoader0);
      try { 
        classPathResource0.getURL();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource []] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.getURI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("%W@GPq(p}}Y");
      try { 
        classPathResource0.getURI();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [%W@GPq(p}}Y] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.getFileForLastModifiedCheck();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource("v6W(", classLoader0, class0);
      try { 
        classPathResource0.getFileForLastModifiedCheck();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [java/lang/v6W(] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.getFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource(",-xU#zvlar*O.z|", classLoader0);
      try { 
        classPathResource0.getFile();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [,-xU#zvlar*O.z|] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.exists();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      Resource resource0 = classPathResource0.createRelative("");
      // Undeclared exception!
      try { 
        classPathResource0.equals(resource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<ExternalResource> class0 = ExternalResource.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.createRelative("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.contentLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource(" cannot be resolved to URL because it does not exist", classLoader0);
      try { 
        classPathResource0.contentLength();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [ cannot be resolved to URL because it does not exist] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("Fr");
      ExternalResource externalResource1 = new ExternalResource("Go");
      boolean boolean0 = externalResource0.equals(externalResource1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("%JuHfvW");
      ExternalResource externalResource1 = new ExternalResource("%JuHfvW");
      boolean boolean0 = externalResource0.equals(externalResource1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("GEb.Nb=`/?&");
      boolean boolean0 = externalResource0.equals("GEb.Nb=`/?&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("/", classLoader0);
      try { 
        classPathResource0.lastModified();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [] cannot be resolved in the file system for resolving its last-modified timestamp
         //
         verifyException("spark.resource.AbstractResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      long long0 = externalResource0.lastModified();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("GEb.Nb=`/?&");
      URI uRI0 = externalResource0.getURI();
      assertNull(uRI0.getHost());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<ClassPathResource> class0 = ClassPathResource.class;
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0, class0);
      String string0 = classPathResource0.toString();
      assertEquals("class path resource [spark/resource/]", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("quHfvW");
      try { 
        externalResource0.createRelative("quHfvW");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Cannot create a relative resource for external resource [/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/quHfvW]
         //
         verifyException("spark.resource.AbstractResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      externalResource0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("ucCF'2N6C%");
      boolean boolean0 = externalResource0.isOpen();
      assertFalse(boolean0);
  }
}
