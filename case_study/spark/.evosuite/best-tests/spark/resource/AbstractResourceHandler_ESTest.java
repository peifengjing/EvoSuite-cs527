/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 16:15:27 GMT 2017
 */

package spark.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpUpgradeHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.resource.AbstractFileResolvingResource;
import spark.resource.AbstractResourceHandler;
import spark.resource.ClassPathResourceHandler;
import spark.resource.ExternalResourceHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractResourceHandler_ESTest extends AbstractResourceHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExternalResourceHandler externalResourceHandler0 = new ExternalResourceHandler("cBts9)&c2u}O~+5dk");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        externalResourceHandler0.getResource(httpServletRequestWrapper0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassPathResourceHandler classPathResourceHandler0 = new ClassPathResourceHandler("[@");
      // Undeclared exception!
      try { 
        classPathResourceHandler0.getResource((HttpServletRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.AbstractResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExternalResourceHandler externalResourceHandler0 = new ExternalResourceHandler("", "To,.b'wDR");
      try { 
        externalResourceHandler0.getResource("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // 
         //
         verifyException("spark.resource.ExternalResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = AbstractResourceHandler.addPaths("/ %\")(?et7U?3", "/ %\")(?et7U?3");
      assertEquals("/ %\")(/ %\")(?et7U?3?et7U?3", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = AbstractResourceHandler.addPaths("/", "/");
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = AbstractResourceHandler.addPaths("O`$8/M,QT6g3d9%zjc", "");
      assertEquals("O`$8/M,QT6g3d9%zjc", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = AbstractResourceHandler.addPaths((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = AbstractResourceHandler.addPaths("/", "0");
      assertEquals("/0", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = AbstractResourceHandler.addPaths("b;;T0hdI]AEIPN~", "b;;T0hdI]AEIPN~");
      assertEquals("b/b;;T0hdI]AEIPN~;;T0hdI]AEIPN~", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = AbstractResourceHandler.addPaths(";", "javax.servlet.include.path_info");
      assertEquals("javax.servlet.include.path_info;", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = AbstractResourceHandler.addPaths("/", (String) null);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = AbstractResourceHandler.addPaths("", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = AbstractResourceHandler.addPaths("", "Sd^6");
      assertEquals("Sd^6", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassPathResourceHandler classPathResourceHandler0 = new ClassPathResourceHandler("", "");
      Object object0 = new Object();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(object0, (HttpUpgradeHandler) null, "").when(httpServletRequest0).getAttribute(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      try { 
        classPathResourceHandler0.getResource(httpServletRequestWrapper0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // 
         //
         verifyException("spark.resource.ClassPathResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExternalResourceHandler externalResourceHandler0 = new ExternalResourceHandler("BASIC");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("", "BASIC", "").when(httpServletRequest0).getAttribute(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      try { 
        externalResourceHandler0.getResource(httpServletRequestWrapper0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // BASIC
         //
         verifyException("spark.resource.ExternalResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassPathResourceHandler classPathResourceHandler0 = new ClassPathResourceHandler("1GA=iVr", "");
      Object object0 = new Object();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(object0, (Object) null, (Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest0).getPathInfo();
      doReturn((String) null).when(httpServletRequest0).getServletPath();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      try { 
        classPathResourceHandler0.getResource(httpServletRequestWrapper0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.ClassPathResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExternalResourceHandler externalResourceHandler0 = new ExternalResourceHandler("PathSpec ", "l9P+J&?2#");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn("PathSpec ").when(httpServletRequest0).getPathInfo();
      doReturn("/Cannot create a relative resource for ").when(httpServletRequest0).getServletPath();
      AbstractFileResolvingResource abstractFileResolvingResource0 = externalResourceHandler0.getResource(httpServletRequest0);
      assertNull(abstractFileResolvingResource0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExternalResourceHandler externalResourceHandler0 = new ExternalResourceHandler("//");
      AbstractFileResolvingResource abstractFileResolvingResource0 = externalResourceHandler0.getResource("//");
      assertNull(abstractFileResolvingResource0);
  }
}
