/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 15:42:18 GMT 2017
 */

package spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.Map;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpUpgradeHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.Request;
import spark.routematch.RouteMatch;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Request_ESTest extends Request_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Request request0 = new Request();
      Object object0 = new Object();
      RouteMatch routeMatch0 = new RouteMatch(object0, ":", ":>iM^xs9}O]", (String) null);
      request0.changeMatch(routeMatch0);
      assertNull(routeMatch0.getAcceptType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      request0.validSession(false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((ServletInputStream) null).when(httpServletRequest0).getInputStream();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      byte[] byteArray0 = request0.bodyAsBytes();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.params((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("]!h+wPh[V!3MA").when(httpServletRequest0).getRequestURI();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.uri();
      assertEquals("]!h+wPh[V!3MA", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("G<*", "", "", "F(cD:SLdIqx6mE:*");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("F(cD:SLdIqx6mE:*", "").when(httpServletRequest0).getRequestURI();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.getRequestURI();
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      String string0 = request0.uri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      RouteMatch routeMatch0 = new RouteMatch((Object) null, "*", "*", "*");
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      String[] stringArray0 = request0.splat();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getServletPath();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.servletPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletRequest0).getServletPath();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.servletPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("G<*", "", "", "F(cD:SLdIqx6mE:*");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletRequest0).getScheme();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      String string0 = request0.scheme();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("3%", "3%", "3%", "3%");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("3%").when(httpServletRequest0).getMethod();
      Request request0 = new Request(routeMatch0, httpServletRequest0);
      String string0 = request0.requestMethod();
      assertEquals("3%", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Request request0 = new Request();
      HttpServletRequest httpServletRequest0 = request0.raw();
      assertNull(httpServletRequest0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUpgradeHandler httpUpgradeHandler0 = mock(HttpUpgradeHandler.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("d").when(httpServletRequest0).getQueryString();
      doReturn(httpUpgradeHandler0).when(httpServletRequest0).upgrade(any(java.lang.Class.class));
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Class<HttpUpgradeHandler> class0 = HttpUpgradeHandler.class;
      HttpUpgradeHandler httpUpgradeHandler1 = httpServletRequestWrapper0.upgrade(class0);
      RouteMatch routeMatch0 = new RouteMatch(httpUpgradeHandler1, ";%&yK", "3(zN(QU2tH", ";%&yK");
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      String string0 = request0.queryString();
      assertEquals("d", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("host", "host", "", "host");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletRequest0).getQueryString();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      String string0 = request0.queryString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      RouteMatch routeMatch0 = new RouteMatch(object0, "Ul.", "}@gIJv`eiC9qV0$_fh<", "Ul.");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getParameter(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      String string0 = request0.queryParamOrDefault("71C%D8>>Y*O", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletRequest0).getProtocol();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.protocol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((-74185799), 1694).when(httpServletRequest0).getServerPort();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      int int0 = request0.port();
      int int1 = request0.port();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("spark.Request", "").when(httpServletRequest0).getPathInfo();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.pathInfo();
      String string1 = request0.pathInfo();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("G<*", ":user-agent", ":user-agent", ":");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      String string0 = request0.params(":user-agent");
      assertEquals(":user-agent", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("/").when(httpServletRequest0).getRemoteAddr();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.ip();
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletRequest0).getRemoteAddr();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.ip();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch(":L+j8I", ":user-agent", ":user-agent", ":");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("&O4G4").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      String string0 = request0.host();
      assertEquals("&O4G4", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.host();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("", "K").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      request0.userAgent();
      String string0 = request0.headers("");
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.headers("PRp7R");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch(":L+j8I", ":user-agent", ":user-agent", ":");
      Cookie[] cookieArray0 = new Cookie[3];
      Cookie cookie0 = new Cookie(".LEVEL", ":user-agent");
      cookieArray0[0] = cookie0;
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      String string0 = request0.cookie(".LEVEL");
      assertEquals(":user-agent", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(": = ").when(httpServletRequest0).getContextPath();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.contextPath();
      assertEquals(": = ", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getContentType();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.contentType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletRequest0).getContentType();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.contentType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(2083).when(httpServletRequest0).getContentLength();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      int int0 = request0.contentLength();
      assertEquals(2083, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((-2005)).when(httpServletRequest0).getContentLength();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      int int0 = request0.contentLength();
      assertEquals((-2005), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(": = ").when(httpServletRequest0).getAttribute(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      Object object0 = request0.attribute("F(cD:SLdIqx6mE:*");
      assertEquals(": = ", object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.userAgent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      Request request0 = new Request(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.url();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.uri();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.splat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.session(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.session();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.session();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // session cannot be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.servletPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.scheme();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.requestMethod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      RouteMatch routeMatch0 = new RouteMatch(object0, "c^-Z,", "h`Nt3XFg!:FguzFP*#", (String) null);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(httpServletRequestWrapper0);
      httpServletRequestWrapper0.setRequest(servletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.requestMethod();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Request request0 = new Request((HttpServletRequest) null);
      // Undeclared exception!
      try { 
        request0.queryString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.queryParamsValues("/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.queryParams();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.queryParamOrDefault("", "?}*WbCl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.queryMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HttpServletRequest cannot be null.
         //
         verifyException("spark.QueryParamsMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(httpServletRequest0).getParameterMap();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.queryMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.QueryParamsMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.queryMap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HttpServletRequest cannot be null.
         //
         verifyException("spark.QueryParamsMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.protocol();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.port();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = new Object();
      RouteMatch routeMatch0 = new RouteMatch(object0, "\"Vhc:KYL>b>j", "", (String) null);
      Request request0 = new Request(routeMatch0, (HttpServletRequest) null);
      // Undeclared exception!
      try { 
        request0.pathInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.params("user-agent");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.params();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.ip();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.host();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.headers("");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.headers(";");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(httpServletRequestWrapper0);
      httpServletRequestWrapper0.setRequest(servletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.headers("8Wj``CKzqh.^_RsFm-");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Request request0 = new Request((HttpServletRequest) null);
      // Undeclared exception!
      try { 
        request0.cookies();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.contextPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.contentType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      Request request0 = new Request(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.contentLength();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.contentLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      RouteMatch routeMatch0 = new RouteMatch(request0, (String) null, "", "");
      // Undeclared exception!
      try { 
        request0.changeMatch(routeMatch0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.SparkUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("ar\"\u0000Bb=fu]uQD").when(httpServletRequest0).getCharacterEncoding();
      doReturn((ServletInputStream) null).when(httpServletRequest0).getInputStream();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.body();
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ar\"\u0000Bb=fu]uQD
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("9d,5", "9d,5", "9d,5", "9d,5");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.body();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = new Object();
      RouteMatch routeMatch0 = new RouteMatch(object0, "", "a?8)Eol?d_", "");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(httpServletRequest0).getAttributeNames();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.attributes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Request request0 = new Request();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        request0.attribute((String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      RouteMatch routeMatch0 = new RouteMatch((Object) null, "*", "*", "*");
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.attribute("*");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      RouteMatch routeMatch0 = new RouteMatch(object0, ": ", "q^ZD0~%k-@EO", "R+~;fjHL31'9");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = null;
      try {
        request0 = new Request(routeMatch0, httpServletRequestWrapper0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // !hex k
         //
         verifyException("org.eclipse.jetty.util.TypeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = null;
      try {
        request0 = new Request((RouteMatch) null, httpServletRequestWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch(":3%", ":F(cD:SLdIqx6mE:*", ":3%", "");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = null;
      try {
        request0 = new Request(routeMatch0, httpServletRequestWrapper0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad URI % encoding
         //
         verifyException("org.eclipse.jetty.util.URIUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(httpServletRequest0).getParameterMap();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.queryMap("eT~K|c$mL`;88");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.QueryParamsMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("G<*", ":user-agent", ":user-agent", "F(cD:SLdIqx6mE:*");
      Cookie[] cookieArray0 = new Cookie[3];
      Cookie cookie0 = new Cookie("-", ":user-agent");
      cookieArray0[0] = cookie0;
      Cookie cookie1 = new Cookie("8", "");
      cookieArray0[1] = cookie1;
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      String string0 = request0.cookie("8");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("G<*", "", "", "F(cD:SLdIqx6mE:*");
      Cookie[] cookieArray0 = new Cookie[1];
      Cookie cookie0 = new Cookie("7", "F(cD:SLdIqx6mE:*");
      cookieArray0[0] = cookie0;
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      String string0 = request0.cookie("G<*");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("G<*", "", "", "F(cD:SLdIqx6mE:*");
      Cookie[] cookieArray0 = new Cookie[1];
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(cookieArray0).when(httpServletRequest0).getCookies();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.cookie("G<*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      RouteMatch routeMatch0 = new RouteMatch(object0, " = ", " = ", "*");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(httpServletRequest0).getParameterMap();
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Map<String, String[]> map0 = httpServletRequestWrapper0.getParameterMap();
      String[] stringArray0 = new String[0];
      httpServletRequestWrapper0.getSession(false);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(map0).when(httpServletRequest1).getParameterMap();
      doReturn((String) null).when(httpServletRequest1).getRequestURI();
      HttpServletRequestWrapper httpServletRequestWrapper1 = new HttpServletRequestWrapper(httpServletRequest1);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper1);
      request0.uri();
      // Undeclared exception!
      try { 
        request0.queryParams();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(httpServletRequest0).getHeaderNames();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      RouteMatch routeMatch0 = new RouteMatch((Object) null, "*", "*", "*");
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.headers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("e").when(httpServletRequest0).getParameter(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.queryParamOrDefault("", "");
      assertEquals("e", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("8Wj``CKzqh.^_RsFm-").when(httpServletRequest0).getContentType();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.contentType();
      assertEquals("8Wj``CKzqh.^_RsFm-", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("G<*", ":user-agent", ":user-agent", "F(cD:SLdIqx6mE:*");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      String string0 = request0.headers(",/");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(":2 i_.>$G{X-kxN#_2").when(httpServletRequest0).getServletPath();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.servletPath();
      assertEquals(":2 i_.>$G{X-kxN#_2", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.host();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getMethod();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.requestMethod();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      Object object0 = request0.attribute("F(cD:SLdIqx6mE:*");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      RouteMatch routeMatch0 = new RouteMatch(object0, " = ", " = ", "*");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(httpServletRequest0).getServerPort();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      int int0 = request0.port();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("G<*", ":user-agent", ":user-agent", "F(cD:SLdIqx6mE:*");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getScheme();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      String string0 = request0.scheme();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(":2 i_.>$G{X-kxN#_2").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.userAgent();
      assertEquals(":2 i_.>$G{X-kxN#_2", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      RouteMatch routeMatch0 = new RouteMatch(object0, " = ", " = ", "*");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getProtocol();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      String string0 = request0.protocol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("G<*", ":user-agent", ":user-agent", "F(cD:SLdIqx6mE:*");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getRemoteAddr();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      String string0 = request0.ip();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("9d,5", "9d,5", "9d,5", "9d,5");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getCharacterEncoding();
      doReturn((ServletInputStream) null).when(httpServletRequest0).getInputStream();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(routeMatch0, httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((StringBuffer) null).when(httpServletRequest0).getRequestURL();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        request0.url();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getParameter(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.queryParams(">QK{0Uo");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String[] stringArray0 = request0.splat();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RouteMatch routeMatch0 = new RouteMatch("3%", "3%", "3%", "3%");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getPathInfo();
      Request request0 = new Request(routeMatch0, httpServletRequest0);
      String string0 = request0.pathInfo();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      Map<String, String> map0 = request0.params();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.attribute("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getQueryString();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.queryString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(httpServletRequest0).getContentLength();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      int int0 = request0.contentLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getContextPath();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Request request0 = new Request(httpServletRequestWrapper0);
      String string0 = request0.contextPath();
      assertNull(string0);
  }
}
