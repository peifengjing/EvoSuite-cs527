/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 15:32:32 GMT 2017
 */

package spark.route;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.route.HttpMethod;
import spark.route.RouteEntry;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RouteEntry_ESTest extends RouteEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.options;
      routeEntry0.path = "options, null, null//";
      routeEntry0.httpMethod = httpMethod0;
      String string0 = routeEntry0.toString();
      assertEquals("options, options, null, null//, null", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      RouteEntry routeEntry1 = new RouteEntry(routeEntry0);
      assertFalse(routeEntry1.equals((Object)routeEntry0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "options, null, null/";
      routeEntry0.path = "options, null, null/";
      routeEntry0.path = "options, null, null/";
      routeEntry0.path = "options, null, null/*";
      HttpMethod httpMethod0 = HttpMethod.get;
      routeEntry0.httpMethod = httpMethod0;
      boolean boolean0 = routeEntry0.matches(httpMethod0, "options, null, null/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "options, null, null/";
      routeEntry0.path = "options, null, null/";
      routeEntry0.path = "options, null, null/";
      routeEntry0.path = "*/*";
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      routeEntry0.httpMethod = httpMethod0;
      boolean boolean0 = routeEntry0.matches(httpMethod0, "options, null, null/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "pch*";
      boolean boolean0 = routeEntry0.matches((HttpMethod) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "ph*";
      boolean boolean0 = routeEntry0.matches((HttpMethod) null, "UYyf[sB/4%y!mS[`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "delete";
      routeEntry0.path = routeEntry0.path;
      routeEntry0.path = "delete";
      routeEntry0.path = ":patch*";
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      routeEntry0.httpMethod = httpMethod0;
      boolean boolean0 = routeEntry0.matches(httpMethod0, "/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "otions,Gk nll, nAll/";
      routeEntry0.path = "otions,Gk nll, nAll/";
      routeEntry0.path = "otions,Gk nll, nAll/";
      routeEntry0.path = "*/";
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      routeEntry0.httpMethod = httpMethod0;
      boolean boolean0 = routeEntry0.matches(httpMethod0, "otions,Gk nll, nAll/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "+/*paths";
      boolean boolean0 = routeEntry0.matches((HttpMethod) null, "+/*p=!hs*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "delete";
      routeEntry0.path = routeEntry0.path;
      routeEntry0.path = "delete";
      routeEntry0.path = ":patch*";
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      routeEntry0.httpMethod = httpMethod0;
      boolean boolean0 = routeEntry0.matches(httpMethod0, "delete");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.options;
      routeEntry0.path = "options, null, null//";
      routeEntry0.httpMethod = httpMethod0;
      boolean boolean0 = routeEntry0.matches(httpMethod0, "b3QU^#}<s6G^E*H.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "^ f+V&zCpRC.='j0";
      HttpMethod httpMethod0 = HttpMethod.options;
      routeEntry0.httpMethod = httpMethod0;
      boolean boolean0 = routeEntry0.matches(httpMethod0, "^f+V5&zCpRC.9='j0/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "options, null, null//";
      boolean boolean0 = routeEntry0.matches(routeEntry0.httpMethod, "options, null, null//");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "*";
      boolean boolean0 = routeEntry0.matches((HttpMethod) null, ",");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "+/*paths";
      HttpMethod httpMethod0 = HttpMethod.after;
      routeEntry0.httpMethod = httpMethod0;
      boolean boolean0 = routeEntry0.matches(httpMethod0, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.after;
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.path = "MQX8Gw+B/+;wd(WKaTL,";
      boolean boolean0 = routeEntry0.matches(httpMethod0, "q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.afterafter;
      boolean boolean0 = routeEntry0.matches(httpMethod0, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.delete;
      routeEntry0.httpMethod = httpMethod0;
      HttpMethod httpMethod1 = HttpMethod.before;
      routeEntry0.httpMethod = httpMethod1;
      // Undeclared exception!
      try { 
        routeEntry0.matches(routeEntry0.httpMethod, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      // Undeclared exception!
      try { 
        routeEntry0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.route.RouteEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RouteEntry routeEntry0 = null;
      try {
        routeEntry0 = new RouteEntry((RouteEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.route.RouteEntry", e);
      }
  }
}
