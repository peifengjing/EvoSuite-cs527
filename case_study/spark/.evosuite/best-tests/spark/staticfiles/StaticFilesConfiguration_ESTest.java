/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 16:01:37 GMT 2017
 */

package spark.staticfiles;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.util.HashMap;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import spark.staticfiles.StaticFilesConfiguration;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StaticFilesConfiguration_ESTest extends StaticFilesConfiguration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StaticFilesConfiguration staticFilesConfiguration0 = new StaticFilesConfiguration();
      staticFilesConfiguration0.servletInstance = staticFilesConfiguration0;
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("Hd<(jW.IR!F$ W", "", "/").when(httpServletRequest0).getAttribute(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null).when(httpServletResponse0).getWriter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/index.html");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/");
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      staticFilesConfiguration0.configureExternal("");
      // Undeclared exception!
      try { 
        StaticFilesConfiguration.servletInstance.consume(httpServletRequestWrapper0, httpServletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.staticfiles.StaticFilesConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StaticFilesConfiguration staticFilesConfiguration0 = StaticFilesConfiguration.create();
      assertFalse(staticFilesConfiguration0.isStaticResourcesSet());
      
      staticFilesConfiguration0.configure("");
      boolean boolean0 = staticFilesConfiguration0.isStaticResourcesSet();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StaticFilesConfiguration staticFilesConfiguration0 = StaticFilesConfiguration.create();
      // Undeclared exception!
      try { 
        staticFilesConfiguration0.putCustomHeaders((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StaticFilesConfiguration staticFilesConfiguration0 = new StaticFilesConfiguration();
      staticFilesConfiguration0.configureExternal("");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest0).getPathInfo();
      doReturn((String) null).when(httpServletRequest0).getServletPath();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      try { 
        staticFilesConfiguration0.consume(httpServletRequestWrapper0, httpServletResponseWrapper0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.ExternalResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StaticFilesConfiguration staticFilesConfiguration0 = StaticFilesConfiguration.create();
      staticFilesConfiguration0.configureExternal("");
      staticFilesConfiguration0.servletInstance = staticFilesConfiguration0;
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        staticFilesConfiguration0.servletInstance.consume(httpServletRequestWrapper0, httpServletResponseWrapper0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StaticFilesConfiguration staticFilesConfiguration0 = StaticFilesConfiguration.servletInstance;
      staticFilesConfiguration0.configure("");
      staticFilesConfiguration0.servletInstance.putCustomHeader("", (String) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      hashMap0.getOrDefault("", "spark.staticfiles.StaticFilesConfiguration");
      staticFilesConfiguration0.servletInstance.putCustomHeaders(hashMap0);
      staticFilesConfiguration0.servletInstance.configure("spark.staticfiles.StaticFilesConfiguration");
      staticFilesConfiguration0.setExpireTimeSeconds(1L);
      staticFilesConfiguration0.configureExternal("");
      staticFilesConfiguration0.clear();
      StaticFilesConfiguration staticFilesConfiguration1 = StaticFilesConfiguration.create();
      staticFilesConfiguration0.isStaticResourcesSet();
      staticFilesConfiguration0.clear();
      staticFilesConfiguration0.clear();
      staticFilesConfiguration1.servletInstance.configure("");
      staticFilesConfiguration0.isExternalStaticResourcesSet();
      staticFilesConfiguration1.isExternalStaticResourcesSet();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(staticFilesConfiguration1, (Object) null, (Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest0).getPathInfo();
      doReturn((String) null).when(httpServletRequest0).getServletPath();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      try { 
        staticFilesConfiguration0.consume(httpServletRequestWrapper0, httpServletResponseWrapper0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.ClassPathResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StaticFilesConfiguration staticFilesConfiguration0 = new StaticFilesConfiguration();
      // Undeclared exception!
      try { 
        staticFilesConfiguration0.configureExternal((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'folder' must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        StaticFilesConfiguration.servletInstance.configure((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'folder' must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StaticFilesConfiguration staticFilesConfiguration0 = new StaticFilesConfiguration();
      staticFilesConfiguration0.configureExternal("NmoE]");
      assertFalse(staticFilesConfiguration0.isStaticResourcesSet());
      assertFalse(staticFilesConfiguration0.isExternalStaticResourcesSet());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StaticFilesConfiguration.servletInstance.configureExternal("");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StaticFilesConfiguration staticFilesConfiguration0 = StaticFilesConfiguration.servletInstance;
      staticFilesConfiguration0.configure("");
      staticFilesConfiguration0.servletInstance.configure("spark.staticfiles.StaticFilesConfiguration");
      assertTrue(staticFilesConfiguration0.isStaticResourcesSet());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StaticFilesConfiguration staticFilesConfiguration0 = new StaticFilesConfiguration();
      staticFilesConfiguration0.servletInstance = staticFilesConfiguration0;
      assertFalse(staticFilesConfiguration0.servletInstance.isExternalStaticResourcesSet());
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("Hd<(jW.IR!F$ W", "", "/").when(httpServletRequest0).getAttribute(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      staticFilesConfiguration0.configureExternal("");
      assertTrue(staticFilesConfiguration0.isExternalStaticResourcesSet());
      
      boolean boolean0 = StaticFilesConfiguration.servletInstance.consume(httpServletRequestWrapper0, httpServletResponseWrapper0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StaticFilesConfiguration staticFilesConfiguration0 = new StaticFilesConfiguration();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      boolean boolean0 = staticFilesConfiguration0.servletInstance.consume(httpServletRequestWrapper0, httpServletResponseWrapper0);
      assertFalse(staticFilesConfiguration0.isStaticResourcesSet());
      assertFalse(boolean0);
      assertFalse(staticFilesConfiguration0.isExternalStaticResourcesSet());
  }
}
