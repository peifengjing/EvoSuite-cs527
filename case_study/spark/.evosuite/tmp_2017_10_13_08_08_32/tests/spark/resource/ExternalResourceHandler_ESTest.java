/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 16:44:18 GMT 2017
 */

package spark.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import spark.resource.AbstractFileResolvingResource;
import spark.resource.ExternalResource;
import spark.resource.ExternalResourceHandler;
import spark.staticfiles.StaticFilesFolder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExternalResourceHandler_ESTest extends ExternalResourceHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/*/*");
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ExternalResourceHandler externalResourceHandler0 = new ExternalResourceHandler("/*");
      StaticFilesFolder.externalConfiguredTo("/*");
      ExternalResource externalResource0 = (ExternalResource)externalResourceHandler0.getResource("/*");
      assertFalse(externalResource0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExternalResourceHandler externalResourceHandler0 = new ExternalResourceHandler("/", "/");
      StaticFilesFolder.externalConfiguredTo("}u2ljx!*T^.8<Sr");
      // Undeclared exception!
      try { 
        externalResourceHandler0.getResource("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // external
         //
         verifyException("spark.staticfiles.DirectoryTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExternalResourceHandler externalResourceHandler0 = null;
      try {
        externalResourceHandler0 = new ExternalResourceHandler((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ExternalResourceHandler externalResourceHandler0 = null;
      try {
        externalResourceHandler0 = new ExternalResourceHandler((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ExternalResourceHandler externalResourceHandler0 = new ExternalResourceHandler("/");
      AbstractFileResolvingResource abstractFileResolvingResource0 = externalResourceHandler0.getResource("/");
      assertNull(abstractFileResolvingResource0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/*/*");
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ExternalResourceHandler externalResourceHandler0 = new ExternalResourceHandler("/*");
      AbstractFileResolvingResource abstractFileResolvingResource0 = externalResourceHandler0.getResource("/*");
      assertNull(abstractFileResolvingResource0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ExternalResourceHandler externalResourceHandler0 = new ExternalResourceHandler("/");
      AbstractFileResolvingResource abstractFileResolvingResource0 = externalResourceHandler0.getResource("/ when tryqng o geF resourEe. ");
      assertNull(abstractFileResolvingResource0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ExternalResourceHandler externalResourceHandler0 = new ExternalResourceHandler("0;qNRoyqZ", "0;qNRoyqZ");
      try { 
        externalResourceHandler0.getResource("0;qNRoyqZ");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // 0;qNRoyqZ
         //
         verifyException("spark.resource.ExternalResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ExternalResourceHandler externalResourceHandler0 = new ExternalResourceHandler("/", "/");
      try { 
        externalResourceHandler0.getResource((String) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.ExternalResourceHandler", e);
      }
  }
}
