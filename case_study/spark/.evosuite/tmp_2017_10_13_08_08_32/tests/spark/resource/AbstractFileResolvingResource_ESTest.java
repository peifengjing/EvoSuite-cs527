/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 16:19:42 GMT 2017
 */

package spark.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.HttpURLConnection;
import java.net.URLConnection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import spark.resource.ClassPathResource;
import spark.resource.ExternalResource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractFileResolvingResource_ESTest extends AbstractFileResolvingResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource("foj9HO\r\"aJ", classLoader0, class0);
      boolean boolean0 = classPathResource0.isReadable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/target/classes");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "yC7P%.AAY,P");
      ClassPathResource classPathResource0 = new ClassPathResource("");
      File file0 = classPathResource0.getFileForLastModifiedCheck();
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      File file0 = externalResource0.getFileForLastModifiedCheck();
      assertTrue(file0.exists());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      File file0 = externalResource0.getFile();
      assertFalse(file0.isHidden());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/target/classes");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      File file0 = classPathResource0.getFile();
      assertEquals(1392409281320L, file0.lastModified());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0);
      boolean boolean0 = classPathResource0.exists();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource("foj9HO\r\"aJ", classLoader0, class0);
      boolean boolean0 = classPathResource0.exists();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/target/classes");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      long long0 = classPathResource0.contentLength();
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, (ClassLoader) null, class0);
      // Undeclared exception!
      try { 
        classPathResource0.lastModified();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      try { 
        classPathResource0.lastModified();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [] cannot be resolved in the file system for resolving its last-modified timestamp
         //
         verifyException("spark.resource.AbstractResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.isReadable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.getFileForLastModifiedCheck();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource(";J5TQ\"tDz0p", classLoader0, class0);
      try { 
        classPathResource0.getFileForLastModifiedCheck();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [java/lang/;J5TQ\"tDz0p] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.getFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0, class0);
      try { 
        classPathResource0.getFile();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [java/lang/] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.exists();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("Bn:OpJK~L'2]");
      // Undeclared exception!
      try { 
        externalResource0.customizeConnection((URLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("uhRd%\"h_k;");
      // Undeclared exception!
      try { 
        externalResource0.customizeConnection((HttpURLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.AbstractFileResolvingResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      // Undeclared exception!
      try { 
        classPathResource0.contentLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("B<U~Y=d9[");
      try { 
        classPathResource0.contentLength();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [B<U~Y=d9[] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      ExternalResource externalResource0 = new ExternalResource("D-#9pL<XxhLj|0");
      externalResource0.customizeConnection(httpURLConnection0);
      assertEquals("D-#9pL<XxhLj|0", externalResource0.getPath());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      long long0 = externalResource0.lastModified();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0);
      long long0 = classPathResource0.contentLength();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      boolean boolean0 = externalResource0.isReadable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/Peifeng/Desktop/Study/Topics-in-Software-Engineering/GitLab/evosuite/case_study/spark/target/classes");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      boolean boolean0 = classPathResource0.isReadable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0);
      boolean boolean0 = classPathResource0.isReadable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource(".-XGaCa<");
      File file0 = externalResource0.getFileForLastModifiedCheck();
      assertFalse(file0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("/.uNU*H.cL");
      File file0 = externalResource0.getFile();
      assertEquals("/", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("/.uNU*H.cL");
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      externalResource0.customizeConnection(httpURLConnection0);
      assertFalse(externalResource0.exists());
  }
}
