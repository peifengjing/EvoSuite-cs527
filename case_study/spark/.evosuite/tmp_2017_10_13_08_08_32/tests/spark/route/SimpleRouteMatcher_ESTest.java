/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 17:44:25 GMT 2017
 */

package spark.route;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.RouteImpl;
import spark.route.HttpMethod;
import spark.route.SimpleRouteMatcher;
import spark.routematch.RouteMatch;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleRouteMatcher_ESTest extends SimpleRouteMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      RouteMatch routeMatch0 = simpleRouteMatcher0.findTargetForRequestedRoute(httpMethod0, "Jk:WJ_3Hv.{3rPo", "");
      assertNull(routeMatch0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      simpleRouteMatcher0.parseValidateAddRoute((String) null, "", (Object) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      boolean boolean0 = simpleRouteMatcher0.removeRoute("mvGD]Mkl}TBa3", "delete");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      HttpMethod httpMethod0 = HttpMethod.head;
      RouteImpl routeImpl0 = mock(RouteImpl.class, new ViolatedAssumptionAnswer());
      doReturn("3").when(routeImpl0).toString();
      doReturn("*").when(routeImpl0).getAcceptType();
      doReturn("*").when(routeImpl0).getPath();
      simpleRouteMatcher0.add(httpMethod0, routeImpl0);
      boolean boolean0 = simpleRouteMatcher0.removeRoute("3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      // Undeclared exception!
      try { 
        simpleRouteMatcher0.removeRoute("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path cannot be null or blank
         //
         verifyException("spark.route.Routes", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      RouteImpl routeImpl0 = mock(RouteImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(routeImpl0).toString();
      doReturn((String) null).when(routeImpl0).getAcceptType();
      doReturn((String) null).when(routeImpl0).getPath();
      simpleRouteMatcher0.add(httpMethod0, routeImpl0);
      // Undeclared exception!
      try { 
        simpleRouteMatcher0.removeRoute(",14I1g1r|)qYv5;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.route.RouteEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      // Undeclared exception!
      try { 
        simpleRouteMatcher0.removeRoute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path cannot be null or blank
         //
         verifyException("spark.route.Routes", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      RouteImpl routeImpl0 = mock(RouteImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(routeImpl0).toString();
      doReturn((String) null).when(routeImpl0).getAcceptType();
      doReturn((String) null).when(routeImpl0).getPath();
      simpleRouteMatcher0.add(httpMethod0, routeImpl0);
      // Undeclared exception!
      try { 
        simpleRouteMatcher0.findTargetsForRequestedRoute(httpMethod0, (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.route.RouteEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      HttpMethod httpMethod0 = HttpMethod.get;
      RouteImpl routeImpl0 = mock(RouteImpl.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(routeImpl0).toString();
      doReturn((String) null).when(routeImpl0).getAcceptType();
      doReturn((String) null).when(routeImpl0).getPath();
      simpleRouteMatcher0.add(httpMethod0, routeImpl0);
      // Undeclared exception!
      try { 
        simpleRouteMatcher0.findTargetForRequestedRoute(httpMethod0, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.route.RouteEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      HttpMethod httpMethod0 = HttpMethod.head;
      List<RouteMatch> list0 = simpleRouteMatcher0.findTargetsForRequestedRoute(httpMethod0, "3", "3");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      simpleRouteMatcher0.clearRoutes();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleRouteMatcher simpleRouteMatcher0 = new SimpleRouteMatcher();
      boolean boolean0 = simpleRouteMatcher0.removeRoute("3");
      assertFalse(boolean0);
  }
}
