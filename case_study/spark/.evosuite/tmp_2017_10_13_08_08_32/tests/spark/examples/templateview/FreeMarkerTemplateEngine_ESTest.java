/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 17:38:38 GMT 2017
 */

package spark.examples.templateview;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.ModelAndView;
import spark.examples.templateview.FreeMarkerTemplateEngine;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FreeMarkerTemplateEngine_ESTest extends FreeMarkerTemplateEngine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FreeMarkerTemplateEngine freeMarkerTemplateEngine0 = new FreeMarkerTemplateEngine();
      ModelAndView modelAndView0 = freeMarkerTemplateEngine0.modelAndView("\\", "\\");
      // Undeclared exception!
      try { 
        freeMarkerTemplateEngine0.render(modelAndView0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // freemarker.template.TemplateNotFoundException: Template not found for name \"\\\\\".
         // The name was interpreted by this TemplateLoader: freemarker.cache.ClassTemplateLoader@0000000013.
         // Warning: The name contains backslash (\"\\\") instead of slash (\"/\"); template names should use slash only.
         //
         verifyException("spark.examples.templateview.FreeMarkerTemplateEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FreeMarkerTemplateEngine freeMarkerTemplateEngine0 = new FreeMarkerTemplateEngine();
      ModelAndView modelAndView0 = freeMarkerTemplateEngine0.modelAndView("freemarker", (String) null);
      // Undeclared exception!
      try { 
        freeMarkerTemplateEngine0.render(modelAndView0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The \"name\" argument can't be null
         //
         verifyException("freemarker.template.utility.NullArgumentException", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FreeMarkerTemplateEngine freeMarkerTemplateEngine0 = new FreeMarkerTemplateEngine();
      // Undeclared exception!
      try { 
        freeMarkerTemplateEngine0.render((ModelAndView) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.examples.templateview.FreeMarkerTemplateEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FreeMarkerTemplateEngine freeMarkerTemplateEngine0 = new FreeMarkerTemplateEngine();
      ModelAndView modelAndView0 = freeMarkerTemplateEngine0.modelAndView("", "");
      // Undeclared exception!
      try { 
        freeMarkerTemplateEngine0.render(modelAndView0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // freemarker.template.DefaultObjectWrapper didn't convert java.lang.String to a TemplateHashModel. Generally, you want to use a Map<String, Object> or a JavaBean as the root-map (aka. data-model) parameter. The Map key-s or JavaBean property names will be the variable names in the template.
         //
         verifyException("freemarker.template.Template", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FreeMarkerTemplateEngine freeMarkerTemplateEngine0 = new FreeMarkerTemplateEngine();
      ModelAndView modelAndView0 = freeMarkerTemplateEngine0.modelAndView(freeMarkerTemplateEngine0, "");
      String string0 = freeMarkerTemplateEngine0.render(modelAndView0);
      assertEquals("hello.ftl\n", string0);
  }
}
