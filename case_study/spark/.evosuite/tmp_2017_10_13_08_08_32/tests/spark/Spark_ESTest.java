/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 13 16:53:43 GMT 2017
 */

package spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.RenderingHints;
import java.awt.ScrollPane;
import java.awt.Scrollbar;
import java.awt.Window;
import java.awt.event.ActionListener;
import java.lang.reflect.Method;
import java.time.DateTimeException;
import java.time.DayOfWeek;
import java.util.function.Consumer;
import javax.swing.Box;
import javax.swing.JLayeredPane;
import javax.swing.JToolBar;
import javax.swing.KeyStroke;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;
import spark.ExceptionHandler;
import spark.Filter;
import spark.ModelAndView;
import spark.Redirect;
import spark.Request;
import spark.ResponseTransformer;
import spark.ResponseTransformerRouteImpl;
import spark.Route;
import spark.RouteGroup;
import spark.RouteImpl;
import spark.Service;
import spark.Spark;
import spark.TemplateEngine;
import spark.TemplateViewRoute;
import spark.TemplateViewRouteImpl;
import spark.examples.transformer.JsonTransformer;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spark_ESTest extends Spark_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.get("Erl11uTwN=-S", (TemplateViewRoute) null, templateEngine0);
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.head("yp)x", "do'QLY^?CY", (TemplateViewRoute) null, templateEngine1);
      // Undeclared exception!
      try { 
        Spark.after("", "", (Filter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.before((Filter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RouteImpl routeImpl0 = RouteImpl.create("{|_I2#bI,JH3`&?", (Route) null);
      routeImpl0.withPrefix("{|_I2#bI,JH3`&?");
      RouteImpl.create("mMj9&=w}'TFR`u48c", (Route) routeImpl0);
      routeImpl0.withPrefix("mMj9&=w}'TFR`u48c");
      Spark.connect("{|_I2#bI,JH3`&?", "", (Route) routeImpl0);
      Spark.delete("_n5yD(xBk)I!5{3|'*", "", (Route) routeImpl0);
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.post("{|_I2#bI,JH3`&?", "{|_I2#bI,JH3`&?", (TemplateViewRoute) null, templateEngine0);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockClock.systemDefaultZone();
      // Undeclared exception!
      try { 
        DayOfWeek.of(426);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfWeek: 426
         //
         verifyException("java.time.DayOfWeek", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      Spark.after("cV", filter0);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      jsonTransformer0.render((Object) null);
      Integer.max(0, 0);
      jsonTransformer0.render(integer0);
      jsonTransformer0.render("cV");
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "tiwjTts;=>|Uv4", (Route) null, (ResponseTransformer) jsonTransformer0);
      Spark.head((String) null, "", (Route) responseTransformerRouteImpl0);
      Scrollbar scrollbar0 = null;
      try {
        scrollbar0 = new Scrollbar(0, (-1030), 0, 0, 0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.connect("", "", templateViewRoute0, templateEngine0);
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      Spark.path("", routeGroup0);
      TemplateViewRoute templateViewRoute1 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("YN>~", templateViewRoute1, templateEngine1);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      jsonTransformer0.render("");
      Spark.head("YN>~", "", (Route) templateViewRouteImpl0, (ResponseTransformer) jsonTransformer0);
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        Spark.webSocket("chunked", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'
         //
         verifyException("spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute0, templateEngine0);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      Spark.put("", (Route) templateViewRouteImpl0, (ResponseTransformer) jsonTransformer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("fPN@*m?62", templateViewRoute0, (TemplateEngine) null);
      RouteImpl routeImpl0 = RouteImpl.create("zECp-n)iM", (String) null, (Route) templateViewRouteImpl0);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) routeImpl0, (ResponseTransformer) jsonTransformer0);
      Spark.put("", (Route) responseTransformerRouteImpl0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.ipAddress("B.&mQ'P6o\"m51L/{t");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Spark.stop();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("Tc}f;V9\"qO08}Xe@", (Route) templateViewRouteImpl0);
      RouteImpl routeImpl1 = RouteImpl.create("Tc}f;V9\"qO08}Xe@", "THKB]T1$E78", (Route) routeImpl0);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      Spark.trace("Tc}f;V9\"qO08}Xe@", (Route) routeImpl1, (ResponseTransformer) jsonTransformer0);
      assertFalse(routeImpl0.equals((Object)routeImpl1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.halt((-1160), "@HF'/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create((String) null, (String) null, templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("9PZ~&Q6:6Bt", "", (Route) templateViewRouteImpl0);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      jsonTransformer0.render(";y");
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create(";y", (Route) routeImpl0, (ResponseTransformer) jsonTransformer0);
      TemplateViewRoute templateViewRoute1 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl.create(";y", "9PZ~&Q6:6Bt", templateViewRoute1, templateEngine1);
      RouteImpl.create("XAvkeX)L;eg", "f$:?T{oxf", (Route) routeImpl0);
      Spark.put("", "_|", (Route) responseTransformerRouteImpl0);
      Spark.options((String) null, "", (Route) routeImpl0, (ResponseTransformer) jsonTransformer0);
      Spark.delete("", "spark.Spark$SingletonHolder", (Route) responseTransformerRouteImpl0, (ResponseTransformer) jsonTransformer0);
      Spark.activeThreadCount();
      // Undeclared exception!
      try { 
        Spark.halt(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Spark.notFound("}\u0005");
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      Spark.patch("spark.Spark", "SzJs#hYs$0P'", (Route) null, (ResponseTransformer) jsonTransformer0);
      Frame frame0 = null;
      try {
        frame0 = new Frame("SzJs#hYs$0P'");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RouteImpl routeImpl0 = RouteImpl.create("*****************************************************", (Route) null);
      Spark.patch("*****************************************************", "*****************************************************", (Route) routeImpl0, (ResponseTransformer) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.webSocketIdleTimeoutMillis(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.get("spark.Spark", "If-Range", templateViewRoute0, templateEngine0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.after((Filter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      Spark.before("Vk;?b2?[", filter0);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("Ihq ", templateViewRoute0, templateEngine0);
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("Protocol", "Protocol", (Route) templateViewRouteImpl0, (ResponseTransformer) null);
      RouteImpl routeImpl0 = RouteImpl.create("Qt1U|BsN3xO&:;B||W", (Route) responseTransformerRouteImpl0);
      RouteImpl routeImpl1 = RouteImpl.create("", "Qt1U|BsN3xO&:;B||W", (Route) routeImpl0);
      Spark.delete("Qt1U|BsN3xO&:;B||W", (Route) routeImpl1, (ResponseTransformer) null);
      Spark.get("Ihq ", "s\"B?%mA\"]b~2s8V%J", (Route) templateViewRouteImpl0, (ResponseTransformer) null);
      Spark.options("[=A/|tg1<*yD", (Route) routeImpl0, (ResponseTransformer) null);
      assertFalse(routeImpl0.equals((Object)routeImpl1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Spark.stop();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.put("", templateViewRoute0, templateEngine0);
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("D=P[aw<W+y]", (Route) null, (ResponseTransformer) null);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("kgkKw:+<8jK");
      Spark.connect("", "kgkKw:+<8jK", (Route) routeImpl0, (ResponseTransformer) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("`V:FX|z&sk0g%m=b`;", "$", templateViewRoute0, templateEngine0);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("cJ1[1Ur^?$.\"k!`?Q", (Route) templateViewRouteImpl0, (ResponseTransformer) jsonTransformer0);
      ResponseTransformerRouteImpl responseTransformerRouteImpl1 = ResponseTransformerRouteImpl.create("", "kk%E", (Route) responseTransformerRouteImpl0, (ResponseTransformer) jsonTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl1.withPrefix("cJ1[1Ur^?$.\"k!`?Q");
      Spark.trace("kk%E", (Route) routeImpl0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Spark.delete((String) null, "", (Route) null);
      Filter[] filterArray0 = new Filter[2];
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      filterArray0[0] = filter0;
      filterArray0[1] = filter0;
      Spark.before(filterArray0);
      Spark.delete("", "", (Route) null);
      Spark.init();
      Spark.internalServerError((Route) null);
      Spark.get("", "", (Route) null);
      Spark.connect("", "", (Route) null);
      Class<Exception> class0 = Exception.class;
      // Undeclared exception!
      try { 
        Spark.webSocket((String) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'
         //
         verifyException("spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.halt(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.patch("w.]z", "", templateViewRoute0, templateEngine0);
      TemplateViewRoute templateViewRoute1 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("w.]z", templateViewRoute1, templateEngine1);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (String) null, (Route) templateViewRouteImpl0, (ResponseTransformer) jsonTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create("L|)", (Route) responseTransformerRouteImpl0);
      RouteImpl routeImpl1 = RouteImpl.create("w.]z", "L|)", (Route) routeImpl0);
      routeImpl1.withPrefix("L|)");
      Spark.get("", (Route) routeImpl1, (ResponseTransformer) jsonTransformer0);
      // Undeclared exception!
      try { 
        Spark.secure("", "'Ke>WcQCh\"ep5HA.", "", "L|)", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.secure("<,", "", "", "", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.secure(",>J", ",>J", ",>J", ",>J", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.halt("BCQ ]?}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.get("", "", templateViewRoute0, templateEngine0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Spark.port();
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      jsonTransformer0.render((Object) null);
      Spark.trace("spark.Spark", "`|?7?g", (Route) null, (ResponseTransformer) jsonTransformer0);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.delete("spark.Spark$SingletonHolder", templateViewRoute0, templateEngine0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("Name cannot contain '.'", (Route) null, (ResponseTransformer) jsonTransformer0);
      ResponseTransformerRouteImpl responseTransformerRouteImpl1 = ResponseTransformerRouteImpl.create("Name cannot contain '.'", "Name cannot contain '.'", (Route) responseTransformerRouteImpl0, (ResponseTransformer) jsonTransformer0);
      jsonTransformer0.render(responseTransformerRouteImpl1);
      jsonTransformer0.render((Object) null);
      ResponseTransformerRouteImpl.create("", (Route) responseTransformerRouteImpl1, (ResponseTransformer) jsonTransformer0);
      jsonTransformer0.render("Name cannot contain '.'");
      responseTransformerRouteImpl0.withPrefix("Name cannot contain '.'");
      Spark.connect("Name cannot contain '.'", "Name cannot contain '.'", (Route) responseTransformerRouteImpl0, (ResponseTransformer) jsonTransformer0);
      // Undeclared exception!
      try { 
        Spark.secure("&^Kq=M", "", "Name cannot contain '.'", "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Spark.get("41'pG~:\"aE^ua@l", ":yawx8Q*%8_Y:@[1M*", (Route) null);
      // Undeclared exception!
      try { 
        Spark.setIpAddress(":yawx8Q*%8_Y:@[1M*");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.get("Erl11uTwN=-S", (TemplateViewRoute) null, templateEngine0);
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.head("yp)x", "do'QLY^?CY", (TemplateViewRoute) null, templateEngine1);
      // Undeclared exception!
      try { 
        Spark.after("Erl11uTwN=-S", (Filter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Spark", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("u9w@39>*/W4%V&", "xW+.l ]fM%iFI.", templateViewRoute0, templateEngine0);
      Spark.head("xW+.l ]fM%iFI.", (Route) templateViewRouteImpl0);
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        request0.cookies();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("ZPw`Skm@lp4&T<", "", templateViewRoute0, templateEngine0);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) templateViewRouteImpl0, (ResponseTransformer) jsonTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create("IPq1,Q", "IPq1,Q", (Route) responseTransformerRouteImpl0);
      jsonTransformer0.render(routeImpl0);
      ResponseTransformerRouteImpl responseTransformerRouteImpl1 = ResponseTransformerRouteImpl.create("", "NU7\"7GYHa", (Route) routeImpl0, (ResponseTransformer) jsonTransformer0);
      Spark.post("P", (Route) responseTransformerRouteImpl1, (ResponseTransformer) jsonTransformer0);
      Spark.patch((String) null, (Route) responseTransformerRouteImpl1, (ResponseTransformer) jsonTransformer0);
      TemplateViewRoute templateViewRoute1 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.post("g", templateViewRoute1, templateEngine1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.post("*L", templateViewRoute0, templateEngine0);
      // Undeclared exception!
      try { 
        Spark.threadPool(3535, (-2166), 3535);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("&=|z,z_E$RX", "&=|z,z_E$RX", templateViewRoute0, templateEngine0);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      Spark.post("&=|z,z_E$RX", "au4mLU*]fC", (Route) templateViewRouteImpl0, (ResponseTransformer) jsonTransformer0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.delete("spark.Spark$SingletonHolder", "", templateViewRoute0, templateEngine0);
      TemplateViewRoute templateViewRoute1 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute1, templateEngine1);
      Spark.trace((String) null, "_RWy\\zdR+T@kN^g[B", (Route) templateViewRouteImpl0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.patch("B,3", "B,3", (TemplateViewRoute) null, templateEngine0);
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "~&5CH' T*HNW", (TemplateViewRoute) null, templateEngine1);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", (Route) templateViewRouteImpl0, (ResponseTransformer) jsonTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("B,3");
      ResponseTransformerRouteImpl.create("", (Route) templateViewRouteImpl0, (ResponseTransformer) jsonTransformer0);
      ResponseTransformerRouteImpl responseTransformerRouteImpl1 = ResponseTransformerRouteImpl.create("", "~&5CH' T*HNW", (Route) routeImpl0, (ResponseTransformer) jsonTransformer0);
      Spark.patch("B,3", (Route) responseTransformerRouteImpl1, (ResponseTransformer) jsonTransformer0);
      Filter[] filterArray0 = new Filter[2];
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      filterArray0[0] = filter0;
      filterArray0[1] = filter0;
      Spark.before("", filterArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Spark spark0 = new Spark();
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      Spark.post("z,DQc5KkTr", "z,DQc5KkTr", (Route) null, (ResponseTransformer) jsonTransformer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("X:Lq;&N.", "8", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("8", "X:Lq;&N.", (Route) templateViewRouteImpl0);
      RouteImpl routeImpl1 = RouteImpl.create("X:Lq;&N.", "X:Lq;&N.", (Route) templateViewRouteImpl0);
      Spark.connect("X:Lq;&N.", (Route) routeImpl0);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      Spark.get("1.0", (Route) routeImpl1, (ResponseTransformer) jsonTransformer0);
      Spark.put("", "^I.LY:Cq: /A&x[L;?", (Route) routeImpl0, (ResponseTransformer) jsonTransformer0);
      assertFalse(routeImpl0.equals((Object)routeImpl1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RouteGroup routeGroup0 = mock(RouteGroup.class, new ViolatedAssumptionAnswer());
      Spark.path("spark.Spark$SingletonHolder", routeGroup0);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      Spark.options("spark.Spark$SingletonHolder", templateViewRoute0, (TemplateEngine) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("LOCATION", "'<yF`", templateViewRoute0, templateEngine0);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("", "", (Route) templateViewRouteImpl0, (ResponseTransformer) jsonTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create("", "'<yF`", (Route) responseTransformerRouteImpl0);
      Spark.options("", (Route) routeImpl0, (ResponseTransformer) jsonTransformer0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      Spark.before("8SW:XsFs0_L,", filter0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.staticFileLocation("1");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("B[qGf9<&1]O?|", "B[qGf9<&1]O?|", (Route) null, (ResponseTransformer) jsonTransformer0);
      RouteImpl routeImpl0 = RouteImpl.create("B[qGf9<&1]O?|", "*nA9x\u0001I8Nq\"tAG~", (Route) responseTransformerRouteImpl0);
      Spark.trace("spark.Spark$SingletonHolder", "spark.Spark$SingletonHolder", (Route) routeImpl0);
      RouteImpl routeImpl1 = routeImpl0.withPrefix("*nA9x\u0001I8Nq\"tAG~");
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      Spark.afterAfter(filter0);
      Spark.delete("", "B[qGf9<&1]O?|", (Route) routeImpl0);
      assertSame(routeImpl0, routeImpl1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.delete("spark.Spark$SingletonHolder", "", templateViewRoute0, templateEngine0);
      TemplateViewRoute templateViewRoute1 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute1, templateEngine1);
      Spark.trace((String) null, (String) null, (Route) templateViewRouteImpl0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Spark.connect("spark.Spark$SingletonHolder", (Route) null, (ResponseTransformer) null);
      Spark.delete("spark.Spark$SingletonHolder", "spark.Spark$SingletonHolder", (Route) null);
      Spark.delete("spark.Spark$SingletonHolder", (Route) null);
      // Undeclared exception!
      try { 
        Spark.path("spark.Spark$SingletonHolder", (RouteGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.setIpAddress("7*~Zy'r*`Bx");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("completeWrite exception", templateViewRoute0, templateEngine0);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("spark.Spark", "completeWrite exception", (Route) templateViewRouteImpl0, (ResponseTransformer) jsonTransformer0);
      Spark.connect("spark.Spark", "completeWrite exception", (Route) responseTransformerRouteImpl0, (ResponseTransformer) jsonTransformer0);
      Spark.head("", "", (Route) templateViewRouteImpl0, (ResponseTransformer) jsonTransformer0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.patch("t", "org.eclipse.jetty.servlet.ServletHandler", templateViewRoute0, templateEngine0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Spark.delete("", (Route) null, (ResponseTransformer) null);
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      Spark.afterAfter(filter0);
      Filter filter1 = mock(Filter.class, new ViolatedAssumptionAnswer());
      Spark.afterAfter("", filter1);
      Spark.put("", "", (Route) null, (ResponseTransformer) null);
      Spark.post("", (Route) null);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.patch("spark.Spark", templateViewRoute0, templateEngine0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.setSecure("AXb7I|:Kw0sFx_", "M6|", "spark.Spark$SingletonHolder", "tagSyntax");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spark.setSecure("APACHE", "APACHE", "APACHE", "No Server set for {}");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.post("6XBWEr65*=>JL(Ivmf", "", templateViewRoute0, templateEngine0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.trace("1Ctxw", templateViewRoute0, templateEngine0);
      TemplateViewRoute templateViewRoute1 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "", templateViewRoute1, templateEngine1);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      Spark.get("1Ctxw", (Route) templateViewRouteImpl0, (ResponseTransformer) jsonTransformer0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      ResponseTransformerRouteImpl.create("7$.\"", "7$.\"", (Route) null, (ResponseTransformer) jsonTransformer0);
      Spark.put("7$.\"", "7$.\"", (Route) null);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.trace("dTq_?l{5Yzo7*OAUbi", "7$.\"", templateViewRoute0, templateEngine0);
      // Undeclared exception!
      try { 
        Spark.setPort(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.put("", (String) null, templateViewRoute0, templateEngine0);
      TemplateViewRoute templateViewRoute1 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.connect("8=5'8|fe", "g8Z)I*2,T}-9P", templateViewRoute1, templateEngine1);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("8=5'8|fe", "g8Z)I*2,T}-9P", (Route) null, (ResponseTransformer) jsonTransformer0);
      RouteImpl routeImpl0 = responseTransformerRouteImpl0.withPrefix("g8Z)I*2,T}-9P");
      ResponseTransformerRouteImpl responseTransformerRouteImpl1 = ResponseTransformerRouteImpl.create((String) null, (Route) routeImpl0, (ResponseTransformer) jsonTransformer0);
      responseTransformerRouteImpl1.withPrefix("g8Z)I*2,T}-9P");
      Spark.patch("g8Z)I*2,T}-9P", "?HlOLz=ka", (Route) responseTransformerRouteImpl1);
      Class<Window> class0 = Window.class;
      // Undeclared exception!
      try { 
        Spark.webSocket("", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'
         //
         verifyException("spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      doReturn("&wLkNhz").when(templateEngine0).render(any(spark.ModelAndView.class));
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("&wLkNhz", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("Y`=7|6>YFV^G +t", (Route) templateViewRouteImpl0);
      SunHints.Value sunHints_Value0 = (SunHints.Value)RenderingHints.VALUE_COLOR_RENDER_QUALITY;
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      Spark.connect("&wLkNhz", (Route) routeImpl0, (ResponseTransformer) jsonTransformer0);
      ModelAndView modelAndView0 = templateViewRouteImpl0.modelAndView((Object) null, (String) null);
      templateViewRouteImpl0.render(modelAndView0);
      Spark.delete((String) null, "Y`=7|6>YFV^G +t", (Route) routeImpl0, (ResponseTransformer) jsonTransformer0);
      Spark.post("Y`=7|6>YFV^G +t", (String) null, (Route) templateViewRouteImpl0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Consumer<Exception> consumer0 = (Consumer<Exception>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Spark.initExceptionHandler(consumer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 1060;
      // Undeclared exception!
      try { 
        Spark.threadPool(1060, 1060, 65536);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Spark.internalServerError("Servlet.init {} for {}");
      RouteImpl routeImpl0 = RouteImpl.create((String) null, (Route) null);
      RouteImpl.create("", "X2C,h:q @$'hxhoF^", (Route) null);
      routeImpl0.withPrefix("j~WdkmT%F6PE;N");
      RouteImpl routeImpl1 = RouteImpl.create("Q+13'Q^=F/", "ku81", (Route) null);
      RouteImpl.create((String) null, "Q+13'Q^=F/", (Route) null);
      routeImpl1.withPrefix("");
      RouteImpl.create("", "td~PPQS", (Route) null);
      String string0 = "8GIP^@FnwXm";
      routeImpl1.withPrefix("8GIP^@FnwXm");
      Spark.get(")V]qNd5|747h", ")V]qNd5|747h", (Route) routeImpl0);
      Object object0 = new Object();
      routeImpl1.render(object0);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.options("", "Servlet.init {} for {}", templateViewRoute0, templateEngine0);
      Spark.get("", (Route) routeImpl1);
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      Spark.internalServerError(")V]qNd5|747h");
      Spark.notFound((Route) routeImpl1);
      String string1 = "spark.Spark";
      // Undeclared exception!
      try { 
        Spark.port(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Filter[] filterArray0 = new Filter[2];
      filterArray0[1] = filterArray0[0];
      Spark.after((String) null, "_@v@=JI-n3d", filterArray0);
      Spark.after(filterArray0);
      Spark.before("4%Av4", "x_K|vnR{D", filterArray0);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.trace((String) null, templateViewRoute0, templateEngine0);
      Spark.modelAndView((Object) null, "Content-Type");
      Spark spark0 = new Spark();
      TemplateViewRoute templateViewRoute1 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("spark.Spark$SingletonHolder", "", templateViewRoute1, templateEngine1);
      Spark.delete("org.eclipse.jetty.server.session.JDBCSessionDataStore", (Route) templateViewRouteImpl0);
      Spark.port();
      // Undeclared exception!
      try { 
        Spark.secure("Content-Type", "", "x_K|vnR{D", "x_K|vnR{D");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "D6u!LKgUas";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.connect("D6u!LKgUas", templateViewRoute0, templateEngine0);
      String string1 = null;
      String string2 = "";
      TemplateViewRoute templateViewRoute1 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine1 = null;
      Spark.connect((String) null, "", templateViewRoute1, (TemplateEngine) null);
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      Spark.afterAfter("", filter0);
      // Undeclared exception!
      try { 
        Spark.halt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "&FtWyslgsw>H";
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.delete("&FtWyslgsw>H", templateViewRoute0, templateEngine0);
      // Undeclared exception!
      try { 
        Spark.threadPool((-491));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.post("q=q0", "q=q0", (TemplateViewRoute) null, templateEngine0);
      Spark spark0 = new Spark();
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("MULTIPLE_CHOICES", "Cl$l ev&mm", (TemplateViewRoute) null, templateEngine1);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      Spark.options("MULTIPLE_CHOICES", "MULTIPLE_CHOICES", (Route) templateViewRouteImpl0, (ResponseTransformer) jsonTransformer0);
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      Spark.after("q=q0", filter0);
      TemplateEngine templateEngine2 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl1 = TemplateViewRouteImpl.create("q=q0", "", (TemplateViewRoute) null, templateEngine2);
      Spark.delete("q=q0", (Route) templateViewRouteImpl1);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      int int0 = 811;
      Integer.getInteger(" on ", 811);
      // Undeclared exception!
      try { 
        Spark.webSocket("", (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WebSocket handler must implement 'WebSocketListener' or be annotated as '@WebSocket'
         //
         verifyException("spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      Object object0 = new Object();
      jsonTransformer0.render(object0);
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create((String) null, "7$.\"", (Route) null, (ResponseTransformer) jsonTransformer0);
      Spark.patch("7$.\"", (Route) responseTransformerRouteImpl0);
      Spark.put("7$.\"", "7$.\"", (Route) null);
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.trace("dTq_?l{5Yzo7*OAUbi", "W)^8hoZ2{eVOwwSQ e", templateViewRoute0, templateEngine0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "PTG7}&%xX|mVTZ*[.%9";
      Filter[] filterArray0 = new Filter[1];
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      filterArray0[0] = filter0;
      Spark.after("PTG7}&%xX|mVTZ*[.%9", filterArray0);
      String string1 = ")m";
      Route route0 = null;
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      Redirect.Status redirect_Status0 = Redirect.Status.NOT_MODIFIED;
      jsonTransformer0.render(redirect_Status0);
      jsonTransformer0.render(")m");
      ScrollPane scrollPane0 = null;
      try {
        scrollPane0 = new ScrollPane();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Spark.init();
      Filter[] filterArray0 = new Filter[9];
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      filterArray0[0] = filter0;
      filterArray0[1] = filter0;
      filterArray0[2] = filter0;
      filterArray0[3] = filter0;
      filterArray0[4] = filter0;
      filterArray0[5] = filter0;
      filterArray0[6] = filter0;
      filterArray0[7] = filter0;
      filterArray0[8] = filter0;
      Spark.before("", filterArray0);
      // Undeclared exception!
      try { 
        Spark.threadPool(434, 434, 434);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      Spark.afterAfter("+UQSS4", filter0);
      Class<Exception> class0 = Exception.class;
      ExceptionHandler<Exception> exceptionHandler0 = (ExceptionHandler<Exception>) mock(ExceptionHandler.class, new ViolatedAssumptionAnswer());
      Spark.exception(class0, (ExceptionHandler<? super Exception>) exceptionHandler0);
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", "+UQSS4", (TemplateViewRoute) null, templateEngine0);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      Dimension dimension0 = jToolBar_Separator0.getPreferredSize();
      Box.Filler box_Filler0 = new Box.Filler(dimension0, dimension0, dimension0);
      StyledEditorKit.ItalicAction styledEditorKit_ItalicAction0 = new StyledEditorKit.ItalicAction();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(10, (-913), false);
      int int0 = 1;
      box_Filler0.registerKeyboardAction((ActionListener) styledEditorKit_ItalicAction0, "#Pof+7L^$6&D", keyStroke0, 1);
      templateViewRouteImpl0.modelAndView(box_Filler0, "C Br7[");
      RouteImpl routeImpl0 = RouteImpl.create("aMraNy @W~<!0'btt)", "", (Route) templateViewRouteImpl0);
      RouteImpl.create("(q\"1F`Y", "", (Route) templateViewRouteImpl0);
      Spark.head("vp", "vp", (Route) templateViewRouteImpl0);
      Spark.options("Nh,-YROyn]", "zpgAtj^_D", (Route) routeImpl0);
      Spark.options("+UQSS4", (Route) templateViewRouteImpl0);
      // Undeclared exception!
      try { 
        Spark.externalStaticFileLocation("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This must be done before route mapping has begun
         //
         verifyException("spark.Service", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      TemplateViewRouteImpl templateViewRouteImpl0 = TemplateViewRouteImpl.create("", templateViewRoute0, templateEngine0);
      RouteImpl routeImpl0 = RouteImpl.create("ngg`U)d+\"#0;N}2Tt$", "X}oijblqc|j$e/~zVEO", (Route) templateViewRouteImpl0);
      routeImpl0.withPrefix("");
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      jsonTransformer0.render(templateViewRouteImpl0);
      ResponseTransformerRouteImpl responseTransformerRouteImpl0 = ResponseTransformerRouteImpl.create("X}oijblqc|j$e/~zVEO", (Route) routeImpl0, (ResponseTransformer) jsonTransformer0);
      ResponseTransformerRouteImpl responseTransformerRouteImpl1 = ResponseTransformerRouteImpl.create("peUF1=,[_N&MaPp", "peUF1=,[_N&MaPp", (Route) responseTransformerRouteImpl0, (ResponseTransformer) jsonTransformer0);
      Spark.head("X}oijblqc|j$e/~zVEO", (Route) responseTransformerRouteImpl1, (ResponseTransformer) jsonTransformer0);
      Spark.stop();
      responseTransformerRouteImpl1.render(templateViewRouteImpl0);
      TemplateEngine templateEngine1 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.head("ngg`U)d+\"#0;N}2Tt$", (TemplateViewRoute) null, templateEngine1);
      TemplateEngine templateEngine2 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.trace("null", "kvJkml-sryFi^ILXMD", (TemplateViewRoute) null, templateEngine2);
      Spark.connect("3[P?s;]npiWP}", "kvJkml-sryFi^ILXMD", (Route) responseTransformerRouteImpl1, (ResponseTransformer) jsonTransformer0);
      int int0 = Spark.activeThreadCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      Spark.put("u[Nn}GY;|6/b", "u[Nn}GY;|6/b", templateViewRoute0, templateEngine0);
      Filter[] filterArray0 = new Filter[4];
      Filter filter0 = mock(Filter.class, new ViolatedAssumptionAnswer());
      filterArray0[0] = filter0;
      filterArray0[1] = filter0;
      filterArray0[2] = filter0;
      filterArray0[3] = filter0;
      Spark.before(filterArray0);
      Spark.after("[]", filterArray0);
      JsonTransformer jsonTransformer0 = new JsonTransformer();
      Service.ignite();
      jsonTransformer0.render("u[Nn}GY;|6/b");
      Spark.put("", "[]", (Route) null, (ResponseTransformer) jsonTransformer0);
      Spark.options("", (Route) null);
      Spark.internalServerError((Route) null);
  }
}
